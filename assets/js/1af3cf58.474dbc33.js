"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[65588],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var i=a.createContext({}),c=function(t){var e=a.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(i.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},j=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,i=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),u=c(n),j=r,k=u["".concat(i,".").concat(j)]||u[j]||d[j]||o;return n?a.createElement(k,s(s({ref:e},p),{},{components:n})):a.createElement(k,s({ref:e},p))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,s=new Array(o);s[0]=j;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=t,l[u]="string"==typeof t?t:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}j.displayName="MDXCreateElement"},76209:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={title:"JSON_EXTRACT",language:"en"},s=void 0,l={unversionedId:"sql-manual/sql-functions/json-functions/json-extract",id:"sql-manual/sql-functions/json-functions/json-extract",title:"JSON_EXTRACT",description:"\x3c!--",source:"@site/docs/sql-manual/sql-functions/json-functions/json-extract.md",sourceDirName:"sql-manual/sql-functions/json-functions",slug:"/sql-manual/sql-functions/json-functions/json-extract",permalink:"/docs/dev/sql-manual/sql-functions/json-functions/json-extract",draft:!1,tags:[],version:"current",frontMatter:{title:"JSON_EXTRACT",language:"en"},sidebar:"docs",previous:{title:"JSON_PARSE",permalink:"/docs/dev/sql-manual/sql-functions/json-functions/json-parse"},next:{title:"JSON_EXISTS_PATH",permalink:"/docs/dev/sql-manual/sql-functions/json-functions/json-exists-path"}},i={},c=[{value:"json_extract",id:"json_extract",level:2},{value:"description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"json_exists_path and json_type",id:"json_exists_path-and-json_type",level:2},{value:"description",id:"description-1",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"example",id:"example",level:3},{value:"keywords",id:"keywords",level:3}],p={toc:c},u="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"json_extract"},"json_extract"),(0,r.kt)("version",{since:"dev"}),(0,r.kt)("h3",{id:"description"},"description"),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"`VARCHAR json_extract(VARCHAR json_str, VARCHAR path[, VARCHAR path] ...))`\nJSON jsonb_extract(JSON j, VARCHAR json_path)\nBOOLEAN json_extract_isnull(JSON j, VARCHAR json_path)\nBOOLEAN json_extract_bool(JSON j, VARCHAR json_path)\nINT json_extract_int(JSON j, VARCHAR json_path)\nBIGINT json_extract_bigint(JSON j, VARCHAR json_path)\nLARGEINT json_extract_largeint(JSON j, VARCHAR json_path)\nDOUBLE json_extract_double(JSON j, VARCHAR json_path)\nSTRING json_extract_string(JSON j, VARCHAR json_path)\nVARCHAR json_str->json_path\n")),(0,r.kt)("p",null,"json_extract functions extract field specified by json_path from JSON. A series of functions are provided for different datatype."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"json_extract with VARCHAR argument, extract and return VARCHAR datatype"),(0,r.kt)("li",{parentName:"ul"},"jsonb_extract extract and return JSON datatype"),(0,r.kt)("li",{parentName:"ul"},"json_extract_isnull check if the field is json null and return BOOLEAN datatype"),(0,r.kt)("li",{parentName:"ul"},"json_extract_bool extract and return BOOLEAN datatype"),(0,r.kt)("li",{parentName:"ul"},"json_extract_int extract and return INT datatype"),(0,r.kt)("li",{parentName:"ul"},"json_extract_bigint extract and return BIGINT datatype"),(0,r.kt)("li",{parentName:"ul"},"json_extract_largeint extract and return LARGEINT datatype"),(0,r.kt)("li",{parentName:"ul"},"json_extract_double extract and return DOUBLE datatype"),(0,r.kt)("li",{parentName:"ul"},"json_extract_STRING extract and return STRING datatype")),(0,r.kt)("p",null,"json path syntax:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"'$' for json document root"),(0,r.kt)("li",{parentName:"ul"},"'.k1' for element of json object with key 'k1'",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'If the key column value contains ".", double quotes are required in json_path, For example: SELECT json_extract(\'{"k1.a":"abc","k2":300}\', \'$."k1.a"\');'))),(0,r.kt)("li",{parentName:"ul"},"'","[i]","' for element of json array at index i",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Use '$","[last]","' to get the last element of json_array, and '$","[last-1]","' to get the penultimate element, and so on.")))),(0,r.kt)("p",null,"Exception handling is as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if the field specified by json_path does not exist, return NULL"),(0,r.kt)("li",{parentName:"ul"},"if datatype of the field specified by json_path is not the same with type of json_extract_t, return t if it can be cast to t else NULL")),(0,r.kt)("h2",{id:"json_exists_path-and-json_type"},"json_exists_path and json_type"),(0,r.kt)("h3",{id:"description-1"},"description"),(0,r.kt)("h4",{id:"syntax-1"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"BOOLEAN json_exists_path(JSON j, VARCHAR json_path)\nSTRING json_type(JSON j, VARCHAR json_path)\n")),(0,r.kt)("p",null,"There are two extra functions to check field existence and type"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"json_exists_path check the existence of the field specified by json_path, return TRUE or FALS"),(0,r.kt)("li",{parentName:"ul"},"json_type get the type as follows of the field specified by json_path, return NULL if it does not exist",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"object"),(0,r.kt)("li",{parentName:"ul"},"array"),(0,r.kt)("li",{parentName:"ul"},"null"),(0,r.kt)("li",{parentName:"ul"},"bool"),(0,r.kt)("li",{parentName:"ul"},"int"),(0,r.kt)("li",{parentName:"ul"},"bigint"),(0,r.kt)("li",{parentName:"ul"},"largeint"),(0,r.kt)("li",{parentName:"ul"},"double"),(0,r.kt)("li",{parentName:"ul"},"string")))),(0,r.kt)("h3",{id:"example"},"example"),(0,r.kt)("p",null,"refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/dev/sql-manual/sql-reference/Data-Types/JSON"},"json tutorial")," for more."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'mysql> SELECT json_extract(\'{"id": 123, "name": "doris"}\', \'$.id\');\n+------------------------------------------------------+\n| json_extract(\'{"id": 123, "name": "doris"}\', \'$.id\') |\n+------------------------------------------------------+\n| 123                                                  |\n+------------------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql> SELECT json_extract(\'[1, 2, 3]\', \'$.[1]\');\n+------------------------------------+\n| json_extract(\'[1, 2, 3]\', \'$.[1]\') |\n+------------------------------------+\n| 2                                  |\n+------------------------------------+\n1 row in set (0.01 sec)\n\nmysql> SELECT json_extract(\'{"k1": "v1", "k2": { "k21": 6.6, "k22": [1, 2] } }\', \'$.k1\', \'$.k2.k21\', \'$.k2.k22\', \'$.k2.k22[1]\');\n+-------------------------------------------------------------------------------------------------------------------+\n| json_extract(\'{"k1": "v1", "k2": { "k21": 6.6, "k22": [1, 2] } }\', \'$.k1\', \'$.k2.k21\', \'$.k2.k22\', \'$.k2.k22[1]\') |\n+-------------------------------------------------------------------------------------------------------------------+\n| ["v1",6.6,[1,2],2]                                                                                                |\n+-------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql> SELECT json_extract(\'{"id": 123, "name": "doris"}\', \'$.aaa\', \'$.name\');\n+-----------------------------------------------------------------+\n| json_extract(\'{"id": 123, "name": "doris"}\', \'$.aaa\', \'$.name\') |\n+-----------------------------------------------------------------+\n| [null,"doris"]                                                  |\n+-----------------------------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql> SELECT \'{"id": 123, "name": "doris"}\'->\'$.name\';\n+--------------------------------------------------------+\n| json_extract(\'{"id": 123, "name": "doris"}\', \'$.name\') |\n+--------------------------------------------------------+\n| "doris"                                                |\n+--------------------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql> SELECT \'{"k1": "v1", "k2": { "k21": 6.6, "k22": [1, 2, 3] } }\'->\'$.k2.k22[2]\';\n+--------------------------------------------------------------------------------------+\n| json_extract(\'{"k1": "v1", "k2": { "k21": 6.6, "k22": [1, 2, 3] } }\', \'$.k2.k22[2]\') |\n+--------------------------------------------------------------------------------------+\n| 3                                                                                    |\n+--------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n')),(0,r.kt)("h3",{id:"keywords"},"keywords"),(0,r.kt)("p",null,"JSONB, JSON, json_extract, json_extract_isnull, json_extract_bool, json_extract_int, json_extract_bigint, json_extract_largeint,json_extract_double, json_extract_string, json_exists_path, json_type"))}d.isMDXComponent=!0}}]);