"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[44806],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=d(n),u=a,h=s["".concat(p,".").concat(u)]||s[u]||m[u]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},98271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const o={title:"Dev & Debug prepare on Mac",language:"en"},i=void 0,l={unversionedId:"developer-guide/mac-dev/dev-prepare",id:"developer-guide/mac-dev/dev-prepare",title:"Dev & Debug prepare on Mac",description:"\x3c!--",source:"@site/community/developer-guide/mac-dev/dev-prepare.md",sourceDirName:"developer-guide/mac-dev",slug:"/developer-guide/mac-dev/dev-prepare",permalink:"/community/developer-guide/mac-dev/dev-prepare",draft:!1,tags:[],version:"current",frontMatter:{title:"Dev & Debug prepare on Mac",language:"en"},sidebar:"community",previous:{title:"Development and Debugging of Apache Doris BE -- Clion",permalink:"/community/developer-guide/be-clion-dev"},next:{title:"Setting Up Dev Env on Mac for Doris BE - CLion",permalink:"/community/developer-guide/mac-dev/be-clion-dev"}},p={},d=[{value:"Install environment dependency",id:"install-environment-dependency",level:2},{value:"Install thrift",id:"install-thrift",level:2},{value:"pull your own code",id:"pull-your-own-code",level:2},{value:"Download Doris compilation dependencies",id:"download-doris-compilation-dependencies",level:2},{value:"Set <code>file descriptors</code>",id:"set-file-descriptors",level:2},{value:"compile Doris",id:"compile-doris",level:2},{value:"Configure Debug environment",id:"configure-debug-environment",level:2},{value:"Start Debugging with IDE",id:"start-debugging-with-ide",level:2}],c={toc:d},s="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"install-environment-dependency"},"Install environment dependency"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"brew install automake autoconf libtool pkg-config texinfo coreutils gnu-getopt \\\npython@3 cmake ninja ccache bison byacc gettext wget pcre maven llvm@16 openjdk@11 npm\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The version of jdk installed using brew is 11, because on macOS, the arm64 version of brew does not have version 8 of jdk by default")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Dependency description:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Java, Maven, etc. can be downloaded separately for easy management",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Mac recommend ",(0,a.kt)("a",{parentName:"li",href:"https://www.azul.com/downloads/?version=java-8-lts&os=macos&package=jdk#zulu"},"Zulu JDK8")),(0,a.kt)("li",{parentName:"ul"},"Maven Download from ",(0,a.kt)("a",{parentName:"li",href:"https://maven.apache.org/download.cgi"},"Maven website")," is ok",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"  - Self-downloaded Java and Maven need to configure environment variables\n"))))),(0,a.kt)("li",{parentName:"ol"},"Other dependent environment variables (example for Apple Silicon Macs)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"llvm: ",(0,a.kt)("inlineCode",{parentName:"li"},'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"')),(0,a.kt)("li",{parentName:"ul"},"bison: ",(0,a.kt)("inlineCode",{parentName:"li"},'export PATH = "/opt/homebrew/opt/bison/bin:$PATH')),(0,a.kt)("li",{parentName:"ul"},"texinfo: ",(0,a.kt)("inlineCode",{parentName:"li"},'export PATH = "/opt/homebrew/opt/texinfo/bin:$PATH')),(0,a.kt)("li",{parentName:"ul"},"python: ",(0,a.kt)("inlineCode",{parentName:"li"},"ln -s -f /opt/homebrew/bin/python3 /opt/homebrew/bin/python"))))),(0,a.kt)("h2",{id:"install-thrift"},"Install thrift"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note\uff1a")," Thrift needs to be installed only when debugging FE only. When debugging BE and FE at the same time, the three-party library of BE contains thrift"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"MacOS: \n    1. Download\uff1a`brew install thrift@0.16.0`\n    2. Create a soft link\uff1a \n        `mkdir -p ./thirdparty/installed/bin`\n        # Apple Silicon CPU macOS\n        `ln -s /opt/homebrew/Cellar/thrift@0.16.0/0.16.0/bin/thrift ./thirdparty/installed/bin/thrift`\n        # Intel CPU macOS\n        `ln -s /usr/local/Cellar/thrift@0.16.0/0.16.0/bin/thrift ./thirdparty/installed/bin/thrift`\n    \nNote\uff1amacOS implement `brew install thrift@0.16.0` it may report an error that the version cannot be found. The solution is as follows, execute in the terminal:\n    1. `brew tap-new $USER/local-tap`\n    2. `brew extract --version='0.16.0' thrift $USER/local-tap`\n    3. `brew install thrift@0.16.0`\nreference link: `https://gist.github.com/tonydeng/02e571f273d6cce4230dc8d5f394493c`\n")),(0,a.kt)("h2",{id:"pull-your-own-code"},"pull your own code"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"pull code"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd ~\nmkdir DorisDev\ncd DorisDev\ngit clone https://github.com/GitHubID/doris.git\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"set environment variables"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"export DORIS_HOME=~/DorisDev/doris\nexport PATH=$DORIS_HOME/bin:$PATH\n")))),(0,a.kt)("h2",{id:"download-doris-compilation-dependencies"},"Download Doris compilation dependencies"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apache/doris-thirdparty/releases/tag/automation"},"Apache Doris Third Party Prebuilt")," page contains the source code of all third-party libraries. You can download ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apache/doris-thirdparty/releases/download/automation/doris-thirdparty-source.tgz"},"doris-thirdparty-source.tgz")," to obtain them.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"You can download the ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"precompiled"))," third party library from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apache/doris-thirdparty/releases/tag/automation"},"Apache Doris Third Party Prebuilt")," page. You may refer to the following commands:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd thirdparty\nrm -rf installed\n\n# Intel chips\ncurl -L https://github.com/apache/doris-thirdparty/releases/download/automation/doris-thirdparty-prebuilt-darwin-x86_64.tar.xz \\\n    -o - | tar -Jxf -\n\n# Apple Silicon chips\ncurl -L https://github.com/apache/doris-thirdparty/releases/download/automation/doris-thirdparty-prebuilt-darwin-arm64.tar.xz \\\n    -o - | tar -Jxf -\n\n# Make sure that protoc and thrift can run successfully.\ncd installed/bin\n\n./protoc --version\n./thrift --version\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"When running ",(0,a.kt)("inlineCode",{parentName:"p"},"protoc")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"thrift"),", you may meet an error which says ",(0,a.kt)("strong",{parentName:"p"},"the app can not be opened because the developer cannot be verified"),". Go to ",(0,a.kt)("inlineCode",{parentName:"p"},"Security & Privacy"),". Click the ",(0,a.kt)("inlineCode",{parentName:"p"},"Open Anyway")," button in the ",(0,a.kt)("inlineCode",{parentName:"p"},"General")," pane to confirm your intent to open the app. See ",(0,a.kt)("a",{parentName:"p",href:"https://support.apple.com/en-us/HT202491"},"https://support.apple.com/en-us/HT202491"),"."))),(0,a.kt)("h2",{id:"set-file-descriptors"},"Set ",(0,a.kt)("inlineCode",{parentName:"h2"},"file descriptors")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# bash\necho 'ulimit -n 65536' >>~/.bashrc\n    \n# zsh\necho 'ulimit -n 65536' >>~/.zshrc\n")),(0,a.kt)("h2",{id:"compile-doris"},"compile Doris"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd $DORIS_HOME\nsh build.sh\n")),(0,a.kt)("h2",{id:"configure-debug-environment"},"Configure Debug environment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# cp out the compiled package\n    \ncp -r output ../doris-run\n    \n# Configure FE/BE's conf\n1\u3001IP\u3001directory\n2\u3001BE additional configuration min_file_descriptor_number = 10000\n")),(0,a.kt)("h2",{id:"start-debugging-with-ide"},"Start Debugging with IDE"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/community/developer-guide/mac-dev/be-clion-dev"},"CLion Debug BE On Mac")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/community/developer-guide/mac-dev/fe-idea-dev"},"IntelliJ IDEA Debug FE On Mac")))}m.isMDXComponent=!0}}]);