<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://doris.apache.org/zh-CN/blog</id>
    <title>Apache Doris Blog</title>
    <updated>2023-07-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://doris.apache.org/zh-CN/blog"/>
    <subtitle>Apache Doris Blog</subtitle>
    <icon>https://doris.apache.org/zh-CN/images/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[查询提速 20 倍，Apache Doris 在 Moka BI  SaaS 服务场景下的应用实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Moka</id>
        <link href="https://doris.apache.org/zh-CN/blog/Moka"/>
        <updated>2023-07-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读：</strong> MOKA 主要有两大业务线 MOKA 招聘（智能化招聘管理系统）和 MOKA People（智能化人力资源管理系统），MOKA BI 通过全方位数据统计和可灵活配置的实时报表，赋能于智能化招聘管理系统和人力资源管理系统。为了提供更完备的数据支持，助力企业提升招聘竞争力，MOKA 引入性能强悍的 <a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">Apache Doris</a> 对早期架构进行升级转型，成就了 Moka BI 强大的性能与优秀的用户体验。</p><p>作者<strong>｜</strong>Moka 数据架构师 张宝铭</p><h1>业务需求</h1><p>MOKA 主要有两大业务线 MOKA 招聘（智能化招聘管理系统）和 MOKA People（智能化人力资源管理系统）。</p><ul><li>MOKA 招聘系统覆盖社招、校招、内推、猎头管理等场景，让 HR 获得更高效的招聘体验，更便捷的协作体验，让管理者获得招聘数据洞见，让招聘降本增效的同时，树立企业在候选人心目中的专业形象。</li><li>MOKA People 覆盖企业所需要的组织人事、假期考勤、薪酬、绩效、审批等高频业务场景，打通从招聘到人力资源管理的全流程，为 HR 工作提效赋能。通过多维度数据洞见，助力管理者高效科学决策。全生态对接，更加注重全员体验，是一款工作体验更愉悦的人力资源管理系统。</li></ul><p>而 MOKA BI 通过全方位数据统计和可灵活配置的实时报表，赋能于智能化招聘管理系统和人力资源管理系统。通过 PC 端和移动端的多样化报表展示，为企业改善招聘业务提供数据支持，全面提升招聘竞争力，从而助力科学决策。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca6bfd5e11ea4e9a92d6012601ee549c~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h1>MOKA BI 早期架构</h1><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9785a9867a3432786ffe0a866c940e7~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Moka BI 数仓早期架构是类 Lambda 架构，实时处理和离线处理并存。</p><ul><li>实时部分数据主要来源为结构化的数据，Canal 采集 MySQL 或 DBLE（基于 MySQL 的分布式中间件）的 Binlog 输出至 Kafka 中；未建模的数据按照公司分库，存储在业务 DBLE 中，通过 Flink 进行实时建模，将计算后的数据实时写入业务 DBLE 库，通过 DBLE 提供报表查询能力，支持数据大屏和实时报表统计。</li><li>离线部分涵盖了实时部分数据，其结构化数据来源于 DBLE 的 Binlog，明细数据在 Hbase 中实时更新，并映射成 Hive 表，非结构化数据通过 ETL 流程，存储至 Hive 中，通过 Spark 进行进行离线部分建模计算，离线数仓 ADS 层数据输出至 MySQL 和 Redis 支持离线报表统计，明细数据又为指标预测和搜索等外部应用提供数据支持。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="现状与问题"><strong>现状与问题</strong><a href="#现状与问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在早期数仓架构中，为了实现实时建模以及实时报表查询功能，就必须要求底层数据库能够承载业务数据的频繁插入、更新及删除操作，并要求支持标准 SQL，因此当时我们选择 DBLE 作为数据存储、建模、查询的底层库。早期 Moka BI 灰度期用户较少，业务数据量以及报表的使用量都比较低，DBLE 尚能满足业务需求，但随着 Moka BI 逐渐面向所有用户开放，DBLE 逐渐无法适应 BI 报表的查询分析性能要求，同时实时与离线架构分离、存储成本高且数据不易维护，亟需进行升级转型。</p><h1>技术选型</h1><p>为匹配业务飞速增长的要求、满足更复杂的查询需求，我们决定引入一款性能突出的 OLAP 引擎对 Moka BI 进行升级改造。同时出于多样化分析场景的考虑，我们希望其能够支撑更广泛的应用场景。调研的主要方向包括 报表的实时查询能力、数据的更新能力、标准的查询 SQL 以及数据库的可维护性、扩展性、稳定性等。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7690c66e83594d178ba224b924d1cddf~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>确定调研方向后，我们首先对 Greenplum 展开了调研，其特点主要是数据加载和批量 DML 处理快，但受限于主从双层架构设计、存在性能瓶颈，且并发能力很有限、性能随着并发量增加而快速下降，同时其使用的是 PG 语法、不支持 MySQL 语法，在进行引擎切换时成本较高，因此在基本功能调研结束后便不再考虑使用。</p><p>随后我们对 ClickHouse 进行了调研，ClickHouse 在单表查询场景下性能表现非常优异的，但是在多表 Join 场景中性能表现不尽如人意，另外 ClickHouse 缺少数据实时更新和删除的能力，仅适用于批量删除或修改数据，同时 ClickHouse 对 SQL 的支持也比较有限，使用起来需要一定的学习成本。</p><p>紧接着我们对近几年势如破竹的 Apache Doris 进行了调研，在调研中发现，Doris 支持实时导入，同时也支持数据的实时更新与删除，可以实现 Exactly-Once 语义；其次，在实时查询方面，Doris 可以实现秒级查询，且在多表 Join 能力的支持上更加强劲；除此之外，Doris 简单易用，部署只需两个进程，不依赖其他系统，兼容 MySQL 协议，并且使用标准 SQL ，可快速上手，部署及学习成本投入均比较低。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="benchmark"><strong>Benchmark</strong><a href="#benchmark" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在初步调研的基础之上，我们进一步将 Apache Doris 、Clickhouse 与当下使用的 DBLE 在查询性能上进行了多轮测试对比，查询耗时如下：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3c3bf23f8874ae4af1a9fea364bc06a~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><ul><li><strong>多表 Join</strong>：随着 SQL Join 数量的增多，Doris 和 ClickHouse 性能表现差距越来越大，Doris 的查询延迟相对比较稳定，最长耗时仅为 3.2s；而 ClickHouse 的查询延迟呈现指数增长，最长耗时甚至达到 17.8s，二者性能最高相差 5 倍，DBLE 的查询性能则远不如这两款产品。</li><li><strong>慢查询：</strong> 在线上慢查询 SQL 的对比测试中，Doris 的性能同样非常稳定，不同的 SQL 查询基本都能在 1s 内返回查询结果，ClickHouse 与之对比查询延迟波动较大、性能表现很不稳定，二者相同 SQL 性能差距最大超过 10 余倍。</li></ul><p><strong>通过以上调研对比，可以看出 Apache Doris 不管是在基本功能上、还是查询性能上表现都更胜一筹，因此我们将目标锁定了 Doris，并决定尽快引入 Apache Doris 作为 Moka</strong> <strong>BI</strong> <strong>新一代</strong> <strong>数仓</strong> <strong>架构的查询引擎。</strong></p><h1>新版架构</h1><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20a0be39810942a78bb1d66018744c84~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>在引入 Doris 之后，Moka BI 数仓架构的主要变化是将 OLAP 和 OLTP 进行分离，即使用 DBLE 支持数据的实时建模，数据来源于 Moka 系统的业务数据，包含了结构化和半结构化的数据，通过 Flink 读取 DBLE Binlog，完成数据去重、合并后写入 Kafka，Doris 通过 Routine Load 读取 Kafka 完成数据写入，此时 DBLE 仅作为数据建模合成使用，由 Doris 提供报表查询能力。</p><p>基于 Doris 列存储、高并发、高性能等特性，Moka BI 报表采用自助方式构建完成，支撑客户根据需求灵活配置行、列、筛选的场景。与传统报表按需求定制开发方式对比，这种自助式报表构建非常灵活，平台开发与需求开发完全独立，需求完成速度得到极大的提升。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5de38af04e544c0ca59e43dfe9c7f015~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>数据导入方面，数据通过 Routine Load 定期批量导入到 Doris 数据仓库中，保证了数据的准实时同步。通过对系统数据收集与建模，及时向客户提供最新的业务数据，以帮助客户快速了解招聘情况，并做出有效的调整。</p><p>数据更新方面，Doris 在大数据量（单表几十亿）的场景下，表现出了突出的数据更新和删除能力，Moka BI 读取的是业务库的 Binlog 数据，其中有大量的更新以及删除操作，Doris 可以通过 Routine Load 的 Delete 配置实现实时删除，根据 Key 实现幂等性写入，配合 Flink 可以做到真正的 Exactly-Once。在架构中增加了 Routine Load 后，数仓可以实现 1 分钟级别的准实时 <strong>，</strong> 同时结合 Routine load + Kafka 可以实现流量的削峰，保证集群稳定，并且可以通过重置 Kafka 偏移量来实现间数据重写，通过 Kafka 实现多点消费等。</p><p>数据查询方面，充分利用 Doris 的多表 Join 能力，使得系统能够实现实时查询。我们将不同的数据表按照关联字段进行连接，形成一个完整的数据集，基于数据集可进行各种数据分析和可视化操作，同时可高效应对任意条件组合的查询场景以及需要灵活定制需求的查询分析场景，<strong>在某些报表中，需要 Join 的表可能达到几十张，Doris 强大的 Join 性能，使 Moka</strong> <strong>BI</strong> <strong>的报表查询可以达到秒级响应。</strong></p><p>运维管理方面，Doris 部署运维简单方便，不依赖第三方组件，无损弹性扩缩容，自动数据均衡，集群高可用。Doris 集群仅有 FE 和 BE 两个组件，不依赖 Zookeeper 等组件即可实现高可用，部署、运维方便，相比传统的 Hadoop 组件，非常友好，支持弹性扩容，只需简单配置即可实现无损扩容，并且可以自动负载数据到扩容的节点，大大降低了我们引入新技术栈的难度和运维压力。</p><h1>调优实践</h1><p>新架构实际的落地使用中，我们总结了一些调优的经验，在此分享给大家。</p><p>在 Moka BI 报表查询权限场景中，同样配置的报表，<strong>有权限认证</strong>时查询速度比<strong>没有权限认证</strong>时慢 30% 左右，甚至出现查询超时，而<strong>超管权限</strong>查询时则正常，这一现象在数据量较大的客户报表中尤为明显。</p><p>人力资源管理业务的数据权限有着极为严格和精细的管控需求，除了 SaaS 业务自身对于不同租户间的数据隔离要求外，还需要针对业务人员的身份角色、管理部门范畴以及被管理人员的信息敏感程度对可见数据的范围进行进一步细分，因此在 Moka BI 权限功能模块的设计之时就考虑并实现了极为灵活的自定义配置化方案。例如 HRBP 与 PayRoll、HRIS 等角色的可见字段不同、不同职级或部门但角色一致用户的可见数据区间不同，同时针对部分敏感的人员信息还需要做数据过滤，或者出于管理授权的需求临时开通某一权限，甚至以上权限要求还会进行多重的交叉组合，以保证每一用户可查看的数据、报表、信息均被限制在权限范围以内。</p><p>因此当用户需要对数据报表进行查询时，会先在 Moka BI 的权限管理模块进行多重验证，验证信息会通过<code> in </code>的方式拼接在查询 SQL 中并传递给 OLAP 系统。随着客户业务体量的增大，对于权限管控的要求越精细、最终所产生的 SQL 就越复杂，部分业务规模比较大的客户报表会出现上千甚至更多的权限限制，因此造成 OLAP 系统的 id 过滤时间变长，导致报表查询延迟增加，给大客户造成了体验不佳。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c1e3f9eb7674afab066f166a4142ce0~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>解决方案：</strong></p><p>为适配该业务场景，我们通过查看官方的文档发现 Doris Bloom Filter 索引的特性可以很好的解决该问题</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/550798e56e704e3e9dd927e0f9847e44~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Doris BloomFilter 索引使用场景：</p><ul><li>BloomFilter 适用于非前缀过滤。</li><li>查询会根据该列高频过滤，而且查询条件大多是<code> in </code>和<code> = </code>过滤。</li><li>不同于 Bitmap，BloomFilter 适用于高基数列，比如 UserID。因为如果创建在低基数的列上，比如 “性别” 列，则每个 Block 几乎都会包含所有取值，导致 BloomFilter 索引失去意义。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0568e0172e3f46ea9c251cade3093063~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>经过验证，可以通过上方对比报表看到，<strong>将相关 ID 字段增加 BloomFilter 索引后</strong> <strong>，权限验证场景查询速度提升约 30% ，有权限验证的报表超时的问题也得到了改善。</strong></p><h1>收益与总结</h1><p><strong>目前 Moka</strong> <strong>BI</strong> <strong>Doris 有两个集群，</strong> <strong>共 40 台服务器，</strong> <strong>数仓</strong> <strong>共维护了 400 多张表</strong> <strong>，其中 50 多张表数据量超过 1 亿，总数据量为 T</strong> <strong>B</strong> <strong>级别。</strong></p><p>引入 Apache Doris 改造了新的数据仓库之后，满足了日益增长的分析需求以及对数据实时性的要求，总体收益包含以下几点：</p><ol><li><strong>高性能数据查询：</strong> Doris 基于列存储技术，能够快速处理大量的数据，并支持高并发的在线查询，解决了关系型数据库无法支持的复杂查询问题，复杂 SQL 查询的速度上升了一个数据量级。</li><li><strong>数据仓库</strong> <strong>的可扩展性：</strong> Doris 采用分布式集群架构，可以通过增加节点来线性提升存储和查询瓶颈，打破了关系型数据库数据单点限制问题，查询性能得以显著提升。</li><li><strong>更广泛的应用：</strong> 基于 Doris 构建了统一的数据查询平台，应用不再局限于报表服务，对于离线的查询也有很好的支撑，可以说 Doris 的引入是构建数仓一体化的前奏。</li><li><strong>实现自助式分析：</strong> 基于 Doris 强大的查询能力，我们引入了全新的报表构建方式，通过用户自助构建报表方式，能够快速满足用户的各种灵活需求。</li></ol><p>在使用 Doris 的两年多时间里，Moka BI 与 Apache Doris 共同成长、共同进步，可以说 Doris 成就了 Moka BI 强大的性能与优秀的用户体验；也正是 Moka BI 特殊的使用场景，也丰富了 Doris 的优化方向，我们提的很多 Issue 与建议，经过版本更新迭代后使其更具竞争力。在未来的时间里，Moka BI 也会紧跟社区脚步，不断优化、回馈社区，希望 <a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">Apache Doris</a> 和 <a href="https://cn.selectdb.com/" target="_blank" rel="noopener noreferrer">SelectDB</a> 发展越来越好、越来越强大。</p>]]></content>
        <author>
            <name>张宝铭</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[秒级数据写入，毫秒查询响应，天眼查基于 Apache Doris 构建统一实时数仓]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Tianyancha</id>
        <link href="https://doris.apache.org/zh-CN/blog/Tianyancha"/>
        <updated>2023-07-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读：</strong> 随着天眼查近年来对产品的持续深耕和迭代，用户数量也在不断攀升，业务的突破更加依赖于数据赋能，精细化的用户/客户运营也成为提升体验、促进消费的重要动力。在这样的背景下正式引入 Apache Doris 对数仓架构进行升级改造，实现了数据门户的统一，大大缩短了数据处理链路，数据导入速率提升 75 %，500 万及以下人群圈选可以实现毫秒级响应，收获了公司内部数据部门、业务方的一致好评。</p><p><strong>作者：</strong> 王涛，天眼查实时计算负责人</p><h1>业务需求</h1><p>天眼查的数据仓库主要服务于三个业务场景，每个场景都有其特点和需求，具体如下：</p><ol><li><strong>亿级用户人群圈选：</strong> 人群圈选场景中目前有 100+ 人群包，我们需要根据 SQL 条件圈选人群包，来支持人群包的交并差、人群包实时圈选和人群包更新通知下游等需求。例如：圈选出下单未支付超过 5 分钟的用户，我们通过用户标签可以直观掌握用户支付状态，为运营 &amp; 营销团队提供更精细化的人群管理服务，从而提高转化率。</li><li><strong>多元活动支撑的精准营销：</strong> 该场景目前支持了 1000 多个指标，可支持即席查询，根据活动效果及时调整运营策略。例如在“开工季”活动中，需要为数据分析 &amp; 运营团队提供数据支持，从而生成可视化的活动驾驶舱。</li><li><strong>高并发的 C 端分析数据：</strong> 该场景承载了 3 亿+实体（多种维度）的数据体量，同时要求实时更新，以供用户进行数据分析。</li></ol><h1>原有架构及痛点</h1><p>为满足各业务场景提出的需求，我们开始搭建第一代数据仓库，即原有数仓：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d532df25bc948cb847107a149b9079f~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>在原有数仓架构中， Hive 作为数据计算层，MySQL、ES、PG 作为数据存储层，我们简单介绍一下架构的运行原理：</p><ul><li><strong>数据源层和数据接入层：</strong> MySQL 通过 Canal 将 BinLog 接入 Kafka、埋点日志通过 Flume 接入 Kafka，最后由 DataX 把 Kafka 中的数据接入数据计算层 Hive 中；</li><li><strong>数据计算层：</strong> 该层使用 Hive 中的传统的数仓模型，并利用海豚调度使数据通过 ODS -&gt; DWD -&gt; DWS 分层，最后通过 DataX 将 T+1 把数据导入到数据存储层的 MySQL 和 ES 中。</li><li><strong>数据存储层：</strong> MySQL 主要为 DataBank、Tableau、C 端提供分析数据，ES 用于存储用户画像数据，PG 用于人群包的存储（PG 安装的插件具有 Bitmap 交并差功能），ES、PG 两者均服务于 DMP人群圈选系统。</li></ul><p><strong>问题与挑战：</strong></p><p>依托于原有架构的投入使用，初步解决了业务方的需求，但随着天眼查近年来对产品的持续深耕和迭代，用户数量也在不断攀升，业务的突破更加依赖于数据赋能。精细化的用户/客户运营也成为提升体验、促进消费的重要动力。在这样的背景下，原有架构的缺点逐渐暴露：</p><ol><li>开发流程冗长：体现在数据处理链路上，比如当面对一个简单的开发需求，需要先拉取数据，再经过 Hive 计算，然后通过 T+1更新导入数据等，数据处理链路较长且复杂，非常影响开发效率。</li><li>不支持即席查询：体现在报表服务和人群圈选场景中，所用的指标无法根据条件直接查询，必须提前进行定义和开发。</li><li>T+1 更新延迟高：T+1 数据时效性已经无法提供精确的线索，主要体现在报表和人群圈选场景上。</li><li>运维难度高：原有架构具有多条数据处理链路、多组件耦合的特点，运维和管理难度都很高。</li></ol><h1>理想架构</h1><p>基于以上问题，我们决定对架构进行升级改进，在正式升级之前，我们希望未来的架构可以做到以下几点：</p><ul><li>原架构涉及 MySQL 、PG、ES 等多个组件，并为不同应用提供服务；我们希望未来的架构可以兼容 MySQL 协议，实现低成本替换、无缝衔接以上组件。</li><li>支持即席查询且性能优异，即席查询能够给业务方提供更灵活的表达方式，业务方可以从多个角度、多个维度对数据进行查询和分析，更好地发现数据的规律和趋势，帮助业务方更精准备地做出决策。</li><li>支持实时聚合，以减轻开发负担并保证计算结果的准确性。</li><li>统一数据出口，原架构中数据出口不唯一，我们希望未来的架构能更统一数据出口，缩短链路维护成本，提升数据的可复用性。</li><li>支持高并发， C 端的实时分析数据需要较高的并发能力，我们希望未来的架构可以高并发性能优异。</li></ul><h1>技术选型</h1><p>考虑到和需求的匹配度，我们重点对 OLAP 引擎进行了调研，并快速定位到 ClickHouse 和 <a href="https://doris.apache.org/zh-CN/" target="_blank" rel="noopener noreferrer">Apache Doris</a> 这两款产品，在深入调研中发现 Doris 在以下几个方面优势明显，更符合我们的诉求：</p><ul><li>标准 SQL：ClickHouse 对标准 SQL 支持有限，使用中需要对多表 Join 语法进行改写；而 Doris 兼容 MySQL 协议，支持标准 SQL ，可以直接运行，同时 Doris 的 Join 性能远优于 ClickHouse。</li><li>降本增效：Doris 部署简单，只有 FE 和 BE 两个组件，不依赖其他系统；生态内导数功能较为完备，可针对数据源/数据格式选择导入方式；还可以直接使用命令行操作弹性伸缩，无需额外投入人力；运维简单，问题排查难度低。相比之下，ClickHouse 需要投入较多的开发人力来实现类似的功能，使用难度高；同时 ClickHouse 运维难度很高，需要研发一个运维系统来支持处理大部分的日常运维工作。</li><li>并发能力：ClickHouse 的并发能力较弱是一个潜在风险，而 Doris 并发能力更占优势，并且刚刚发布的 2.0 版本支持了<a href="https://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==&amp;mid=2247516978&amp;idx=1&amp;sn=eb3f1f74eedd2306ca0180b8076fe773&amp;chksm=cf2f8d35f85804238fd680c18b7ab2bc4c53d62adfa271cb31811bd6139404cc8d2222b9d561&amp;token=699376670&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">更高并发的点查</a>。</li><li>导入事务：ClickHouse 的数据导入没有事务支持，无法实现 Exactly Once 语义，如导数失败需要删除重导，流程比较复杂；而 Doris 导入数据支持事务，可以保证一批次内的数据原子生效，不会出现部分数据写入的情况，降低了判断的成本。</li><li>丰富的使用场景：ClickHouse 支持场景单一，Doris 支持场景更加丰富，用户基于 Doris 可以构建用户行为分析、AB 实验平台、日志检索分析、用户画像分析、订单分析等应用。</li><li>丰富的数据模型：Doris 提供了Unique、Duplicate、Aggregate 三种数据模型，可以针对不同场景灵活应用不同的数据模型。</li><li>社区响应速度快：Doris 社区的响应速度是其独有特色，SelectDB 为社区组建了一直完备的社区支持团队，社区的快速响应让我们少走了很多歪路，帮助我们解决了许多问题。</li></ul><h1>新数仓架构</h1><p>经过对 Doris 进行综合评估，我们最终决定采用 Doris 对原有架构进行升级优化，并在架构层级进行了压缩。新的架构图如下所示：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c053e0f2491c44c5a2ef253f7496f449~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>在新架构中，数据源层和数据接入层与原有架构保持一致，<strong>主要变化是将 Doris 作为新架构的数据服务层，统一了原有架构中的数据计算层和存储层，这样实现了数据门户的统一，大大缩短了数据处理链路，解决了开发流程冗长的问题。</strong> 同时，基于 Doris 的高性能，实现了即席查询能力，提高了数据查询效率。另外，Flink 与 Doris 的结合实现了实时数据快速写入，解决了 T+1 数据更新延迟较高的问题。除此之外，借助于 Doris 精简的架构，大幅降低了架构维护的难度。</p><p><strong>数据流图</strong></p><p>缩短数据处理链路直接或间接地带来了许多收益。接下来，我们将具体介绍引入 Doris 后的数据流图。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/090c5467c81e43a0b68da227cab59dad~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>总体而言，数据源由 MySQL 和日志文件组成，数据在 Kafka 中进行分层操作（ODS、DWD、DWS），Apache Doris 作为数据终点统一进行存储和计算。应用层包含 C 端、Tableau 和 DMP 系统，通过网关服务从 Doris 中获取相应的数据。</p><p>具体来看，MySQL 通过 Canal 把 Binlog 接入 Kafka，日志文件通过 Flume 接入 Kafka 作为 ODS 层。然后经过 Flink SQL 进行清洗、关联维表，形成 DWD 层的宽表，并生成聚合表。为了节省空间，我们将 ODS 层存储在 Kafka 中，DWD 层和 DWS 层主要与 Doris 进行交互。DWD 层的数据一般通过 Flink SQL 写入 Doris。针对不同的场景，我们应用了不同的数据模型进行数据导入。MySQL 数据使用 Unique 模型，日志数据使用 Duplicate 模型，DWS 层采用 Aggregate 模型，可进行实时聚合，从而减少开发成本。</p><h1>应用场景优化</h1><p>在应用新的架构之后，我们必须对业务场景的数据处理流程进行优化以匹配新架构，从而达到最佳应用效果。接下来我们以人群圈选、C端分析数据及精准营销线索为主要场景，分享相关场景流程优化的实践与经验。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="人群圈选">人群圈选<a href="#人群圈选" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7dd9fa07aa24b9f8368afa24efcd736~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p><strong>原流程（左）中</strong>，业务人员在画像平台页面上利用表的元数据创建人群圈选任务，任务创建后进行人群 ID 分配，写入到 PG 画像表和 MySQL 任务表中。接着根据任务条件定时在 ES 中查询结果，获取结果后更新任务表的状态，并把 Bitmap 人群包写入 PG。利用 PG 插件提供的 Bitmap 交并差能力操作人群包，最后下游运营介质从 PG 取相应人群包。</p><p>然而，该流程处理方式非常复杂，ES 和 PG 中的表无法复用，造成成本高、效益低。同时，原流程中的数据为 T+1 更新，标签必须提前进行定义及计算，这非常影响查询效率。</p><p><strong>现流程（右）中</strong>，业务人员在画像平台创建人群圈选任务，后台分配人群 ID，并将其写入 MySQL 任务表中。首次圈选时，根据任务条件在 Doris 中进行即席查询，获取结果后对任务表状态进行更新，并将人群包写入 Doris。后续根据时间进行微批轮询，利用 Doris Bitmap 函数提供的交并差功能与上一次的人群包做差集，如果有人群包更新会主动通知下游。</p><p>引入 Doris 后，原有流程的问题得到了解决，新流程以 Doris 为核心构建了人群圈选服务，支持人群包实时更新，新标签无需提前定义，可通过条件配置自助生成，减少了开发时间。新流程表达方式更加灵活，为人群包 AB 实验提供了便捷的条件。流程中采用 Doris 统一了明细数据和人群包的存储介质，实现业务聚焦，无需处理多组件数据之间的读写问题，达到了降本增效的终极目标。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="c端分析数据及精准营销线索场景">C端分析数据及精准营销线索场景<a href="#c端分析数据及精准营销线索场景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d94e74cae5748f7944a61b4f6d85a53~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p><strong>原流程：</strong> 在原流程中，如果业务提出新需求，需要先发起需求变更，再经过评审、排期开发，然后开始对 Hive 中的数据模型进行开发并进行测试，测试完成后进行数仓上线，配置 T+1 调度任务写入 MySQL，最后 C端和精准营销系统对 MySQL 数据进行读取。原流程链路复杂，主要体现在流程长、成本高、上线周期长。</p><p><strong>现流程：</strong> 当前明细数据已经在 Doris 上线，当业务方发起需求变更时，只需要拉取元数据管理平台元数据信息，配置查询条件，审批完成后即可上线，上线 SQL 可直接在 Doris 中进行即席查询。相比原流程，现在的流程大幅缩短了需求变更流程，只需进行低代码配置，成功降低了开发成本，缩短了上线周期。</p><h1>优化经验</h1><p>为了规避风险，许多公司的人群包<code>user_id</code>是随机生成的，这些<code>user_id</code>相差很大且是非连续的。然而，使用非连续的<code>user_id</code>进行人群圈选时，会导致 Bitmap 生成速度较慢。因此，我们生成了映射表，并生成了连续稠密的<code>user_id</code>。当使用连续 <code>user_id</code> 圈选人群时，<strong>速度较之前提升了 70%</strong> 。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fcb33643d97446e997f8e3961f58de9~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>用户 ID 映射表样例数据：从图可知原始用户 ID 由多位数字组合，并且 ID 很稀疏（用户 ID 间相差很大），而连续用户 ID 则 从1开始，且 ID 很稠密。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd03622a2587491993f0d0bf9a50eb07~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p><strong>案例展示：</strong></p><ol><li>用户 ID 映射表：</li></ol><p>用户 ID 映射表将用户 ID 作为唯一键模型，而连续用户 ID 则通过用户 ID 来生成，一般从 1 开始，严格保持单调递增。需要注意的是，因为该表使用频繁，因此将 <code>in_memory</code> 设置为<code>true</code>，直接将其缓存在内存中：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e1b14d76edd4d29b1bb8c3fc31a2ef4~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><ol start="2"><li>人群包表</li></ol><p>人群包表是以用户标签作聚合键的模型，假设以 <code>user_id</code> 大于 0、小于 2000000 作为圈选条件，使用原始 <code>user_id</code> 进行圈选耗费的时间远远远大于连续稠密 <code>user_id</code> 圈选所耗时间。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef541a3299d642d9a9cd2cd7b353880c~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>如下图所示，左侧使用 <code>tyc_user_id</code>圈选生成人群包响应时间：1843ms，右侧使用使<code>tyc_user_id_continuous</code>圈选生成人群包响应时间：543ms。消耗时间大幅缩短</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b309ad36a774c09ae087e372f4605b7~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33672f62dca344dfb49863eb24cccb4a~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><h1>规模与收益：</h1><p>引入 Doris 后，我们已经搭建了 2 个集群，承载的数据规模正随着迁移的推进而持续增大。目前，<strong>我们已经处理的数据总量已经达到了数十TB，单日新增数据量已经达到了 数亿条</strong>，而数据体量还在持续增长中。此外，我们在 Doris 上运行的指标和人群包数量已经超过了 500，分别涵盖了商查、搜索、运营、用户和营收五大类指标。</p><p>Doris 的引入满足了业务上的新需求，解决了原有架构的痛点问题，具体表现为以下几点：</p><ul><li><strong>降本增效：</strong> Doris 统一了数据的门户，实现了存储和计算的统一，提高了数据/表的复用率，降低了资源消耗。同时，新架构优化了数据到 MySQL、ES 的流程，开发效率得到有效提升。</li><li><strong>导入速率提升：</strong> 原有数据流程中，数据处理流程过长，数据的导入速度随着业务体量的增长和数据量的不断上升而急剧下降。引入 Doris 后，我们依赖 Broker Load 优秀的写入能力，使得<strong>导入速率提升了 75%以上</strong>。</li><li><strong>响应速度</strong>：Doris 的使用提高了各业务场景中的查询响应速度。例如，在人群圈选场景中，对于 <strong>500 万及以下的人群包进行圈选时，能够做到毫秒级响应</strong>。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9359e2a027ff47c992c4efc3a96dac94~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><h1>未来规划</h1><p>正如前文所讲，Apache Doris 的引入解决了许多架构及业务上的难题，初见成效，同时也收获了公司内部数据部门、业务方的一致好评，未来我们将继续探索，基于 Doris 展开更深度的应用，不久的将来，我们将重点推进以下几个方面工作：</p><ul><li>离线指标实时化：将更多的指标从离线转为实时，提供更及时的数据服务。</li><li>搭建数据血缘系统：将代码中的血缘关系重新定义为可视，全面构建数据血缘关系，为问题排查、链路报警等提供有效支持。</li><li>探索批流一体路线：从使用者的角度思考设计，实现语义开发层的统一，使数据开发更便捷、更低门槛、更高效率。</li></ul><p>在此特别感谢 <a href="https://cn.selectdb.com/" target="_blank" rel="noopener noreferrer">SelectDB 团队</a>，作为基于 <a href="https://doris.apache.org/zh-CN/" target="_blank" rel="noopener noreferrer">Apache Doris</a> 的商业化公司，为社区投入了大量的研发和用户支持力量，在使用过程中遇到任何问题都能及时响应，为我们降低了许多试错成本。未来，我们也会更积极参与社区贡献及活动中来，与社区共同进步和成长，欢迎大家选择和使用 Doris，相信 Doris 一定不会让你失望。</p>]]></content>
        <author>
            <name>王涛</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 冷热分层技术如何实现存储成本降低 70%？]]></title>
        <id>https://doris.apache.org/zh-CN/blog/HCDS</id>
        <link href="https://doris.apache.org/zh-CN/blog/HCDS"/>
        <updated>2023-06-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>在数据分析的实际场景中，冷热数据往往面临着不同的查询频次及响应速度要求。例如在电商订单场景中，用户经常访问近 6 个月的订单，时间较久远的订单访问次数非常少；在行为分析场景中，需支持近期流量数据的高频查询且时效性要求高，但为了保证历史数据随时可查，往往要求数据保存周期更为久远；在日志分析场景中，历史数据的访问频次很低，但需长时间备份以保证后续的审计和回溯的工作...往往历史数据的应用价值会随着时间推移而降低，且需要应对的查询需求也会随之锐减。而随着历史数据的不断增多，如果我们将所有数据存储在本地，将造成大量的资源浪费。</p><p>为了解决满足以上问题，冷热数据分层技术应运而生，以更好满足企业降本增效的趋势。顾名思义，<strong>冷热分层是将冷热数据分别存储在成本不同的存储介质上</strong>，例如热数据存储在成本更高的 SSD 盘上、以提高时效数据的查询速度和响应能力，而冷数据则存储在相对低成本的 HDD 盘甚至更为廉价的对象存储上，以降低存储成本。我们还可以根据实际业务需求进行灵活的配置和调整，以满足不同场景的要求。</p><p><strong>冷热分层一般适用于以下需求场景：</strong></p><ul><li><p>数据存储周期长：面对历史数据的不断增加，存储成本也随之增加；</p></li><li><p>冷热数据访问频率及性能要求不同：热数据访问频率高且需要快速响应，而冷数据访问频率低且响应速度要求不高；</p></li><li><p>数据备份和恢复成本高：备份和恢复大量数据需要消耗大量的时间和资源。</p></li><li><p>......</p></li></ul><h1>更高存储效率的冷热分层技术</h1><p>自 Apache Doris 0.12 版本引入动态分区功能，开始支持对表分区进行生命周期管理，可以设置热数据转冷时间以及存储介质标识，通过后台任务将热数据从 SSD 自动冷却到 HDD，以帮助用户较大程度地降低存储成本。用户可以在建表属性中配置参数 <code>storage_cooldown_time</code> 或者 <code>dynamic_partition.hot_partition_num</code> 来控制数据从 SSD 冷却到 HDD，当分区满足冷却条件时，Doris 会自动执行任务。而 HDD 上的数据是以多副本的方式存储的，并没有做到最大程度的成本节约，因此对于冷数据存储成本仍然有较大的优化空间。</p><p>为了帮助用户进一步降低存储成本，社区在已有功能上进行了优化，并在 Apache Doris 2.0 版本中推出了<strong>冷热</strong> <strong>数据</strong> <strong>分层的功能</strong>。冷热数据分层功能使 Apache Doris 可以将冷数据下沉到存储成本更加低廉的对象存储中，同时冷数据在对象存储上的保存方式也从多副本变为单副本，存储成本进一步降至原先的三分之一，同时也减少了因存储附加的计算资源成本和网络开销成本。</p><p>如下图所示，在 Apache Doris 2.0 版本中支持三级存储，分别是 SSD、HDD 和对象存储。用户可以配置使数据从 SSD 下沉到 HDD，并使用冷热分层功能将数据从 SSD 或者 HDD 下沉到对象存储中。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/112bd033a42a440d89a55f68213e7b55~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>以公有云价格为例，云磁盘的价格通常是对象存储的 5-10 倍，如果可以将 80% 的冷数据保存到对象存储中，存储成本至少可降低 70%。</p><p>我们使用以下公式计算节约的成本，设冷数据比率为 rate，对象存储价格为 OSS，云磁盘价格为 CloudDisk</p><p>$1 - \frac{rate <em> 100 </em> OSS + (1 - rate) <em> 100 </em> CloudDisk}{100 * CloudDisk}$</p><p>这里我们假设用户有 100TB 的数据，我们按照不同比例将冷数据迁移到对象存储，来计算一下<strong>如果使用冷热分层之后，相较于全量使用普通云盘、SSD 云盘</strong> <strong>可节约</strong> <strong>多少</strong> <strong>成本</strong>。</p><ul><li>阿里云 OSS 标准存储成本是 120 元/ T /月</li><li>阿里云普通云盘的价格是 300 元/ T /月</li><li>阿里云 SSD 云盘的价格是 1000 元/ T /月</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d83666c79424658b4feb400b81e41e6~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>例如在 80% 冷数据占比的情况下，剩余 20% 使用普通云盘每月仅花费 80T<em>120 + 20T <!-- -->*<!-- --> 300 = 15600元，而全量使用普通云盘则需要花费 30000 元，通过冷热数据分层节省了 48% 的存储成本。如果用户使用的是 SSD 云盘，那么花费则会从全量使用需花费的 100000 元降低到 80T</em>120 + 20T <!-- -->*<!-- --> 1000 = 29600元，存储成本最高降低超过 70%！</p><h1>使用指南</h1><p>若要使用 Doris 的冷热分层功能，首先需要准备一个对象存储的 Bucket 并获取对应的 AK/SK。当准备就绪之后，下面为具体的使用步骤：</p><p><strong>1.  创建 Resource</strong></p><p>可以使用对象存储的 Bucket 以及 AK/SK 创建 Resource，目前支持 AWS、Azure、阿里云、华为云、腾讯云、百度云等多个云的对象存储。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE RESOURCE IF NOT EXISTS "${resource_name}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PROPERTIES(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "type"="s3",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.endpoint" = "${S3Endpoint}",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.region" = "${S3Region}",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.root.path" = "path/to/root",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.access_key" = "${S3AK}",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.secret_key" = "${S3SK}",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.connection.maximum" = "50",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.connection.request.timeout" = "3000",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.connection.timeout" = "1000",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "s3.bucket" = "${S3BucketName}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        );</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>2.  创建 Storage Policy</strong></p><p>可以通过 Storage Policy 控制数据冷却时间，目前支持相对和绝对两种冷却时间的设置。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE STORAGE POLICY testPolicy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PROPERTIES(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "storage_resource" = "remote_s3",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "cooldown_ttl" = "1d"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>例如上方代码中名为 <code>testPolicy</code> 的 <code>storage policy </code>设置了新导入的数据将在一天后开始冷却，并且冷却后的冷数据会存放到 <code>remote_s3 </code>所表示的对象存储的 <code>root path</code> 下。除了设置 TTL 以外，在 Policy 中也支持设置冷却的时间点，可以直接设置为：</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> STORAGE POLICY testPolicyForTTlDatatime</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PROPERTIES</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"storage_resource"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"remote_s3"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string" style="color:#e3116c">"cooldown_datetime"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2023-06-07 21:00:00"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>3.  给表或者分区设置 Storage Policy</strong></p><p>在创建出对应的 Resource 和 Storage Policy 之后，我们可以在建表的时候对整张表设置 Cooldown Policy，也可以针对某个 Partition 设置 Cooldown Policy。这里以 TPCH 测试数据集中的 lineitem 表举例。如果需要将整张表都设置冷却的策略，则可以直接在整张表的 properties 中设置：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE IF NOT EXISTS lineitem1 (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_ORDERKEY    INTEGER NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_PARTKEY     INTEGER NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_SUPPKEY     INTEGER NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_LINENUMBER  INTEGER NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_QUANTITY    DECIMAL(15,2) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_DISCOUNT    DECIMAL(15,2) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_TAX         DECIMAL(15,2) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_RETURNFLAG  CHAR(1) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_LINESTATUS  CHAR(1) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_SHIPDATE    DATEV2 NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_COMMITDATE  DATEV2 NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_RECEIPTDATE DATEV2 NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_SHIPINSTRUCT CHAR(25) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_SHIPMODE     CHAR(10) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_COMMENT      VARCHAR(44) NOT NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            DUPLICATE KEY(L_ORDERKEY, L_PARTKEY, L_SUPPKEY, L_LINENUMBER)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            PARTITION BY RANGE(`L_SHIPDATE`)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                PARTITION `p202301` VALUES LESS THAN ("2017-02-01"),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                PARTITION `p202302` VALUES LESS THAN ("2017-03-01")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            DISTRIBUTED BY HASH(L_ORDERKEY) BUCKETS 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            PROPERTIES (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "replication_num" = "3",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "storage_policy" = "${policy_name}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            )</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>用户可以通过 show tablets 获得每个 Tablet 的信息，其中 CooldownReplicaId 不为 -1 并且 CooldownMetaId 不为空的 Tablet 说明使用了 Storage Policy。如下方代码，通过 show tablets 可以看到上面的 Table 的所有 Tablet 都设置了 CooldownReplicaId 和 CooldownMetaId，这说明整张表都是使用了 Storage Policy。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">               TabletId: 3674797</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ReplicaId: 3674799</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              BackendId: 10162</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             SchemaHash: 513232100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Version: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      LstSuccessVersion: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       LstFailedVersion: -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          LstFailedTime: NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          LocalDataSize: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         RemoteDataSize: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               RowCount: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  State: NORMAL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LstConsistencyCheckTime: NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           CheckVersion: -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           VersionCount: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              QueryHits: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               PathHash: 8030511811695924097</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                MetaUrl: http://172.16.0.16:6781/api/meta/header/3674797</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       CompactionStatus: http://172.16.0.16:6781/api/compaction/show?tablet_id=3674797</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      CooldownReplicaId: 3674799</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         CooldownMetaId: TUniqueId(hi:-8987737979209762207, lo:-2847426088899160152)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们也可以对某个具体的 Partition 设置 Storage Policy，只需要在 Partition 的 Properties 中加上具体的 Policy Name 即可：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE IF NOT EXISTS lineitem1 (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_ORDERKEY    INTEGER NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_PARTKEY     INTEGER NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_SUPPKEY     INTEGER NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_LINENUMBER  INTEGER NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_QUANTITY    DECIMAL(15,2) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_DISCOUNT    DECIMAL(15,2) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_TAX         DECIMAL(15,2) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_RETURNFLAG  CHAR(1) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_LINESTATUS  CHAR(1) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_SHIPDATE    DATEV2 NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_COMMITDATE  DATEV2 NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_RECEIPTDATE DATEV2 NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_SHIPINSTRUCT CHAR(25) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_SHIPMODE     CHAR(10) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            L_COMMENT      VARCHAR(44) NOT NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            DUPLICATE KEY(L_ORDERKEY, L_PARTKEY, L_SUPPKEY, L_LINENUMBER)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            PARTITION BY RANGE(`L_SHIPDATE`)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                PARTITION `p202301` VALUES LESS THAN ("2017-02-01") ("storage_policy" = "${policy_name}"),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                PARTITION `p202302` VALUES LESS THAN ("2017-03-01")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            DISTRIBUTED BY HASH(L_ORDERKEY) BUCKETS 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            PROPERTIES (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "replication_num" = "3"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            )</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这张 Lineitem1 设置了两个分区，每个分区 3 个 Bucket，另外副本数设置为 3，可以计算出一共有 2<em>3 = 6 个 Tablet，那么副本数一共是 6</em>3 = 18 个 Replica，通过 <code>show tablets</code> 命令可以查看到所有的 Tablet 以及 Replica 的信息，可以看到只有部分 Tablet 的 Replica 是设置了CooldownReplicaId 和 CooldownMetaId 。用户可以通过 A<code>DMIN SHOW REPLICA STATUS FROM TABLE PARTITION(PARTITION)`` </code>查看 Partition 下的 Tablet 以及Replica，通过对比可以发现其中只有属于 p202301 这个 Partition 的 Tablet 的 Replica 设置了CooldownReplicaId 和 CooldownMetaId，而属于 p202302 这个 Partition 下的数据没有设置，所以依旧会全部存放到本地磁盘。 以上表的 Tablet 3691990 为例，该 Tablet 属于 p202301，截取 show tablets 拿到的部分关键信息如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">*****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               TabletId: 3691990</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ReplicaId: 3691991</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      CooldownReplicaId: 3691993</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         CooldownMetaId: TUniqueId(hi:-7401335798601697108, lo:3253711199097733258)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               TabletId: 3691990</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ReplicaId: 3691992</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      CooldownReplicaId: 3691993</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         CooldownMetaId: TUniqueId(hi:-7401335798601697108, lo:3253711199097733258)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               TabletId: 3691990</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ReplicaId: 3691993</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      CooldownReplicaId: 3691993</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         CooldownMetaId: TUniqueId(hi:-7401335798601697108, lo:3253711199097733258)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以观察到 3691990 的 3 个副本都选择了 3691993 副本作为 CooldownReplica，在用户指定的 Resource 上也只会保存这个副本的数据。</p><p><strong>4.  查看数据信息</strong></p><p>我们可以按照上述 3 中的 Linetem1 来演示如何查看是使用冷热数据分层策略的 Table 的数据信息，一般可以通过 <code>show tablets from lineitem1 </code>直接查看这张表的 Tablet 信息。Tablet 信息中区分了 LocalDataSize 和 RemoteDataSize，前者表示存储在本地的数据，后者表示已经冷却并移动到对象存储上的数据。具体信息可见下方代码：</p><p>下方为数据刚导入到 BE 时的数据信息，可以看到数据还全部存储在本地。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">*************************** 1. row ***************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               TabletId: 2749703</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ReplicaId: 2749704</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              BackendId: 10090</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             SchemaHash: 1159194262</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Version: 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      LstSuccessVersion: 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       LstFailedVersion: -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          LstFailedTime: NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          LocalDataSize: 73001235</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         RemoteDataSize: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               RowCount: 1996567</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  State: NORMAL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LstConsistencyCheckTime: NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           CheckVersion: -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           VersionCount: 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              QueryHits: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               PathHash: -8567514893400420464</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                MetaUrl: http://172.16.0.8:6781/api/meta/header/2749703</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       CompactionStatus: http://172.16.0.8:6781/api/compaction/show?tablet_id=2749703</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      CooldownReplicaId: 2749704</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         CooldownMetaId:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当数据到达冷却时间后，再次进行 <code>show tablets from table</code> 可以看到对应的数据变化。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">*************************** 1. row ***************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               TabletId: 2749703</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ReplicaId: 2749704</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              BackendId: 10090</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             SchemaHash: 1159194262</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Version: 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      LstSuccessVersion: 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       LstFailedVersion: -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          LstFailedTime: NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          LocalDataSize: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         RemoteDataSize: 73001235</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               RowCount: 1996567</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  State: NORMAL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LstConsistencyCheckTime: NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           CheckVersion: -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           VersionCount: 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              QueryHits: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               PathHash: -8567514893400420464</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                MetaUrl: http://172.16.0.8:6781/api/meta/header/2749703</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       CompactionStatus: http://172.16.0.8:6781/api/compaction/show?tablet_id=2749703</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      CooldownReplicaId: 2749704</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         CooldownMetaId: TUniqueId(hi:-8697097432131255833, lo:9213158865768502666)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>除了通过上述命令查看数据信息之外，我们也可以在对象存储上查看冷数据的信息。以腾讯云为例，可以在 Policy 指定的 Bucket 的 Path 下可以查看冷却过后的数据的信息：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27ff8554c0d544c289f6ed3b0da938ff~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>进入对应文件后可以看到数据和元数据文件</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20b7716062844b84966fbe442ba3a288~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>我们可以看到在对象存储上数据是单副本。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ac8985484b244dc9b9d28b14f3c4bd8~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>5.  查询</strong></p><p>假设 Table Lineitem1 中的所有数据都已经冷却并且上传到对象存储中，如果用户在 Lineitem1 上进行对应的查询，Doris 会根据对应 Partition 使用的 Policy 信息找到对应的 Bucket 的 Root Path，并根据不同 Tablet 下的 Rowset 信息下载查询所需的数据到本地进行运算。</p><p>Doris 2.0 在查询上进行了优化，冷数据第一次查询会进行完整的 S3 网络 IO，并将 Remote Rowset 的数据下载到本地后，存放到对应的 Cache 之中，后续的查询将自动命中 Cache，以此来保证查询效率。(性能对比可见后文评测部分）。</p><p><strong>6.  冷却后继续导入数据</strong></p><p>在某些场景下，用户需要对历史数据进行数据的修正或补充数据，而新数据会按照分区列信息导入到对应的 Partition中。在 Doris 中，每次数据导入都会产生一个新的 Rowset，以保证冷数据的 Rowset 在不会影响新导入数据的 Rowset 的前提下，满足冷热数据同时存储的需求。Doris 2.0 的冷热分层粒度是基于 Rowset 的，当到达冷却时间时会将当前满足条件的 Rowset 全部上传到 S3 上并删除本地数据，之后新导入的数据生成的新 Rowset 会在到达冷却时间后也上传到 S3。</p><h1>查询性能测试</h1><p>为了测试使用冷热分层功能之后，查询对象存储中的数据是否占用会较大网络 I/O，从而影响查询性能，因此我们以 SSB SF100 标准集为例，对冷热分层表和非冷热分层表进行了查询耗时的对比测试。</p><p>配置：均在 3 台 16C 64G 的机器上部署 1FE、3BE 的集群</p><p>暂时无法在飞书文档外展示此内容</p><p>如上图所示，在充分预热之后(数据已经缓存在 Cache 中)，冷热分层表共耗时 5.799s，非冷热分层表共耗时 5.822s，由此可知，使用冷热分层查询表和非冷热分层表的查询性能几乎相同。这表明，使用 Doris 2.0 提供的冷热分层功能，不会对查询性能造成的影响。</p><h1>冷热分层技术的具体实现</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="存储方式的优化"><strong>存储方式的优化</strong><a href="#存储方式的优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在 Doris 之前的版本中，数据从 SSD 冷却到 HDD 后，为了保证数据的高可用和可靠性，通常会将一个 Tablet 存储多份副本在不同 BE 上，为了进一步降低成本，我们在 Apache Doris 2.0 版本引入了对象存储，推出了冷热分层功能。由于对象存储本身具有高可靠高可用性，冷数据在对象存储上只需要一份即可，元数据以及热数据仍然保存在 BE，我们称之为本地副本，本地副本同步冷数据的元数据，这样就可以实现多个本地副本共用一份冷却数据的目的，有效避免冷数据占用过多的存储空间，从而降低数据存储成本。</p><p>具体而言，Doris 的 FE 会从 Tablet 的所有可用本地副本中选择一个本地副本作为上传数据的 Leader，并通过 Doris 的周期汇报机制同步 Leader 的信息给其它本地副本。在 Leader 上传冷却数据时，也会将冷却数据的元数据上传到对象存储，以便其他副本同步元数据。因此，任何本地副本都可以提供查询所需的数据，同时也保证了数据的高可用性和可靠性。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b207a1c45d514a9b8f91a8de5e2dee54~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="冷数据-compaction"><strong>冷数据 Compaction</strong><a href="#冷数据-compaction" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在一些场景下会有大量修补数据的需求，在大量补数据的场景下往往需要删除历史数据，删除可以通过 <code>delete where</code>实现，Doris 在 Compaction 时会对符合删除条件的数据做物理删除。基于这些场景，冷热分层也必须实现对冷数据进行 Compaction，因此在 Doris 2.0 版本中我们支持了对冷却到对象存储的冷数据进行 Compaction（ColdDataCompaction）的能力，用户可以通过冷数据 Compaction，将分散的冷数据重新组织并压缩成更紧凑的格式，从而减少存储空间的占用，提高存储效率。</p><p>Doris 对于本地副本是各自进行 Compaction，在后续版本中会优化为单副本进行 Compaction。由于冷数据只有一份，因此天然的单副本做 Compaction 是最优秀方案，同时也会简化处理数据冲突的操作。BE 后台线程会定期从冷却的 Tablet 按照一定规则选出 N 个 Tablet 发起 ColdDataCompaction。与数据冷却流程类似，只有 CooldownReplica 能执行该 Tablet 的 ColdDataCompaction。Compaction下刷数据时每积累一定大小（默认5MB）的数据，就会上传一个 Part 到对象，而不会占用大量本地存储空间。Compaction 完成后，CooldownReplica 将冷却数据的元数据更新到对象存储，其他 Replica 只需从对象存储同步元数据，从而大量减少对象存储的 IO 和节点自身的 CPU 开销。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="冷数据-cache"><strong>冷数据 Cache</strong><a href="#冷数据-cache" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>冷数据 Cache 在数据查询中具有重要的作用。冷数据通常是数据量较大、使用频率较低的数据，如果每次查询都需要从对象中读取，会导致查询效率低下。通过冷数据 Cache 技术，可以将冷数据缓存在本地磁盘中，提高数据读取速度，从而提高查询效率。而 Cache 的粒度大小直接影响 Cache 的效率，比较大的粒度会导致 Cache 空间以及带宽的浪费，过小粒度的 Cache 会导致对象存储 IO 效率低下，Apache Doris 采用了以 Block 为粒度的 Cache 实现。</p><p>如前文所述，Apache Doris 的冷热分层会将冷数据上传到对象存储上，上传成功后本地的数据将会被删除。因此，后续涉及到冷数据的查询均需要对对象存储发起 IO 。为了优化性能，Apache Doris 实现了基于了 Block 粒度的 Cache 功能，当远程数据被访问时会先将数据按照 Block 的粒度下载到本地的 Block Cache 中存储，且 Block Cache 中的数据访问性能和非冷热分层表的数据性能一致（可见后文查询性能测试）。</p><p>具体来讲，前文提到 Doris 的冷热分层是在 Rowset 级别进行的，当某个 Rowset 在冷却后其所有的数据都会上传到对象存储上。而 Doris 在进行查询的时候会读取涉及到的 Tablet 的 Rowset 进行数据聚合和运算，当读取到冷却的 Rowset 时，会把查询需要的冷数据下载到本地 Block Cache 之中。基于性能考量，Doris 的 Cache 按照 Block 对数据进行划分。Block Cache 本身采用的是简单的 LRU 策略，可以保证越是使用程度较高数据越能在 Block Cache 中存放的久。</p><h1>结束语</h1><p>Apache Doris 2.0 版本实现了基于对象存储的冷热数据分层，该功能可以帮助我们有效降低存储成本、提高存储效率，并提高数据查询和处理效率。未来，Apache Doris 将会基于冷热数据分层以及弹性计算节点，为用户提供更好的资源弹性、更低的使用成本以及更灵活的负载隔离服务。</p><p>在前段时间推出的 <a href="https://github.com/apache/doris/releases/tag/2.0.0-alpha1" target="_blank" rel="noopener noreferrer">Apache Doris 2.0 Alpha 版本</a>中，已经实现了<a href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==%5C&amp;mid=2247516978%5C&amp;idx=1%5C&amp;sn=eb3f1f74eedd2306ca0180b8076fe773%5C&amp;chksm=cf2f8d35f85804238fd680c18b7ab2bc4c53d62adfa271cb31811bd6139404cc8d2222b9d561%5C&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">单节点数万 QPS 的高并发点查询能力</a>、<a href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==%5C&amp;mid=2247519079%5C&amp;idx=1%5C&amp;sn=a232a72695ff93eea0ffe79635936dcb%5C&amp;chksm=cf2f8560f8580c768bbde99ef8ca97d3a42ecc03b5d8d106b85f5474c90b6068781a79b3611e%5C&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">高性能的倒排索引</a>、<a href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==%5C&amp;mid=2247520488%5C&amp;idx=1%5C&amp;sn=bba80bdbf939e7ab63bf08379eabf99b%5C&amp;chksm=cf2f9eeff85817f9e8e93e7fc886993f1c81e8415ec3133a8dd8eeb6f3ce119b7fda101c498a%5C&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">高效稳定的内存管理</a>、基于代价模型的全新查询优化器以及 Pipeline 执行引擎等，欢迎大家下载体验。与此同时， Apache Doris 2.0 Beta 版本也将于近两周上线。除了已知功能外，还会进一步支持 Unique 模型上的部分列更新，并将 Pipeline 执行引擎、查询优化器、主键模型 Merge-on-Write 等最新特性作为稳定功能默认开启，并包含了社区近期对性能方面的诸多优化，详细性能测试结果敬请期待后续社区动态。</p><p>为了让用户可以体验社区开发的最新特性，同时保证最新功能可以收获到更广范围的使用反馈，我们建立了 2.0 版本的专项支持群，<a href="https://wenjuan.feishu.cn/m?t=sF2FZOL1KXKi-m73g" target="_blank" rel="noopener noreferrer">请大家填写申请</a>，欢迎广大社区用户在使用最新版本过程中多多反馈使用意见，帮助 Apache Doris 持续改进。</p><h1><strong>作者介绍：</strong></h1><p>杨勇强，SelectDB 联合创始人、技术副总裁</p><p>岳靖、程宇轩，SelectDB 存储层研发工程师</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[一文揭秘高效稳定的 Apache Doris 内存管理机制]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Memory_Management</id>
        <link href="https://doris.apache.org/zh-CN/blog/Memory_Management"/>
        <updated>2023-06-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>作者：SelectDB 高级研发工程师、Apache Doris Committer 邹新一</p><h1>背景</h1><p><a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">Apache Doris</a> 作为基于 MPP 架构的 OLAP 数据库，数据从磁盘加载到内存后，会在算子间流式传递并计算，在内存中存储计算的中间结果，这种方式减少了频繁的磁盘 I/O 操作，充分利用多机多核的并行计算能力，可在性能上呈现巨大优势。</p><p>在面临内存资源消耗巨大的复杂计算和大规模作业时，<strong>有效的内存分配</strong> <strong>、统计、</strong> <strong>管控对于系统的稳定性起着十分关键的作用</strong>——更快的内存分配速度将有效提升查询性能，通过对内存的分配、跟踪与限制可以保证不存在内存热点，及时准确地响应内存不足并尽可能规避 OOM 和查询失败，这一系列机制都将显著提高系统稳定性；更精确的内存统计，也是大查询落盘的基础。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56c53fa4148d431ba94475b6c73aa9b5~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h1>问题和思考</h1><ul><li>在内存充足时内存管理通常对用户是无感的，但真实场景中往往面临着各式各样的极端 Case ，这些都将为内存性能和稳定性带来挑战，在过去版本中，用户在使用 Apache Doris 时在内存管理方面遭遇了以下挑战：</li><li><ul><li>OOM 导致 BE 进程崩溃。内存不足时，用户可以接受执行性能稍慢一些，或是让后到的任务排队，或是让少量任务失败，总之希望有效限制进程的内存使用而不是宕机；</li><li>BE 进程占用内存较高。用户反馈 BE 进程占用了较多内存，但很难找到对应内存消耗大的查询或导入任务，也无法有效限制单个查询的内存使用；</li><li>用户很难合理的设置每个query的内存大小，所以经常出现内存还很充足，但是query 被cancel了；</li><li>高并发性能下降严重，也无法快速定位到内存热点；</li><li>构建 HashTable 的中间数据不支持落盘，两个大表的 Join 由于内存超限无法完成。</li></ul></li></ul><p>针对开发者而言又存在另外一些问题，比如内存数据结构功能重叠且使用混乱，MemTracker 的结构难以理解且手动统计易出错等。</p><p>针对以上问题，我们经历了过去多个版本的迭代与优化。从 Apache Doris 1.1.0 版本开始，我们逐渐统一内存数据结构、重构 MemTracker、开始支持查询内存软限，并引入进程内存超限后的 GC 机制，同时优化了高并发的查询性能等。在 Apache Doris 1.2.4 版本中，Apache Doris 内存管理机制已趋于完善，在 Benchmark、压力测试和真实用户业务场景的反馈中，基本消除了内存热点以及 OOM 导致 BE 宕机的问题，同时可定位内存 Top 的查询、支持查询内存灵活限制。<strong>而在最新的 Doris 2.0 alpha 版本中，我们实现了查询的异常安全，并将逐步配合 Pipeline 执行引擎和中间数据落盘</strong> <strong>，</strong> <strong>让用户不再受内存不足困扰。</strong></p><p>在此我们将系统介绍 Apache Doris 在内存管理部分的实现与优化。</p><h1>内存管理优化与实现</h1><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f924653afd3e4f5386202798d8751937~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Allocator 作为系统中大块内存申请的统一的入口从系统申请内存，并在申请过程中使用 MemTracker 跟踪内存申请和释放的大小，执行算子所需批量申请的大内存将交由不同的数据结构管理，并在合适的时机干预限制内存分配的过程，确保内存申请的高效可控。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内存分配">内存分配<a href="#内存分配" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>早期 Apache Doris 内存分配的核心理念是尽可能接管系统内存自己管理，使用通用的全局缓存满足大内存申请的性能要求，并在 LRU Cache 中缓存 Data Page、Index Page、RowSet Segment、Segment Index 等数据。</p><p>随着 Doris 使用 Jemalloc 替换 TCMalloc，Jemalloc 的并发性能已足够优秀，所以不在 Doris 内部继续全面接管系统内存，转而针对内存热点位置的特点，使用多种内存数据结构并接入统一的系统内存接口，实现内存统一管理和局部的内存复用。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61b9f61f10ef48c39f31c40ed45f5fb4~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="内存数据结构">内存数据结构<a href="#内存数据结构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>查询执行过程中大块内存的分配主要使用 Arena、HashTable、PODArray 这三个数据结构管理。</p><ol><li><strong>Arena</strong></li></ol><p>Arena 是一个内存池，维护一个内存块列表，并从中分配内存以响应 alloc 请求，从而减少从系统申请内存的次数以提升性能，内存块被称为 Chunk，在内存池的整个生命周期内存在，在析构时统一释放，这通常和查询生命周期相同，并支持内存对齐，主要用于保存 Shuffle 过程中序列化/反序列化数据、HashTable 中序列化 Key 等。</p><p>Chunk 初始 4096 字节，内部使用游标记录分配过的内存位置，如果当前 Chunk 剩余大小无法满足当前内存申请，则申请一个新的 Chunk 添加到列表中，为减少从系统申请内存的次数，在当前 Chunk 小于 128M 时，每次新申请的 Chunk 大小加倍，在当前 Chunk 大于 128M 时，新申请的 Chunk 大小在满足本次内存申请的前提下至多额外分配 128M ，避免浪费过多内存，默认之前的 Chunk 不会再参与后续 alloc。</p><ol start="2"><li><strong>HashTable</strong></li></ol><p>Doris 中的 HashTable 主要在 Hash Join、聚合、集合运算、窗口函数中应用，主要使用的 PartitionedHashTable 最多包含 16 个子 HashTable，支持两个 HashTable 的并行化合并，每个子 Hash Join 独立扩容，预期可减少总内存的使用，扩容期间的延迟也将被分摊。</p><p>在 HashTable 小于 8M 时将以 4 的倍数扩容，在 HashTable 大于 8M 时将以 2 的倍数扩容，在 HashTable 小于 2G 时扩容因子为 50%，即在 HashTable 被填充到 50% 时触发扩容，在 HashTable 大于 2G 后扩容因子被调整为 75%，为了避免浪费过多内存，在构建 HashTable 前通常会依据数据量预扩容。此外 Doris 为不同场景设计了不同的 HashTable，比如聚合场景使用 PHmap 优化并发性能。</p><ol start="3"><li><strong>PODArray</strong></li></ol><p>PODArray 是一个 POD 类型的动态数组，与 std::vector 的区别在于不会初始化元素，支持部分 std::vector 的接口，同样支持内存对齐并以 2 的倍数扩容，PODArray 析构时不会调用每个元素的析构函数，而是直接释放掉整块内存，主要用于保存 String 等 Column 中的数据，此外在函数计算和表达式过滤中也被大量使用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="统一的内存接口">统一的内存接口<a href="#统一的内存接口" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Allocator 作为 Arena、PODArray、HashTable 的统一内存接口，对大于 64M 的内存使用 MMAP 申请，并通过预取加速性能，对小于 4K 的内存直接 malloc/free 从系统申请，对大于 4K 小于 64M 的内存，使用一个通用的缓存 ChunkAllocator 加速，在 Benchmark 测试中这可带来 10% 的性能提升，ChunkAllocator 会优先从当前 Core 的 FreeList 中无锁的获取一个指定大小的 Chunk，若不存在则有锁的从其他 Core 的 FreeList 中获取，若仍不存在则从系统申请指定内存大小封装为 Chunk 后返回。</p><p>Allocator 使用通用内存分配器申请内存，在 Jemalloc 和 TCMalloc 的选择上，Doris 之前在高并发测试时 TCMalloc 中 CentralFreeList 的 Spin Lock 能占到查询总耗时的 40%，虽然关闭aggressive memory decommit能有效提升性能，但这会浪费非常多的内存，为此不得不单独用一个线程定期回收 TCMalloc 的缓存。Jemalloc 在高并发下性能优于 TCMalloc 且成熟稳定，在 Doris 1.2.2 版本中我们切换为 Jemalloc，调优后在大多数场景下性能和 TCMalloc 持平，并使用更少的内存，高并发场景的性能也有明显提升。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="内存复用">内存复用<a href="#内存复用" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Doris 在执行层做了大量内存复用，可见的内存热点基本都被屏蔽。比如对数据块 Block 的复用贯穿 Query 执行的始终；比如 Shuffle 的 Sender 端始终保持一个 Block 接收数据，一个 Block 在 RPC 传输中，两个 Block 交替使用；还有存储层在读一个 Tablet 时复用谓词列循环读数、过滤、拷贝到上层 Block、Clear；导入 Aggregate Key 表时缓存数据的 MemTable 到达一定大小预聚合收缩后继续写入，等等。</p><p>此外 Doris 会在数据 Scan 开始前依据 Scanner 个数和线程数预分配一批 Free Block，每次调度 Scanner 时会从中获取一个 Block 并传递到存储层读取数据，读取完成后会将 Block 放到生产者队列中，供上层算子消费并进行后续计算，上层算子将数据拷走后会将 Block 重新放回 Free Block 中，用于下次 Scanner 调度，从而实现内存复用，数据 Scan 完成后 Free Block 会在之前预分配的线程统一释放，避免内存申请和释放不在同一个线程而导致的额外开销，Free Block 的个数一定程度上还控制着数据 Scan 的并发。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内存跟踪">内存跟踪<a href="#内存跟踪" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Doris 使用 MemTracker 跟踪内存的申请和释放来实时分析进程和查询的内存热点位置，MemTracker 记录着每一个查询、导入、Compaction 等任务以及Cache、TabletMeta等全局对象的内存大小，支持手动统计或 MemHook 自动跟踪，支持在 Web 页面查看实时的 Doris BE 内存统计。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="memtracker-结构">MemTracker 结构<a href="#memtracker-结构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>过去 Doris MemTracker 是具有层次关系的树状结构，自上而下包含 process、query pool、query、fragment instance、exec node、exprs/hash table/etc.等多层，上一层 MemTracker是下一层的 Parent，开发者使用时需理清它们之间的父子关系，然后手动计算内存申请和释放的大小并消费 MemTracker，此时会同时消费这个 MemTracker 的所有 Parent。这依赖开发者时刻关注内存使用，后续迭代过程中若 MemTracker 统计错误将产生连锁反应，对 Child MemTracker 的统计误差会不断累积到他的 Parent MemTracker 中，导致整体结果不可信。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75d7c6e9b66f4b348f9c90e533866bdb~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>在 Doris 1.2.0 中引入了新的 MemTracker 结构，去掉了 Fragment、Instance 等不必要的层级，根据使用方式分为两类，第一类 Memtracker Limiter，在每个查询、导入、Compaction 等任务和全局 Cache、TabletMeta 唯一，用于观测和控制内存使用；第二类 MemTracker，主要用于跟踪查询执行过程中的内存热点，如 Join/Aggregation/Sort/窗口函数中的 HashTable、序列化的中间数据等，来分析查询中不同算子的内存使用情况，以及用于导入数据下刷的内存控制。后文没单独指明的地方，统称二者为 MemTracker。</p><p>二者之间的父子关系只用于快照的打印，使用Lable名称关联，相当于一层软链接，不再依赖父子关系同时消费，生命周期互不影响，减少开发者理解和使用的成本。所有 MemTracker 存放在一组 Map 中，并提供打印所有 MemTracker Type 的快照、打印 Query/Load/Compaction 等 Task 的快照、获取当前使用内存最多的一组 Query/Load、获取当前过量使用内存最多的一组 Query/Load 等方法。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a911d144bde4f1eb34073f369540bf3~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="memtracker-统计方式">MemTracker 统计方式<a href="#memtracker-统计方式" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>为统计某一段执行过程的内存，将一个 MemTracker 添加到当前线程 Thread Local 的一个栈中，使用 MemHook 重载 Jemalloc 或 TCMalloc 的 malloc/free/realloc 等方法，获取本次申请或释放内存的实际大小并记录在当前线程的 Thread Local 中，在当前线程内存使用量累计到一定值时消费栈中的所有 MemTracker，这段执行过程结束时会将这个 MemTracker 从栈中弹出，栈底通常是整个查询或导入唯一的 Memtracker，记录整个查询执行过程的内存。</p><p>下面以一个简化的查询执行过程为例：</p><ul><li>Doris BE 启动后所有线程的内存将默认记录在 Process MemTracker 中。</li><li>Query 提交后，将 Query MemTracker 添加到 Fragment 执行线程的 Thread Local Storage(TLS) Stack 中。</li><li>ScanNode 被调度后，将 ScanNode MemTracker 继续添加到 Fragment 执行线程的 TLS Stack 中，此时线程申请和释放的内存会同时记录到 Query MemTracker 和 ScanNode MemTracker。</li><li>Scanner 被调度后，将 Query MemTracker 和 Scanner MemTracker 同时添加到 Scanner 线程的 TLS Stack 中。</li><li>Scanner 结束后，将 Scanner 线程 TLS Stack 中的 MemTracker 全部移除，随后 ScanNode 调度结束，将ScanNode MemTracker 从 Fragment 执行线程中移除。随后 AggregationNode 被调度时同样将 MemTracker 添加到 Fragment 执行线程中，并在调度结束后将自己的 MemTracker 从 Fragment 执行线程移除。</li><li>后续 Query 结束后，将 Query MemTracker 从 Fragment 执行线程 TLS Stack 中移除，此时 Stack 应为空，在 QueryProfile 中即可看到 Query 整体、ScanNode、AggregationNode 等执行期间内存的峰值。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c07cce5aff04a28bd83742ee772c8fa~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>可见为跟踪一个查询的内存使用，在查询所有线程启动时将 Query MemTracker 绑定到线程 Thread Local，在算子执行的代码区间内，将算子 MemTracker 同样绑定到线程 Thread Local，此后这些线程所有的内存申请和释放都将记录在这个查询中，在算子调度结束和查询结束时分别解除绑定，从而统计一个查询生命周期内各个算子和查询整体的内存使用。</p><p>期待开发者能将 Doris 执行过程中长时间持有的内存尽可能多地统计到 MemTracker 中，这有助于内存问题的分析，不必担心统计误差，这不会影响查询整体统计的准确性，也不必担心影响性能，在 ThreadLocal 中按批消费 MemTracker 对性能的影响微乎其微。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="memtracker-使用">MemTracker 使用<a href="#memtracker-使用" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过 Doris BE 的 Web 页面可以看到实时的内存统计结果，将 Doris BE 内存分为了 Query/Load/Compaction/Global 等几部分，并分别展示它们当前使用的内存和历史的峰值内存，具体使用方法和字段含义可参考 Doris 管理手册：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dfcdc2f805542fdb9cbc22493934c1a~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Global 类型的 MemTracker 中，包括全局的 Cache、TabletMeta 等。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3272e7575f14dcca821ae0d000fea38~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Query 类型的 MemTracker 中，可以看到 Query 和其算子当前使用的内存和峰值内存，通过 Label 将他们关联，历史查询的内存统计可以查看 FE 审计日志或 BE INFO 日志。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08c5e9d9244c411baebcebadcee0b07c~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内存限制">内存限制<a href="#内存限制" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>内存不足导致 OOM 引起 BE 宕机或查询大量失败一直是用户的痛点，为此在 Doris BE 大多数内存被跟踪后，开始着手改进查询和进程的内存限制，在关键内存分配时检测内存限制来保证内存可控。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="查询内存限制">查询内存限制<a href="#查询内存限制" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>每个查询都可以指定内存上限，查询运行过程中内存超过上限会触发 Cancel。从 Doris 1.2 开始查询支持内存超发(overcommit)，旨在允许查询设置更灵活的内存限制，内存充足时即使查询内存超过上限也不会被 Cancel，所以通常用户无需关注查询内存使用。内存不足时，任何查询都会在尝试分配新内存时等待一段时间，如果等待过程中内存释放的大小满足需求，查询将继续执行， 否则将抛出异常并终止查询。</p><p>Doris 2.0 初步实现了查询的异常安全，这使得任何位置在发现内存不足时随时可抛出异常并终止查询，而无需依赖后续执行过程中异步的检查 Cancel 状态，这将使查询终止的速度更快。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="进程内存限制">进程内存限制<a href="#进程内存限制" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Doris BE 会定时从系统获取进程的物理内存和系统当前剩余可用内存，并收集所有查询、导入、Compaction 任务 MemTracker 的快照，当 BE 进程内存超限或系统剩余可用内存不足时，Doris 将释放 Cache 和终止部分查询或导入来释放内存，这个过程由一个单独的 GC 线程定时执行。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/187d123d75a640a081dd884e90706276~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>若 Doris BE 进程内存超过 SoftMemLimit（默认系统总内存的 81%）或系统剩余可用内存低于 Warning 水位线（通常不大于 3.2GB）时触发 Minor GC，此时查询会在 Allocator 分配内存时暂停，同时导入强制下刷缓存中的数据，并释放部分 Data Page Cache 以及过期的 Segment Cache 等，若释放的内存不足进程内存的 10%，若启用了查询内存超发，则从内存超发比例大的查询开始 Cancel，直到释放 10% 的进程内存或没有查询可被 Cancel，然后调低系统内存状态获取间隔和 GC 间隔，其他查询在发现剩余内存后将继续执行。</p><p>若 BE 进程内存超过 MemLimit（默认系统总内存的 90%）或系统剩余可用内存低于 Low 水位线（通常不大于1.6GB）时触发 Full GC，此时除上述操作外，导入在强制下刷缓存数据时也将暂停，并释放全部 Data Page Cache 和大部分其他 Cache，如果释放的内存不足 20%，将开始按一定策略在所有查询和导入的 MemTracker 列表中查找，依次 Cancel 内存占用大的查询、内存超发比例大的导入、内存占用大的导入，直到释放 20% 的进程内存后，调高系统内存状态获取间隔和 GC 间隔，其他查询和导入也将继续执行，GC 的耗时通常在几百 us 到几十 ms 之间。</p><h1>总结规划</h1><p>通过上述一系列的优化，高并发性能和稳定性有明显改善，OOM 导致 BE 宕机的次数也明显降低，即使发生 OOM 通常也可依据日志定位内存位置，并针对性调优，从而让集群恢复稳定，对查询和导入的内存限制也更加灵活，在内存充足时让用户无需感知内存使用。</p><p>为了让用户可以体验社区开发的最新特性，同时保证最新功能可以收获到更广范围的使用反馈，我们建立了 <a href="https://wenjuan.feishu.cn/m?t=sF2FZOL1KXKi-m73g" target="_blank" rel="noopener noreferrer">2.0 Alpha 版本的专项支持群</a>，欢迎广大社区用户在使用最新版本过程中多多反馈使用意见，帮助 Apache Doris 持续改进。</p><p>后续我们将让 Apache Doris 从“能有效限制内存”转为“内存超限时能完成计算”，尽可能减少查询因内存不足被 Cancel，主要工作将聚焦在异常安全、资源组内存隔离、中间数据落盘上：</p><ol><li>查询和导入支持异常安全，从而可以随时随地的抛出内存分配失败的 Exception，外部捕获后触发异常处理或释放内存，而不是在内存超限后单纯依赖异步 Cancel。</li><li>Pipeline 调度中将支持资源组内存隔离，用户可以划分资源组并指定优先级，从而更灵活的管理不同类型任务使用的内存，资源组内部和资源组之间同样支持内存的“硬限”和“软限”，并在内存不足时支持排队机制。</li><li>Doris 将实现统一的落盘机制，支持 Sort，Hash Join，Agg 等算子的落盘，在内存紧张时将中间数据临时写入磁盘并释放内存，从而在有限的内存空间下，对数据分批处理，支持超大数据量的计算，在避免 Cancel 让查询能跑出来的前提下尽可能保证性能。</li></ol><p>以上方向的工作都已处于规划或开发中，如果有小伙伴对以上方向感兴趣，也欢迎参与到社区中的开发来。期待有更多人参与到 Apache Doris 社区的建设中 ，欢迎你的加入！</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[资源消耗降低 90%，速度提升 50%，解读 Apache Doris Compaction 最新优化与实现]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Compaction</id>
        <link href="https://doris.apache.org/zh-CN/blog/Compaction"/>
        <updated>2023-06-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>背景</h1><p>LSM-Tree（ Log Structured-Merge Tree）是数据库中最为常见的存储结构之一，其核心思想在于充分发挥磁盘连续读写的性能优势、以短时间的内存与 IO 的开销换取最大的写入性能，数据以 Append-only 的方式写入 Memtable、达到阈值后冻结 Memtable 并 Flush 为磁盘文件、再结合 Compaction 机制将多个小文件进行多路归并排序形成新的文件，最终实现数据的高效写入。</p><p><a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">Apache Doris</a> 的存储模型也是采用类似的 LSM-Tree 数据模型。用户不同批次导入的数据会先写入内存结构，随后在磁盘上形成一个个的 Rowset 文件，每个 Rowset 文件对应一次数据导入版本。而 Doris 的 Compaction 则是负责将这些 Rowset 文件进行合并，将多个 Rowset 小文件合并成一个 Rowset 大文件。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a24355be7ac41c69180df9d6133a48c~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>在此过程中 Compaction 发挥着以下作用：</p><ul><li>每个 Rowset 内的数据是按主键有序的，但 Rowset 与 Rowset 之间数据是无序的，Compaction 会将多个 Rowset 的数据从无序变为有序，提升数据在读取时的效率；</li><li>数据以 Append-only 的方式进行写入，因此 Delete、Update 等操作都是标记写入，Compaction 会将标记的数据进行真正删除或更新，避免数据在读取时进行额外的扫描及过滤；</li><li>在 Aggregate 模型上，Compaction 还可以将不同 Rowset 中相同 Key 的数据进行预聚合，减少数据读取时的聚合计算，进一步提升读取效率。</li></ul><h1>问题与思考</h1><p>尽管 Compaction 在写入和查询性能方面发挥着十分关键的作用，但 Compaction 任务执行期间的写放大问题以及随之而来的磁盘 I/O 和 CPU 资源开销，也为系统稳定性和性能的充分发挥带来了新的挑战。</p><p>在用户真实场景中，往往面临着各式各样的数据写入需求，并行写入任务的多少、单次提交数据量的大小、提交频次的高低等，各种场景可能需要搭配不同的 Compaction 策略。而不合理的 Compaction 策略则会带来一系列问题：</p><ul><li>Compaction 任务调度不及时导致大量版本堆积、Compaction Score 过高，最终导致写入失败（-235/-238）；</li><li>Compaction 任务执行速度慢，CPU 消耗高；</li><li>Compaction 任务内存占用高，影响查询性能甚至导致 BE OOM；</li></ul><p>与此同时，尽管 Apache Doris 提供了多个参数供用户进行调整，但相关参数众多且语义复杂，用户理解成本过高，也为人工调优增加了难度。</p><p>基于以上问题，从 Apache Doris 1.1.0 版本开始，我们增加了主动触发式 QuickCompaction、引入了 Cumulative Compaction 任务的隔离调度并增加了小文件合并的梯度合并策略，对高并发写入和数据实时可见等场景都进行了针对性优化。</p><p>而在 Apache Doris 最新的 1.2.2 版本和即将发布的 2.0.0 版本中，我们对系统 Compaction 能力进行了全方位增强，<strong>在触发策略、执行方式 、 工程实现以及参数配置上都进行了大幅优化，</strong> <strong>在实时性、易用性与稳定性得到提升的同时更是彻底解决了查询效率问题</strong>。</p><h1>Compaction 优化与实现</h1><p>在设计和评估 Compaction 策略之时，我们需要综合权衡 Compaction 的任务模型和用户真实使用场景，核心优化思路包含以下几点：</p><ul><li><strong>实时性和高效性</strong>。Compaction 任务触发策略的实时性和任务执行方式的高效性直接影响到了查询执行的速度，版本堆积将导致 Compaction Score 过高且触发自我保护机制，导致后续数据写入失败。</li><li><strong>稳定性</strong>。Compaction 任务对系统资源的消耗可控，不会因 Compaction 任务带来过多的内存与 CPU 开销造成系统不稳定。</li><li><strong>易用性</strong>。由于 Compaction 任务涉及调度、策略、执行多个逻辑单元，部分特殊场景需要对 Compaction 进行调优，因此需要 Compaction 涉及的参数能够精简明了，指导用户快速进行场景化的调优。</li></ul><p>具体在实现过程中，包含了触发策略、执行方式、工程实现以及参数配置这四个方面的优化。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc5722db63a14698ab732a2c5123cc14~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="compaction-触发策略">Compaction 触发策略<a href="#compaction-触发策略" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>调度策略决定着 Compaction 任务的实时性。在 Apache Doris 2.0.0 版本中，我们在主动触发和被动扫描这两种方式的基础之上引入了 Tablet 休眠机制，力求在各类场景均能以最低的消耗保障最高的实时性。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="主动触发">主动触发<a href="#主动触发" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>主动触发是一种最为实时的方式，在数据导入的阶段就检查 Tablet 是否有待触发的 Compaction 任务，这样的方式保证了 Compaction 任务与数据导入任务同步进行，在新版本产生的同时就能够立即触发数据合并，能够让 Tablet 版本数维持在一个非常稳定的状态。主动触发主要针对增量数据的 Compaction (Cumulative Compaction)，存量数据则依赖被动扫描完成。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="被动扫描">被动扫描<a href="#被动扫描" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>与主动触发不同，被动扫描主要负责触发大数据量的 Base Compaction 任务。Doris 通过启动一个后台线程，对该节点上所有的 Tablet 元数据进行扫描，根据 Tablet Compaction 任务的紧迫程度进行打分，选择得分最高的 Tablet 触发 Compaction 任务。这样的全局扫描模式能够选出最紧急的 Tablet 进行 Compaction，但一般其执行周期较长，所以需要配合主动触发策略实施。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="休眠机制">休眠机制<a href="#休眠机制" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>频繁的元信息扫描会导致大量的 CPU 资源浪费。因此在 Doris 2.0.0 版本中我们引入了 Tablet 休眠机制，来降低元数据扫描带来的 CPU 开销。通过对长时间没有 Compaction 任务的 Tablet 设置休眠时间，一段时间内不再对该 Tablet 进行扫描，能够大幅降低任务扫描的压力。同时如果休眠的 Tablet 有突发的导入，通过主动触发的方式也能顾唤醒 Compaction 任务，不会对任务的实时性有任何影响。</p><p>通过上述的主动扫描+被动触发+休眠机制，使用最小的资源消耗，保证了 Compaction 任务触发的实时性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="compaction-执行方式">Compaction 执行方式<a href="#compaction-执行方式" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 Doris 1.2.2 版本中中，我们引入了两种全新的 Compaction 执行方式：</p><ul><li>Vertical Compaction，用以彻底解决 Compaction 的内存问题以及大宽表场景下的数据合并；</li><li>Segment Compaction，用以彻底解决上传过程中的 Segment 文件过多问题；</li></ul><p>而在即将发布的 Doris 2.0.0 版本，我们引入了 Ordered Data Compaction 以提升时序数据场景的数据合并能力。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="vertical-compaction">Vertical Compaction<a href="#vertical-compaction" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>在之前的版本中，Compaction 通常采用行的方式进行，每次合并的基本单元为整行数据。由于存储引擎采用列式存储，行 Compaction 的方式对数据读取极其不友好，每次 Compaction 都需要加载所有列的数据，内存消耗极大，而这样的方式在宽表场景下也将带来内存的极大消耗。</p><p>针对上述问题，我们在 Doris 1.2.2 版本中实现了对列式存储更加友好的 Vertical Compaction，具体执行流程如下图：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c5c0cf8ab72486abdde9f8106755ab7~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>整体分为如下几个步骤：</p><ol><li>切分列组。将输入 Rowset 按照列进行切分，所有的 Key 列一组、Value 列按 N 个一组，切分成多个 Column Group；</li><li>Key 列合并。Key 列的顺序就是最终数据的顺序，多个 Rowset 的 Key 列采用堆排序进行合并，产生最终有序的 Key 列数据。在产生 Key 列数据的同时，会同时产生用于标记全局序 RowSources。</li><li>Value 列的合并。逐一合并 Column Group 中的 Value 列，以 Key 列合并时产生的 RowSources 为依据对数据进行排序。</li><li>数据写入。数据按列写入，形成最终的 Rowset 文件。</li></ol><p>由于采用了按列组的方式进行数据合并，Vertical Compaction 天然与列式存储更加贴合，使用列组的方式进行数据合并，单次合并只需要加载部分列的数据，因此能够极大减少合并过程中的内存占用。在实际测试中，<strong>Vertical</strong> <strong>C</strong> <strong>ompaction 使用内存仅为原有 Compaction 算法的 1/10，同时 Compaction 速率提升 15%。</strong></p><p>Vertical Compaction 在 1.2.2 版本中默认关闭状态，需要在 BE 配置项中设置 <code>enable_vertical_compaction=true</code> 开启该功能。</p><p>相关PR：<a href="https://github.com/apache/doris/pull/14524" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/pull/14524</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="segment-compaction">Segment Compaction<a href="#segment-compaction" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>在数据导入阶段，Doris 会在内存中积攒数据，到达一定大小时 Flush 到磁盘形成一个个的 Segment 文件。大批量数据导入时会形成大量的 Segment 文件进而影响后续查询性能，基于此 Doris 对一次导入的 Segment 文件数量做了限制。当用户导入大量数据时，可能会触发这个限制，此时系统将反馈 -238 (TOO_MANY_SEGMENTS) 同时终止对应的导入任务。Segment compaction 允许我们在导入数据的同时进行数据的实时合并，以有效控制 Segment 文件的数量，增加系统所能承载的导入数据量，同时优化后续查询效率。具体流程如下所示：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7a56f1669cc4b69b65ed384b9a3e84c~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>在新增的 Segment 数量超过一定阈值（例如 10）时即触发该任务执行，由专门的合并线程异步执行。通过将每组 10个 Segment 合并成一个新的 Segment 并删除旧 Segment，导入完成后的实际 Segment 文件数量将下降 10 倍。Segment Compaction 会伴随导入的过程并行执行，在大数据量导入的场景下，能够在不显著增加导入时间的前提下大幅降低文件个数，提升查询效率。</p><p>Segment Compaction 在 1.2.2 版本中默认关闭状态，需要在 BE 配置项中设置 <code>enable_segcompaction = true </code>开启该功能。</p><p>相关 PR : <a href="https://github.com/apache/doris/pull/12866" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/pull/12866</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="ordered-data-compaction">Ordered Data Compaction<a href="#ordered-data-compaction" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>随着越来越多用户在时序数据分析场景应用 Apache Doris，我们在 Apache Doris 2.0.0 版本实现了全新的 Ordered Data Compaction。</p><p>时序数据分析场景一般具备如下特点：数据整体有序、写入速率恒定、单次导入文件大小相对平均。针对如上特点，Ordered Data Compaction 无需遍历数据，跳过了传统 Compaction 复杂的读数据、排序、聚合、输出的流程，通过文件 Link 的方式直接操作底层文件生成 Compaction 的目标文件。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8790744023b4402a812bedeb80c4ba16~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Ordered Data Compaction 执行流程包含如下几个关键阶段：</p><ol><li>数据上传阶段。记录 Rowset 文件的 Min/Max Key，用于后续合并 Rowset 数据交叉性的判断；</li><li>数据检查阶段。检查参与 Compaction 的 Rowset 文件的有序性与整齐度，主要通过数据上传阶段的 Min /Max Key 以及文件大小进行判断。</li><li>数据合并阶段。将输入 Rowset 的文件硬链接到新 Rowset，然后构建新 Rowset 的元数据(包括行数，Size，Min/Max Key 等)。</li></ol><p>可以看到上述阶段与传统的 Compaction 流程完全不一样，只需要文件的 Link 以及内存元信息的构建，极其简洁、轻量。<strong>针对时序场景设计的 Ordered Data Compaction 能够在毫秒级别完成大规模的 Compaction 任务，其内存消耗几乎为</strong> <strong>**</strong>0，对用户极其友好。**</p><p>Ordered Data Compaction 在 2.0.0 版本中默认开启状态，如需调整在 BE 配置项中修改 <code>enable_segcompaction </code>即可。</p><p>使用方式：BE 配置 <code>enable_ordered_data_compaction=true</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="compaction-工程实现">Compaction 工程实现<a href="#compaction-工程实现" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>除了上述在触发策略和 Compaction 算法上的优化之外，Apache Doris 2.0.0 版本还对 Compaction 的工程实现进行了大量细节上的优化，包括数据零拷贝、按需加载、Idle Schedule 等。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="数据零拷贝"><strong>数据零拷贝</strong><a href="#数据零拷贝" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>Doris 采用分层的数据存储模型，数据在 BE 上可以分为如下几层：Tablet -&gt; Rowset -&gt; Segment -&gt; Column -&gt; Page，数据需要经过逐层处理。由于 Compaction 每次参与的数据量大，数据在各层之间的流转会带来大量的 CPU 消耗，在新版本中我们设计并实现了全流程无拷贝的 Compaction 逻辑，Block 从文件加载到内存中后，后续无序再进行拷贝，各个组件的使用都通过一个 BlockView 的数据结构完成，这样彻底的解决了数据逐层拷贝的问题，将 Compaction 的效率再次提升了 5%。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="按需加载"><strong>按需加载</strong><a href="#按需加载" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>Compaction 的逻辑本质上是要将多个无序的 Rowset 合并成一个有序的 Rowset，在大部分场景中，Rowset 内或者 Rowset 间的数据并不是完全无序的，可以充分利用局部有序性进行数据合并，在同一时间仅需加载有序文件中的第一个，这样随着合并的进行再逐渐加载。利用数据的局部有序性按需加载，能够极大减少数据合并过程中的内存消耗。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="idle-schedule"><strong>Idle schedule</strong><a href="#idle-schedule" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>在实际运行过程中，由于部分 Compaction 任务占用资源多、耗时长，经常出现因为 Compaction 任务影响查询性能的 Case。这类 Compaction 任务一般存在于 Base compaction 中，具备数据量大、执行时间长、版本合并少的特点，对任务执行的实时性要求不高。在新版本中，针对此类任务开启了线程 Idle Schedule 特性，降低此类任务的执行优先级，避免 Compaction 任务造成线上查询的性能波动。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="易用性">易用性<a href="#易用性" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 Compaction 的易用性方面，Doris 2.0.0 版本进行了系统性优化。结合长期以来 Compaction 调优的一些经验数据，默认配置了一套通用环境下表现最优的参数，同时大幅精简了 Compaction 相关参数及语义，方便用户在特殊场景下的 Compaction 调优。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7fd8ece1d3e4913b5882ff7146df8c6~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h1>总结规划</h1><p>通过上述一系列的优化方式， 全新版本在 Compaction 过程中取得了极为显著的改进效果。在 ClickBench 性能测试中，<strong>新版本 Compaction 执行速度</strong> <strong>达到 30w row/s，相较于旧版本</strong> <strong>提升</strong> <strong>了</strong> <strong>50</strong> <strong>%</strong> <strong>；资源消耗降幅巨大，</strong> <strong>内存占用仅为原先的 10%</strong> 。高并发数据导入场景下，Compaction Score 始终保持在 50 左右，且系统表现极为平稳。同时在时序数据场景中，Compaction 写放大系数降低 90%，极大提升了可承载的写入吞吐量。</p><p>后续我们仍将进一步探索迭代优化的空间，主要的工作方向将聚焦在自动化、可观测性以及执行效率等方向上：</p><ol><li>自动化调优。针对不同的用户场景，无需人工干预，系统支持进行自动化的 Compaction 调优；</li><li>可观测性增强。收集统计 Compaction 任务的各项指标，用于指导自动化以及手动调优；</li><li>并行 Vertical Compaction。通过 Value 列并发执行，进一步提升 Vertical Compaction 效率。</li></ol><p>以上方向的工作都已处于规划或开发中，如果有小伙伴对以上方向感兴趣，也欢迎参与到社区中的开发来。期待有更多人参与到 Apache Doris 社区的建设中 ，欢迎你的加入！</p><h1>作者介绍：</h1><p>一休，Apache Doris contributor，SelectDB 资深研发工程师</p><p>张正宇，Apache Doris contributor，SelectDB 资深研发工程师</p><p><strong># 相关链接：</strong></p><p><strong>SelectDB 官网</strong>：</p><p><a href="https://selectdb.com" target="_blank" rel="noopener noreferrer">https://selectdb.com</a> </p><p><strong>Apache Doris 官网</strong>：</p><p><a href="http://doris.apache.org" target="_blank" rel="noopener noreferrer">http://doris.apache.org</a></p><p><strong>Apache Doris Github</strong>：</p><p><a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris</a></p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[日增百亿数据，查询结果秒出， Apache Doris 在 360商业化的统一 OLAP 应用实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/360</id>
        <link href="https://doris.apache.org/zh-CN/blog/360"/>
        <updated>2023-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读</strong>：360商业化为助力业务团队更好推进商业化增长，实时数仓共经历了三种模式的演进，分别是 Storm + Druid + MySQL 模式、Flink + Druid + TIDB 的模式 以及 Flink + Doris 的模式，基于 <a href="https://doris.apache.org/" target="_blank" rel="noopener noreferrer">Apache Doris</a> 的新一代架构的成功落地使得 360商业化团队完成了实时数仓在 OLAP 引擎上的统一，成功实现广泛实时场景下的秒级查询响应。本文将为大家进行详细介绍演进过程以及新一代实时数仓在广告业务场景中的具体落地实践。</p><p>作者｜360商业化数据团队 窦和雨、王新新</p><p>360 公司致力于成为互联网和安全服务提供商，是互联网免费安全的倡导者，先后推出 360安全卫士、360手机卫士、360安全浏览器等安全产品以及 360导航、360搜索等用户产品。</p><p>360商业化依托 360产品庞大的用户覆盖能力和超强的用户粘性，通过专业数据处理和算法实现广告精准投放，助力数十万中小企业和 KA 企业实现价值增长。360商业化数据团队主要是对整个广告投放链路中所产生的数据进行计算处理，为产品运营团队提供策略调整的分析数据，为算法团队提供模型训练的优化数据，为广告主提供广告投放的效果数据。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="业务场景">业务场景<a href="#业务场景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在正式介绍 Apache Doris 在 360 商业化的应用之前，我们先对广告业务中的典型使用场景进行简要介绍：</p><ul><li><strong>实时大盘：</strong> 实时大盘场景是我们对外呈现数据的关键载体，需要从多个维度监控商业化大盘的指标情况，包括流量指标、消费指标、转化指标和变现指标，因此其对数据的准确性要求非常高（保证数据不丢不重），同时对数据的时效性和稳定性要求也很高，要求实现秒级延迟、分钟级数据恢复。</li><li><strong>广告账户的实时消费数据场景：</strong> 通过监控账户粒度下的多维度指标数据，及时发现账户的消费变化，便于产品团队根据实时消费情况推动运营团队对账户预算进行调整。在该场景下数据一旦出现问题，就可能导致账户预算的错误调整，从而影响广告的投放，这对公司和广告主将造成不可估量的损失，因此在该场景中，同样对数据准确性有很高的要求。目前在该场景下遇到的困难是如何在数据量比较大、查询交叉的粒度比较细的前提下，实现秒级别查询响应。</li><li><strong>AB 实验平台：</strong> 在广告业务中，算法和策略同学会针对不同的场景进行实验，在该场景下，具有报表维度不固定、多种维度灵活组合、数据分析比较复杂、数据量较大等特点，这就需要可以在百万级 QPS 下保证数据写入存储引擎的性能，因此我们需要针对业务场景进行特定的模型设计和处理上的优化，提高实时数据处理的性能以及数据查询分析的效率，只有这样才能满足算法和策略同学对实验报表的查询分析需求。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实时数仓演进">实时数仓演进<a href="#实时数仓演进" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>为提升各场景下数据服务的效率，助力相关业务团队更好推进商业化增长，截至目前实时数仓共经历了三种模式的演进，分别是 Storm + Druid + MySQL 模式、Flink + Druid + TIDB 的模式 以及 Flink + Doris 的模式，本文将为大家进行详细介绍实时数仓演进过程以及新一代实时数仓在广告业务场景中的具体落地。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一代架构">第一代架构<a href="#第一代架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>该阶段的实时数仓是基于 Storm + Druid + MySQL 来构建的，Storm 为实时处理引擎，数据经 Storm 处理后，将数据写入 Druid ，利用 Druid 的预聚合能力对写入数据进行聚合。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be75fc93fa7c43299e366246f89297d4~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>架构痛点：</strong></p><p>最初我们试图依靠该架构解决业务上所有的实时问题，经由 Druid 统一对外提供数据查询服务，但是在实际的落地过程中我们发现 Druid 是无法满足某些分页查询和 Join 场景的，为解决该问题，我们只能利用 MySQL 定时任务的方式将数据定时从 Druid 写入 MySQL 中（类似于将 MySQL 作为 Druid 的物化视图），再通过 Druid + MySQL 的模式对外提供服务。通过这种方式暂时可以满足某些场景需求，但随着业务规模的逐步扩大，当面对更大规模数据下的查询分析需求时，该架构已难以为继，架构的缺陷也越发明显：</p><ul><li>面对数据量的持续增长，数据仓库压力空前剧增，已无法满足实时数据的时效性要求。</li><li>MySQL 的分库分表维护难度高、投入成本大，且 MySQL 表之间的数据一致性无法保障。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二代架构">第二代架构<a href="#第二代架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44160b89e28546d6871fcabddc2eacc4~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>基于第一套架构存在的问题，我们进行了首次升级，这次升级的主要变化是将 Storm 替换成新的实时数据处理引擎 Flink ，Flink 相较于 Storm 不仅在许多语义和功能上进行了扩展，还对数据的一致性做了保证，这些特性使得报表的时效性大幅提升；其次我们使用 TiDB 替换了 MySQL ，利用 TIDB 分布式的特性，一定程度上解决了 MySQL 分库分表难以维护的问题（TiDB 在一定程度上比 MySQL 能够承载更大数据量，可以拆分更少表）。在升级完成后，我们按照不同业务场景的需求，将 Flink 处理完的数据分别写入 Druid 和 TiDB ，由 Druid 和 TIDB 对外提供数据查询服务。</p><p><strong>架构痛点：</strong></p><p>虽然该阶段的实时数仓架构有效提升了数据的时效性、降低了 MySQL 分库分表维护的难度，但在一段时间的使用之后又暴露出了新的问题，也迫使我们进行了第二次升级：</p><ul><li>Flink + TIDB 无法实现端到端的一致性，原因是当其面对大规模的数据时，开启事务将对 TiDB 写入性能造成很大的影响，该场景下 TiDB 的事务形同虚设，心有余而力不足。</li><li>Druid 不支持标准 SQL ，使用有一定的门槛，相关团队使用数据时十分不便，这也直接导致了工作效率的下降。</li><li>维护成本较高，需要维护两套引擎和两套查询逻辑，极大增加了维护和开发成本的投入。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新一代实时数仓架构">新一代实时数仓架构<a href="#新一代实时数仓架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>第二次升级我们引入 Apache Doris 结合 Flink 构建了新一代实时数仓架构，借鉴离线数仓分层理念对实时数仓进行分层构建，并统一 Apache Doris 作为数仓 OLAP 引擎，由 Doris 统一对外提供服务。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b2dbffd2e3640b893d4a94d73eff253~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>我们的数据主要源自于维表物料数据和业务打点日志。维表物料数据会定时全量同步到 Redis 或者 Aerospike （类似于 Redis 的 KV 存储）中，通过 Binlog 变更进行增量同步。业务数据由各个团队将日志收集到 Kafka，内部称为 ODS 原始数据（ODS 原始数据不做任何处理），我们对 ODS 层的数据进行归一化处理，包括字段命名、字段类型等，并对一些无效字段进行删减，并根据业务场景拆分生成 DWD 层数据，DWD 层的数据通过业务逻辑加工以及关联 Redis 中维表数据或者多流 Join，最后生成面向具体业务的大宽表（即 DWT 层数据），我们将 DWT 层数据经过聚合、经由 Stream Load 写入 Doris 中，由 Doris 对外提供数据查询服务。在离线数仓部分，同样也有一些场景需要每日将加工完的 DWS 数据经由 Broker Load 写入到 Doris 集群中，并利用 Doris 进行查询加速，以提升我们对外提供服务的效率。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="选择-doris-的原因">选择 Doris 的原因<a href="#选择-doris-的原因" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>基于 Apache Doris 高性能、极简易用、实时统一等诸多特性，助力 360商业化成功构建了新一代实时数仓架构，本次升级不仅提升了实时数据的复用性、实现了 OLAP 引擎的统一，而且满足了各大业务场景严苛的数据查询分析需求，使得整体实时数据流程架构变得简单，大大降低了其维护和使用的成本。我们选择 Doris 作为统一 OLAP 引擎的重要原因大致可归结为以下几点：</p><ul><li><strong>物化视图：</strong> Doris 的物化视图与广告业务场景的特点契合度非常高，比如广告业务中大部分报表的查询维度相对比较固定，利用物化视图的特性可以提升查询的效率，同时 Doris 可以保证物化视图和底层数据的一致性，该特性可帮助我们降低维护成本的投入。</li><li><strong>数据一致性：</strong> Doris 提供了 Stream Load Label 机制，我们可通过事务的方式与 Flink 二阶段提交进行结合，以保证幂等写入数据，另外我们通过自研 Flink Sink Doris 组件，实现了数据的端到端的一致性，保证了数据的准确性。</li><li><strong>SQL 协议兼容</strong>：Doris 兼容 MySQL 协议，支持标准 SQL，这无论是对于开发同学，还是数据分析、产品同学，都可以实现无成本衔接，相关同学直接使用 SQL 就可以进行查询，使用门槛很低，为公司节省了大量培训和使用成本，同时也提升了工作效率。</li><li><strong>优秀的查询性能：</strong> Apache Doris 已全面实现向量化查询引擎，使 Doris 的 OLAP 性能表现更加强悍，在多种查询场景下都有非常明显的性能提升，可极大优化了报表的询速度。同时依托列式存储引擎、现代的 MPP 架构、预聚合物化视图、数据索引的实现，在低延迟和高吞吐查询上，都达到了极速性能</li><li><strong>运维难度低：</strong> Doris 对于集群和和数据副本管理上做了很多自动化工作，这些投入使得集群运维起来非常的简单，近乎于实现零门槛运维。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="在-ab-实验平台的具体落地">在 AB 实验平台的具体落地<a href="#在-ab-实验平台的具体落地" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Apache Doris 目前广泛应用于 360商业化内部的多个业务场景。比如在实时大盘场景中，我们利用 Doris 的 Aggregate 模型对请求、曝光、点击、转化等多个实时流进行事实表的 Join ；依靠 Doris 事务特性保证数据的一致性；通过多个物化视图，提前根据报表维度聚合数据、提升查询速度，由于物化视图和 Base 表的一致关系由 Doris 来维护保证，这也极大的降低了使用复杂度。比如在账户实时消费场景中，我们主要借助 Doris 优秀的查询优化器，通过 Join 来计算同环比......</p><p><strong>接下来仅以 AB 实验平台这一典型业务场景为例，详尽的为大家介绍 Doris 在该场景下的落地实践，在上述所举场景中的应用将不再赘述。</strong></p><p>AB 实验在广告场景中的应用非常广泛，是衡量设计、算法、模型、策略对产品指标提升的重要工具，也是精细化运营的重要手段，我们可以通过 AB实验平台对迭代方案进行测试，并结合数据进行分析和验证，从而优化产品方案、提升广告效果。</p><p>在文章开头也有简单介绍，AB 实验场景所承载的业务相对比较复杂，这里再详细说明一下：</p><ul><li>各维度之间组合灵活度很高，例如需要对从 DSP 到流量类型再到广告位置等十几个维度进行分析，完成从请求、竞价、曝光、点击、转化等几十个指标的完整流量漏斗。</li><li>数据量巨大，日均流量可以达到<strong>百亿级别</strong>，峰值可达<strong>百万OPS</strong>（Operations Per Second），一条流量可能包含<strong>几十个实验标签 ID</strong>。</li></ul><p>基于以上特点，我们在 AB实验场景中一方面需要保证数据算的快、数据延迟低、用户查询数据快，另一方面也要保证数据的准确性，保障数据不丢不重。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ef64a9fbc274f1bb33a864c813b39f6~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据落地">数据落地<a href="#数据落地" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>当面对一条流量可能包含几十个实验标签 ID 的情况时，从分析角度出发，只需要选中一个实验标签和一个对照实验标签进行分析；而如果通过<code>like</code>的方式在几十个实验标签中去匹配选中的实验标签，实现效率就会非常低。</p><p>最初我们期望从数据入口处将实验标签打散，将一条包含 20 个实验标签的流量拆分为 20 条只包含一个实验标签的流量，再导入 Doris 的聚合模型中进行数据分析。而在这个过程中我们遇到一个明显的问题，当数据被打散之后会膨胀数十倍，百亿级数据将膨胀为千亿级数据，即便 Doris 聚合模型会对数据再次压缩，但这个过程会对集群造成极大的压力。因此我们放弃该实现方式，开始尝试将压力分摊一部分到计算引擎，这里需要注意的是，如果将数据直接在 Flink 中打散，当 Job 全局 Hash 的窗口来 Merge 数据时，膨胀数十倍的数据也会带来几十倍的网络和 CPU 消耗。</p><p>接着我们开始第三次尝试，这次尝试我们考虑在 Flink 端将数据拆分后立刻进行 Local Merge，在同一个算子的内存中开一个窗口，先将拆分的数据进行一层聚合，再通过 Job 全局 Hash 窗口进行第二层聚合，因为 Chain 在一起的两个算子在同一个线程内，因此可以大幅降低膨胀后数据在不同算子之间传输的网络消耗。该方式<strong>通过两层窗口的聚合，再结合 Doris 的聚合模型，有效降低了数据的膨胀程度</strong>，其次我们也同步推动实业务方定期清理已下线的实验，减少计算资源的浪费。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02bfff5bf0224fa7a7bb21879f9c6b12~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>考虑到 AB实验分析场景的特点，我们将实验 ID 作为 Doris 的第一个排序字段，利用前缀索引可以很快定位到目标查询的数据。另外根据常用的维度组合建立物化视图，进一步缩小查询的数据量，<strong>Doris 物化视图基本能够覆盖 80% 的查询场景</strong>，我们会定期分析查询 SQL 来调整物化视图。<strong>最终我们通过模型的设计、前缀索引的应用，结合物化视图能力，使大部分实验查询结果能够实现秒级返回。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据一致性保障">数据一致性保障<a href="#数据一致性保障" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>数据的准确性是 AB实验平台的基础，当算法团队呕心沥血优化的模型使广告效果提升了几个百分点，却因数据丢失看不出实验效果，这样的结果确实无法令人接受，同时这也是我们内部不允许出现的问题。那么我们该如何避免数据丢失、保障数据的一致性呢？</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="自研-flink-sink-doris-组件"><strong>自研 Flink Sink Doris 组件</strong><a href="#自研-flink-sink-doris-组件" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>我们内部已有一套 Flink Stream API 脚手架，因此借助 Doris 的幂等写特性和 Flink 的二阶段提交特性，自研了 Sink To Doris 组件，保证了数据端到端的一致性，并在此基础上新增了异常情况的数据保障机制。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcba3984e6e641049b1b343ed8e021b5~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>在 Doris 0.14 版本中（初期使用的版本），我们一般通过“同一个 Label ID 只会被写入一次”的机制来保证数据的一致性；在 Doris 1.0 版本之后，通过 “Doris 的事务结合 Flink 二阶段提交”的机制来保证数据的一致性。这里详细分享使用 Doris 1.0 版本之后，通过 “Doris 的事务结合 Flink 二阶段提交”机制保证数据的一致性的原理与实现。</p><blockquote><p>在 Flink 中做到数据端到端的一致性有两种方式，一种为通过至少一次结合幂等写，一种为通过恰好一次的二阶段事务。</p></blockquote><p>如右图所示，我们首先在数据写入阶段先将数据写入本地文件，一阶段过程中将数据预提交到 Doris，并保存事务 ID 到状态，如果 Checkpoint 失败，则手动放弃 Doris 事务；如果 Checkpoint 成功，则在二阶段进行事务提交。对于二阶段提交重试多次仍然失败的数据，将提供数据以及事务 ID 保存到 HDFS 的选项，通过 Broker Load 进行手动恢复。为了避免单次提交数据量过大，而导致 Stream Load 时长超过 Flink Checkpoint 时间的情况，我们提供了将单次 Checkpoint 拆分为多个事务的选项。<strong>最终成功通过二阶段提交的机制实现了对数据一致性的保障。</strong></p><p><strong>应用展示</strong></p><p>下图为 Sink To Doris 的具体应用，整体工具屏蔽了 API 调用以及拓扑流的组装，只需要通过简单的配置即可完成 Stream Load 到 Doris 的数据写入 。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b599cbb96234d4b8e6783128af0c31a~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb38729f3f73404da1b5f4fa50fcd527~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="集群监控">集群监控<a href="#集群监控" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在集群监控层面，我们采用了社区提供的监控模板，从集群指标监控、主机指标监控、数据处理监控三个方面出发来搭建 Doris 监控体系。其中集群指标监控和主机指标监控主要根据社区监控说明文档进行监控，以便我们查看集群整体运行的情况。除社区提供的模板之外，我们还新增了有关 Stream Load 的监控指标，比如对当前 Stream Load 数量以及写入数据量的监控，如下图所示：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebe459f1fa0a4a87bacf0f8209eaf836~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>除此之外，我们对数据写入 Doris 的时长以及写入的速度也比较关注，根据自身业务的需求，我们对任务写入数据速度、处理数据耗时等数据处理相关指标进行监控，帮助我们及时发现数据写入和读取的异常情况，借助公司内部的报警平台进行监控告警，报警方式支持电话、短信、推推、邮件等</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aef04fc519a64920b7ae4feea0c84cc8~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结与规划">总结与规划<a href="#总结与规划" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>目前 Apache Doris 主要应用于广告业务场景，<strong>已有数十台集群机器，覆盖近 70% 的实时数据分析场景，实现了全量离线实验平台以及部分离线 DWS 层数据查询加速。当前日均新增数据规模可以达到百亿级别，在大部分实时场景中，其查询延迟在 1s 内</strong>。同时，Apache Doris 的成功落地使得我们完成了实时数仓在 OLAP 引擎上的统一。Doris 优异的分析性能及简单易用的特点，也使得数仓架构更加简洁。</p><p>未来我们将对 Doris 集群进行扩展，根据业务优先级进行资源隔离，完善资源管理机制，并计划将 Doris 应用到 360商业化内部更广泛的业务场景中，充分发挥 Doris 在 OLAP 场景的优势。最后我们将更加深入的参与到 Doris 社区中来，积极回馈社区，与 Doris 并肩同行，共同进步！</p>]]></content>
        <author>
            <name>360商业化数据团队</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[从 Elasticsearch 到 Apache Doris，10 倍性价比的新一代日志存储分析平台]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Inverted Index</id>
        <link href="https://doris.apache.org/zh-CN/blog/Inverted Index"/>
        <updated>2023-05-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>作者介绍</strong>：肖康，<a href="https://cn.selectdb.com/" target="_blank" rel="noopener noreferrer">SelectDB</a> 技术副总裁</p><h1>导语</h1><p>日志数据的处理与分析是最典型的大数据分析场景之一，过去业内以 Elasticsearch 和 Grafana Loki 为代表的两类架构难以同时兼顾高吞吐实时写入、低成本海量存储、实时文本检索的需求。Apache Doris 借鉴了信息检索的核心技术，在存储引擎上实现了面向 AP 场景优化的高性能倒排索引，对于字符串类型的全文检索和普通数值、日期等类型的等值、范围检索具有更高效的支持，相较于 Elasticsearch 实现性价比 10 余倍的提升，以此为日志存储与分析场景提供了更优的选择。</p><h1>日志数据分析的需求与特点</h1><p>日志数据在企业大数据中非常普遍，其体量往往在企业大数据体系中占据非常高的比重，包括服务器、数据库、网络设备、IoT 物联网设备产生的系统运维日志，与此同时还包含了用户行为埋点等业务日志。</p><p>日志数据对于保障系统稳定运行和业务发展至关重要：基于日志的监控告警可以发现系统运行风险，及时预警；在故障排查过程中，实时日志检索能帮助工程师快速定位到问题，尽快恢复服务；日志报表能通过长历史统计发现潜在趋势。而用户埋点日志数据则是用户行为分析以及智能推荐业务所依赖的决策基础，有助于用户需求洞察与体验优化以及后续的业务流程改进。</p><p>由于其在业务中能发挥的重要意义，因此构建统一的日志分析平台，提供对日志数据的存储、高效检索以及快速分析能力，成为企业挖掘日志数据价值的关键一环。而日志数据和应用场景往往呈现如下的特点：</p><ul><li>数据增长快：每一次用户操作、系统事件都会触发新的日志产生，很多企业每天新增日志达到几十甚至几百亿条，对日志平台的写入吞吐要求很高；</li><li>数据总量大：由于自身业务和监管等需要，日志数据经常要存储较长的周期，因此累积的数据量经常达到几百 TB 甚至 PB 级，而较老的历史数据访问频率又比较低，面临沉重的存储成本压力；</li><li>时效性要求高：在故障排查等场景需要能快速查询到最新的日志，分钟级的数据延迟往往无法满足业务极高的时效性要求，因此需要实现日志数据的实时写入与实时查询。</li></ul><p>这些日志数据和应用场景的特点，为承载存储和分析需求的日志平台提出了如下挑战：</p><ul><li>高吞吐实时写入：既需要保证日志流量的大规模写入，又要支持低延迟可见；</li><li>低成本大规模存储：既要存储大量的数据，又要降低存储成本；</li><li>支持文本检索的实时查询：既要能支持日志文本的全文检索，又要做到实时查询响应；</li></ul><h1>业界日志存储分析解决方案</h1><p>当前业界有两种比较典型的日志存储与分析架构，分别是以 Elasticsearch 为代表的倒排索引检索架构以及以 Loki 为代表的轻量索引/无索引架构，如果我们从实时写入吞吐、存储成本、实时交互式查询性能等几方面进行对比，不难发现以下结论：</p><ul><li>以 ES 为代表的倒排索引检索架构，支持全文检索、查询性能好，因此在日志场景中被业内大规模应用，但其仍存在一些不足，包括实时写入吞吐低、消耗大量资源构建索引，且需要消耗巨大存储成本；</li><li>以 Loki 为代表的轻量索引或无索引架构，实时写入吞吐高、存储成本较低，但是检索性能慢、关键时候查询响应跟不上，性能成为制约业务分析的最大掣肘。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/420a9d5e25c349af839c08fa539ee44e~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>ES 在日志场景的优势在于全文检索能力，能快速从海量日志中检索出匹配关键字的日志，其底层核心技术是倒排索引（Inverted Index）。</p><p>倒排索引是一种用于快速查找文档中包含特定单词或短语的数据结构，最早应用于信息检索领域。如下图所示，在数据写入时，倒排索引可以将每一行文本进行分词，变成一个个词（Term），然后构建词（Term） -&gt; 行号列表（Posting List） 的映射关系，将映射关系按照词进行排序存储。当需要查询某个词在哪些行出现的时候，先在 词 -&gt; 行号列表 的有序映射关系中查找词对应的行号列表，然后用行号列表中的行号去取出对应行的内容。这样的查询方式，可以避免遍历对每一行数据进行扫描和匹配，只需要访问包含查找词的行，在海量数据下性能有数量级的提升。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bd51d6bf69945c49eccd548d455d223~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>图：倒排索引原理示意</p><p>倒排索引为 ES 带来快速检索能力的同时，也付出了写入速度吞吐低和存储空间占用高的代价——由于数据写入时倒排索引需要进行分词、词典排序、构建倒排表等 CPU 和内存密集型操作，导致写入吞吐大幅下降。而从存储成本角度考虑，ES 会存储原始数据和倒排索引，为了加速分析可能还需要额外存储一份列存数据，因此 3 份冗余也会导致更高的存储空间占用。</p><p>Loki 则放弃了倒排索引，虽然带来来写入吞吐和存储空间的优势，但是损失了日志检索的用户体验，在关键时刻不能发挥快速查日志的作用。成本虽然有所降低，但是没有真正解决用户的问题。</p><h1>更高性价比的日志存储分析解决方案</h1><p>从以上方案对比可知，以 Elasticsearch 为代表的倒排索引检索架构以及以 Loki 为代表的轻量索引/无索引架构无法同时兼顾 高吞吐、低存储成本和实时高性能的要求，只能在某一方面或某几方面做权衡取舍。如果在保持倒排索引的文本检索性能优势的同时，大幅提升系统的写入速度与吞吐量并降低存储资源成本，是否日志场景所面临的困境就迎刃而解呢？答案是肯定的。</p><p>如果我们希望使用 Apache Doris 来更好解决日志存储与分析场景的痛点，其实现路径也非常清晰——<strong>在数据库内部增加倒排索引、以满足字符串类型的全文检索和普通数值/日期等类型的等值、范围检索，同时进一步优化倒排索引的查询性能、使其更加契合日志数据分析的场景需求</strong>。</p><p>在同样实现倒排索引的情况下，相较于 ES， Apache Doris 怎么做到更高的性能表现呢？或者说现有倒排索引的优化空间有哪些呢？</p><ul><li>ES 基于 Apache Lucene 构建倒排索引，Apache Lucene 自 2000 年开源至今已有超过 20 年的历史，设计之初主要面向信息检索领域、功能丰富且复杂，而日志和大多数 OLAP 场景只需要其核心功能，包括分词、倒排表等，而相关度排序等并非强需求，因此存在进一步功能简化和性能提升的空间；</li><li>ES 和 Apache Lucene 均采用 Java 实现，而 Apache Doris 存储引擎和执行引擎采用 C++ 开发并且实现了全面向量化，相对于 Java 实现具有更好的性能；</li><li>倒排索引并不能决定性能表现的全部，作为一个高性能、实时的 OLAP 数据库，Apache Doris 的列式存储引擎、MPP 分布式查询框架、向量化执行引擎以及智能 CBO 查询优化器，相较于 ES 更为高效。</li></ul><p>通过在 <a href="https://github.com/apache/doris/releases/tag/2.0.0-alpha1" target="_blank" rel="noopener noreferrer">Apache Doris 2.0.0 最新版本</a>的探索与持续优化，在相同硬件配置和数据集的测试表现上，Apache Doris 在数据库内核实现高性能倒排索引后，相对于 ES 实现了日志数据写入速度提升 4 倍、存储空间降低 80%、查询性能提升 2 倍，再结合 Apache Doris 2.0.0 版本引入的冷热数据分离特性，整体性价比提升 10 倍以上！</p><p>接下来我们进一步介绍设计与实现细节。</p><h1>高性能倒排索引的设计与实现</h1><p>业界各类系统为了支持全文检索和任意列索引，往往有两种实现方式：一是通过外接索引系统来实现，原始数据存储在原系统中、索引存储在独立的索引系统中，两个系统通过数据的 ID 进行关联。数据写入时会同步写入到原系统和索引系统，索引系统构建索引后不存储完整数据只保留索引。查询时先从索引系统查出满足过滤条件的数据 ID 集合，然后用 ID 集合去原系统查原始数据。</p><p>这种架构的优势是实现简单，借力外部索引系统，对原有系统改动小。但是问题也很明显：</p><ul><li>数据写入两个系统，异常有数据不一致的问题，也存在一定冗余存储；</li><li>查询需在两个系统进行网络交互有额外开销，数据量大时用 ID 集合去原系统查性能比较低；</li><li>维护两套系统的复杂度高，将系统的复杂性从开发测转移到运维测；</li></ul><p>而另一种方式则是直接在系统中内置倒排索引，尽管技术难度更高，但性能更好、且无需花费额外的系统维护成本，对用户更加友好，这也是 Apache Doris 所选择的方式。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据库内置倒排索引">数据库内置倒排索引<a href="#数据库内置倒排索引" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在选择了在数据库内核中内置倒排索引后，我们需要进一步对 Apache Doris 索引结构进行分析，判断能否通过在已有索引基础上进行拓展来实现。</p><p>Apache Doris 现有的索引存储在 Segment 文件的 Index Region 中，按照适用场景可以分为跳数索引和点查索引两类：</p><ul><li><p>跳数索引：包括 ZoneMap 索引和 Bloom Filter 索引。</p><ul><li>ZoneMap 索引对每一个数据块和文件保存 Min/Max/isnull 等汇总信息，可以用于等值、范围查询的粗粒度过滤，只能排除不满足查询条件的数据块和文件，不能定位到行，也不支持文本分词。</li><li>BloomFilter 索引也是数据块和文件级别的索引，通过 Bloom Filter 判断某个值是否在数据块和文件中，同样不能定位到行、不支持文本分词；</li></ul></li><li><p>点查索引：包括 ShortKey 前缀排序索引和 Bitmap 索引。</p><ul><li>ShortKey 在排序的基础上，根据给定的前缀列实现快速查询数据的索引方式，能够对前缀索引的列进行等值、范围查询，但不支持文本分词，另外由于数据要按前缀索引排序、因此一个表只允许一组前缀索引。</li><li>Bitmap 索引记录数据值 -&gt; 行号 Bitmap 的有序映射，是一种很基础的倒排索引，但是索引结构比较简单、查询效率不高、不支持文本分词。</li></ul></li></ul><p>原有索引结构很难满足日志场景实时文本检索的需求，因此设计了全新的倒排索引。倒排索引在设计和实现上我们采取了无侵入的方式、不改变 Segment 数据文件格式，而是增加了新的 Inverted Index File，逻辑上在 Table 的 Column 级别。具体流程如下：</p><ul><li>数据写入和 Compaction 阶段：在写 Segment 文件的同时，同步写入一个 Inverted Index 文件，文件路径由 Segment ID + Index ID 决定。写入 Segment 的 Row 和 Index 中的 Doc 一一对应，由于同步顺序写入，Segment 中的 Rowid 和 Index 中的 Docid 完全对应。</li><li>查询阶段：如果查询 Where 条件中有建了倒排索引的列，会自动去 Index 文件中查询，返回满足条件的 Docid List，将 Docid List 一一对应的转成 Rowid Bitmap，然后走 Doris 通用的 Rowid 过滤机制只读取满足条件的行，达到查询加速的效果。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c1b0111fc3043f590cb86a7ae210e05~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>图：Doris倒排索引架构图</p><p>这个设计的好处是已有的数据文件无需修改，可以做到兼容升级，而且增减索引不影响数据文件和其他索引，用户增建索引没有负担。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="通用倒排索引优化">通用倒排索引优化<a href="#通用倒排索引优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><strong>C++和向量化实现</strong></p><p>Apache Doris 使用 <a href="https://clucene.sourceforge.net/" target="_blank" rel="noopener noreferrer">CLucene</a> 作为底层的倒排索引库，CLucene 是一个用 C++ 实现的高性能、稳定的 Lucene 倒排索引库，它的功能比较完整，支持分词和自定义分词算法，支持全文检索查询和等值、范围查询。</p><p>Apache Doris 的存储模块和 CLucene 都用 C++ 实现，避免了Java Lucene 的 JVM GC 等开销，同样的计算 C++ 实现相对于 Java 性能优势明显，而且更利于做向量化加速。Doris 倒排索引进行了向量化优化，包括分词、倒排表构建、查询等，性能得到进一步提升。整体来看 Doris 的倒排索引写入速度可以超过单核 20MB/s，而 ES 的单核写入速度不到 5MB/s，有 4 倍的性能优势。</p><p><strong>列式存储和压缩</strong></p><p>Lucene 本身是文档存储模型，主数据采用行存，而 Doris 中不同列的倒排索引是相互独立的，因此倒排索引文件也采用列式存储，有利于向量化构建索引和提高压缩率。</p><p>采用压缩比高且速度快的 ZSTD，通常可以达到 5 ~10倍的压缩比，与常用的GZIP压缩相比有50%以上的空间节省且速度更快。</p><p><strong>BKD 索引与</strong> <strong>数值、日期类型</strong> <strong>列优化</strong></p><p>针对数值、日期类型的列，我们还实现了 BKD 索引，可以对范围查询提高性能，存储空间也相对于转成定长字符串更加高效，具有以下主要特性和优势：</p><ol><li>高效范围查询：BKD 索引采用多维数据结构，为范围查询带来高效率。它能迅速定位数值或日期类型列中所需的数据范围，降低查询时间复杂度。</li><li>存储空间优化：与其他索引方法相比，BKD 索引在存储空间使用上更高效。通过聚合并压缩相邻数据块，减少索引所需存储空间，降低存储成本。</li><li>多维数据支持：BKD 索引具备良好扩展性，支持多维数据类型，如地理坐标（GEO point）和范围（Range），使其在处理复杂数据类型时具有高适应性。</li></ol><p>此外，我们在原有 BKD 索引能力基础上进行了进一步拓展：</p><ol><li>优化低基数场景：针对数值分布集中、单个数值倒排列表较多的低基数场景，我们调整了针对性的压缩算法，降低大量倒排表解压缩和反序列化所带来的CPU性能消耗。</li><li>预查询技术：针对查询结果命中数较高的场景，我们采用预查询技术进行命中数预估。若命中数显著超过阈值，可跳过索引查询，直接利用Doris在大数据量查询下的技术优势进行数据过滤。</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="面向-olap-的倒排索引优化">面向 OLAP 的倒排索引优化<a href="#面向-olap-的倒排索引优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>日志存储和分析场景对检索的需求很简单，不需要特别复杂的功能（比如相关性排序），更需要降低存储成本和快速按照条件查出数据。因此，在面对海量数据的写入和查询时，Apache Doris 还针对 OLAP 数据库的特点优化了倒排索引的结构，使其更加简洁高效。例如：</p><ul><li>在写入流程保证不会多个线程写入一个索引，从而避免写入时多线程锁竞争的开销；</li><li>在存储结构上去掉了不必要的正排、norm 等文件，减少写入 IO 开销和存储空间占用；</li><li>查询过程中简化相关性打分和排序逻辑，降低不必要的开销，提升查询性能。</li></ul><p>针对日志等数据有按时间分区、历史数据访问频度低的特点，基于独立的索引文件设计，Apache Doris 还将在后续的版本中提供更细粒度、更灵活的索引管理功能：</p><ul><li>指定分区构建倒排索引，比如新增一个索引的时候指定最近7天的日志构建索引，历史数据不建索引</li><li>指定分区删除倒排索引，比如删除超过1个月的日志的索引，释放访问频度低的索引存储空间</li></ul><h1>性能测试</h1><p>高性能是 Apache Doris 倒排索引设计和实现的首要出发点，我们通过公开的测试数据集分别与 ES 以及 Clickhouse 进行性能测试，测试效果如下：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="vs-elasticsearch">vs Elasticsearch<a href="#vs-elasticsearch" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>我们采用了 ES 官方的性能测试 Benchmark esrally 并使用其中的 HTTP Logs 日志，在同样的硬件资源、数据、测试Case 以及测试工具下，记录并对比各自的数据写入时间、吞吐以及查询延迟。</p><ul><li>测试数据：esrally HTTP Logs track 中自带测试数据集，1998 年 World Cup HTTP Server Logs，未压缩前 32G、共 2.47 亿行、单行平均长度 134 字节；</li><li>测试查询：esrally HTTP Logs 测试关键词检索、范围查询、聚合、排序等 11 个 Query，所有查询跑 100 次串行执行；</li><li>测试环境：3 台 16C 64G 云主机组成的集群。</li></ul><p>在最终的测试结果中，<strong>Doris 写入速度是 ES 的 4.2 倍</strong>、达到 550 MB/s，写入后的数据压缩比接近 1:10、<strong>存储空间</strong> <strong>节省</strong> <strong>超</strong> <strong>**</strong>80%** <strong>，查询耗时下降 57%、查询性能是 ES 的 2.3 倍。加上冷热数据分离降低冷数据存储成本，整体相较 ES 实现 10倍以上的性价比提升。</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0da29dee8de4083a8a5f217b8013c62~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="vs-clickhouse">vs Clickhouse<a href="#vs-clickhouse" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Clickhouse 近期的 v23.1 版本也引入了类似 Feature，将倒排索引作为实验性功能发布，因此我们同样进行了跟 Clickhouse 倒排索引的性能对比。在本次测试中，我们采用了 Clickhouse 官方 Inverted Index 介绍博客中使用的 Hacker News 样例数据以及查询 SQL ，同样保持相同的物理资源、数据、测试 Case 以及测试工具。</p><p>（参考文章：<a href="https://clickhouse.com/blog/clickhouse-search-with-inverted-indices%EF%BC%89" target="_blank" rel="noopener noreferrer">https://clickhouse.com/blog/clickhouse-search-with-inverted-indices）</a></p><ul><li>测试数据：Hacker News 2873 万条数据，6.7G，Parquet 格式；</li><li>测试查询：3 个查询，分别查询 'clickhouse'、'olap' OR 'oltp'、'avx' AND 'sve' 等关键字出现的次数；</li><li>测试机器：1 台 16C 64G 云主机</li></ul><p>在最终的测试结果中，3 个 SQL <strong>Apache Doris 的查询性能分别是 Clickhouse 的 4.7 倍、12.0 倍以及 18.5 倍</strong>，有明显的性能优势。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66eb5b885ba24776a7df06776bb6552b~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h1>如何使用</h1><p>下面以一个 Hacker News 100 万条测试数据的示例展示 Doris 如何利用倒排索引实现高效的日志分析。</p><ol><li><p>建表时指定索引</p><ol><li>INDEX idx_comment (<code>comment</code>) 指定对 comment 列建一个名为 idx_comment 的索引</li><li>USING INVERTED 指定索引类型为倒排索引</li><li>PROPERTIES("parser" = "english") 指定分词类型为英文分词</li></ol></li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE hackernews_1m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `id` BIGINT,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `deleted` TINYINT,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `type` String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `author` String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `timestamp` DateTimeV2,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `comment` String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `dead` TINYINT,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `parent` BIGINT,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `poll` BIGINT,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `children` Array&lt;BIGINT&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `url` String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `score` INT,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `title` String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `parts` Array&lt;INT&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `descendants` INT,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    INDEX idx_comment (`comment`) USING INVERTED PROPERTIES("parser" = "english") COMMENT 'inverted index for comment'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DUPLICATE KEY(`id`)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRIBUTED BY HASH(`id`) BUCKETS 10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PROPERTIES ("replication_num" = "1");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注：对于已经存在的表，也可以通过 <code>ADD INDEX idx_comment ON hackernews_1m(`comment`) USING INVERTED PROPERTIES("parser" = "english") </code>来增加索引。值得一提的是，和 Doris 原先存储在 Segment 数据文件中的智能索引和二级索引相比，增加倒排索引的过程只会读 comment 列构建新的倒排索引文件，不会读写原有的其他数据，效率有明显提升。</p><ol start="2"><li>导入数据后查询，使用 <code>MATCH_ALL</code> 在 comment 这一列上匹配 OLAP 和 OLTP 两个词，和 LIKE 扫描硬匹配相比，查询性能有十余倍的提升。（这仅是 100 万条数据下的测试效果，而随着数据量增大、性能提升越明显）</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; SELECT count() FROM hackernews_1m WHERE comment LIKE '%OLAP%' AND comment LIKE '%OLTP%';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| count() |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      15 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.13 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; SELECT count() FROM hackernews_1m WHERE comment MATCH_ALL 'OLAP OLTP';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| count() |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      15 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.01 sec)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>更多详细功能介绍和测试步骤可以参考Apache Doris <a href="https://doris.apache.org/zh-CN/docs/dev/data-table/index/inverted-index" target="_blank" rel="noopener noreferrer">倒排索引官方文档</a> 。</p><h1>总结</h1><p>通过内置高性能倒排索引，Apache Doris 对于字符串类型的全文检索和普通数值、日期等类型的等值、范围检索具有更高效的支持，进一步提升了数据查询的效率和准确性，对于大规模日志数据查询分析有了更好的性能表现，为需要检索能力的用户提供了更高性价比的选择。</p><p>目前倒排索引已经支持了 String、Int、Decimal、Datetime 等常用 Scalar 数据类型和 Array 数组类型，后续还会增加对 JSONB、Map 等复杂数据类型的支持。而 BKD 索引可以支持多维度类型的索引，为未来 Doris 增加 GEO 地理位置数据类型和索引打下了基础。与此同时 Apache Doris 在半结构化数据分析方面还有更多能力扩展，比如自动根据导入数据扩展表结构的 Dynamic Table、丰富的复杂数据类型（Array、Map、Struct、JSONB）以及高性能字符串匹配算法等。</p><p>除倒排索引以外，<a href="https://github.com/apache/doris/releases/tag/2.0.0-alpha1" target="_blank" rel="noopener noreferrer">Apache Doris 在 2.0.0 Alpha 版本</a>中还实现了单节点数万 QPS 的高并发点查询能力、基于对象存储的冷热数据分离、基于代价模型的全新查询优化器以及 Pipeline 执行引擎等，欢迎大家下载体验。高并发点查询的详细介绍可以查看 SelectDB 技术团队过往发布的技术博客，其他功能的使用介绍请参考社区官方文档，同时也敬请持续关注我们后续发布的特性解读系列文章。</p><p>为了让用户可以体验社区开发的最新特性，同时保证最新功能可以收获到更广范围的使用反馈，我们建立了 2.0.0 版本的专项支持群，欢迎广大社区用户在使用最新版本过程中多多反馈使用意见，帮助 Apache Doris 持续改进，<a href="https://wenjuan.feishu.cn/m/cfm?t=sF2FZOL1KXKi-m73g" target="_blank" rel="noopener noreferrer">通过此处填写申请加入专项支持群。</a></p>]]></content>
        <author>
            <name>肖康</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 在美联物业的数据仓库应用实践，助力传统行业数字化革新]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Midland Realty</id>
        <link href="https://doris.apache.org/zh-CN/blog/Midland Realty"/>
        <updated>2023-05-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读：</strong> 传统行业面对数字化转型往往会遇到很多困难，比如缺乏数据管理体系、数据需求开发流程冗长、烟囱式开发、过于依赖纸质化办公等，美联物业也有遇到类似的问题。本文主要介绍美联物业基于 <a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">Apache Doris</a> 在数据体系方面的建设，以及对数据仓库搭建经验进行的分享和介绍，旨在为数据量不大的传统企业提供一些数仓思路，实现数据驱动业务，低成本、高效的进行数仓改造。</p><p>作者｜美联物业数仓负责人 谢帮桂</p><p>美联物业属于香港美联集团成员，于 1973 年成立，并于 1995 年在香港联合交易所挂牌上市(香港联交所编号:1200)，2008 年美联工商铺于主板上市（香港联交所编号:459）， 成为拥有两家上市公司的地产代理企业。拥有 40 余载房地产销售行业经验，业务涵盖中、小型住宅、豪宅及工商铺，提供移民顾问、金融、测量、按揭转介等服务，业务遍布中国香港地区、中国澳门地区和中国内地等多个重要城市。</p><p>本文主要介绍关于美联物业在数据体系方面的建设，以及对数据仓库搭建经验进行的分享和介绍，旨在为数据量不大的传统企业提供一些数仓思路，实现数据驱动业务，低成本、高效的进行数仓改造。</p><p><em>考虑隐私政策，本文不涉及公司任何具体业务数据。</em></p><h1>业务背景</h1><p>美联物业早在十多年前就已深入各城市开展房地产中介业务，数据体系的建设和发展与大多数传统服务型公司类似，经历过几个阶段时期，如下图所示。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99156394583e4c289c81872b1ebbace5~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>我们的数据来源于大大小小的子业务系统和部门手工报表数据等，存在历史存量数据庞大，数据结构多样复杂，数据质量差等普遍性问题。此外，早期业务逻辑处理多数是使用关系型数据库 SQL Server 的存储过程来实现，当业务流程稍作变更，就需要投入大量精力排查存储过程并进行修改，使用及维护成本都比较高。</p><p><strong>基于此背景，我们面临的挑战可以大致归纳为以下几点：</strong></p><ul><li>缺乏数据管理体系，统计口径统一，已有数据无法降本复用。多部门、多系统、多字段，命名随意、表违反范式结构混乱；对同一业务来源数据无法做到多份报表复用，反复在不同报表编写同一套计算逻辑。</li><li>海量数据下性能不足，查询响应慢。历史大多数业务数据存储在关系型数据库中，分表分库已无法做到上亿数据秒级分析查询。</li><li>数据需求开发流程冗长、烟囱式开发。每当业务部门提出一个数据需求，数据开发就需要在多个系统之间进行数据兼容编写存储过程，从而导致存储过程的可移植性和可读性都非常差。</li><li>部门之间严重依赖文本文档处理工作，效率低下。由于长期的手工统计，用户已形成习惯，导致对信息系统的信任程度也比较低。</li></ul><h1>早期架构</h1><p>针对上述的⼏个需求，我们在平台建设的初期选⽤了 Hadoop、Hive、Spark 构建最初的离线数仓架构，也是比较普遍、常见的架构，运作原理不进行过多赘述。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a80f8ff750a04761b6d97eb1fdfc0250~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>我们数据体系主要服务对象以内部员工为主，如房产经纪人、后勤人员、行政人事、计算机部门，房产经纪在全国范围内分布广泛，也是我们的主要服务对象。当前数据体系还无需面向 C 端用户，因此在数据计算和资源方面的压力并不大，早期基于 Hadoop 的架构可以满足一部分基本的需求。但是随着业务的不断发展、内部人员对于数据分析的复杂性、分析的效率也越来越高，该架构的弊端日益越发的明显，主要体现为以下几点：</p><ul><li>过于笨重：传统公司的计算量和数据量并不大，使用 Hadoop 过于浪费。</li><li>效率低下：T+1 的调度时效和脚本，动辄需要花费 1 小时的计算时间导入导出，效率低、影响数据的开发工作。</li><li>维护成本高：组件过多，排查故障链路过长，运维成本也很高，且部门同事之间熟悉各个组件需要大量学习和沟通成本。</li></ul><h1>新数仓架构</h1><p>基于上述业务需求及痛点，我们开始了架构升级，并希望在这次升级中实现几个目标：</p><ul><li>初步建立数据管理体系，搭建数据仓库。</li><li>搭建报表平台和报表快速开发流程体系。</li><li>实现数据需求能够快速反应和交付（1小时内），查询延迟不超过 10s。</li><li>最小成本原则构建架构，支持滚动扩容。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="技术选型">技术选型<a href="#技术选型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>经过调研了解以及朋友推荐，我们了解到了 Apache Doris ，并很快与社区取得了联系，Apache Doris 的几大优势吸引了我们：</p><p><strong>足够简单</strong></p><p>美联物业及大部分传统公司的数据人员除了需要完成数据开发工作之外，还需要兼顾运维和架构规划的工作。因此我们选择数仓组件的第一原则就是"简单"，简单主要包括两个方面：</p><ul><li>使用简单：Apache Doris 兼容 MySQL 协议，支持标准 SQL，有利于开发效率和共识统一，此外，Doris 的 ETL 编写脚本主要使用 SQL进行开发，使用 MySQL 协议登陆使用，兼容多数 MySQL 语法，提供丰富的数据分析函数，省去了 UDF 开发工作。</li><li>架构简单：Doris 的组件架构由 FE+BE 两类进程组成，不依赖其他系统，升级扩容非常方便，故障排查链路非常清晰，有利于运维成本的降低。</li></ul><p><strong>极速性能</strong></p><p>Doris 依托于列式存储引擎、自动分区分桶、向量计算、多方面 Join 优化和物化视图等功能的实现，可以覆盖众多场景的查询优化，海量数据也能可以保证低延迟查询，实现分钟级或秒级响应。</p><p><strong>极低成本</strong></p><p>降本提效已经成为现如今企业发展的常态，免费的开源软件就比较满足我们的条件，另外基于 Doris 极简的架构、语言的兼容、丰富的生态等，为我们节省了不少的资源和人力的投入。并且 Doris 支持 PB 级别的存储和分析，对于存量历史数据较大、增量数据较少的公司来说，仅用 5-8 个节点就足以支撑上线使用。</p><p><strong>社区活跃</strong></p><p>截止目前，Apache Doris 已开源数年，并已支持全国超 1500 企业生产使用，其健壮性、稳定性不可否认。另外社区非常活跃，SelectDB 为社区组建了专职的技术支持团队，任何问题均能快速反馈，提供无偿技术支持，使用起来没有后顾之忧。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="运行架构"><strong>运行架构</strong><a href="#运行架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35e83ee5515648779a8baaff2cc11d07~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>在对 Apache Doris 进一步测试验证之后，我们完全摒弃了之前使用 Hadoop、Hive、Spark 体系建立的数仓，决定基于 Doris 对架构进行重构，以 Apache Doris 作为数仓主体进行开发：</p><ul><li>数据集成：利用 DataX、Flink CDC 和 Apache Doris 的 Multi Catalog 功能等进行数据集成。</li><li>数据管理：利用 Apache Dolphinscheduler 进行脚本开发的生命周期管理、多租户人员的权限管理、数据质量监察等。</li><li>监控告警：采用 Grafana + Prometheus + Loki 进行监控告警，Doris 的各项监控指标可以在上面运行，解决了对组件资源和日志的监控问题。</li><li>数据服务：使用帆软 Report 为用户提供数据查询和分析服务，帆软支持表单制作和数据填报等功能，支持自助取数和自助分析。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据模型"><strong>数据模型</strong><a href="#数据模型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><strong>1）纵向分域</strong></p><p>房地产中介行业的大数据主题大致如下，一般会根据这些主题进行数仓建模。建模主题域核心围绕"企业用户"、"客户"、"房源"、"组织"等几个业务实体展开，进行维度表和事实表的创建。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7ff29e7e87144959328feb348eeb645~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>我们从前线到后勤，对业务数据总线进行了梳理，旨在整理业务实体和业务活动相关数据，如多个系统之间存在同一个业务实体，应统一为一个字段。梳理业务总线有助于掌握公司整体数据结构，便于维度建模等工作。</p><p>下图为我们简单的梳理部分房地产中介行业的业务总线：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2efc7d4692664627a8bdd2efb54a8ef7~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>2）横向分层</strong></p><p>数据分层是最常见的 5 层结构主要是利用 Apache Doris + Apache DolphinScheduler 进行层级数据之间 DAG 脚本调度。</p><p><strong>存储策略：</strong> 我们在 8 点到 24 点之间采用增量策略，0 点到 8 点执行全量策略。采用增量 + 全量的方式是为了在ODS 表因为记录的历史状态字段变更或者 CDC 出现数据未完全同步的情况下，可以及时进行全量补数修正。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17ff0792a5c140b8b8afc798561c1ad1~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>3）增量策略</strong></p><ol><li>where &gt;= "业务时间-1天或-1小时"</li></ol><p>增量的 SQL 语句不使用 <code>where="业务时间当天"</code>的原因是为了避免数据漂移情况发生，换言之，调度脚本之间存在时间差，如 23:58:00 执行了脚本，脚本的执行周期是 10 分钟/次，但是源库最后一条数据 23:59:00 才进来，这时候 <code>where="业务时间当天" </code>就会将该数据漏掉。</p><ol start="2"><li>每次跑增量脚本前获取表中最大的主键 ID 存入辅助表，<code>where &gt;= "辅助表记录ID"</code></li></ol><p>如果 Doris 表使用的是 Unique Key 模型，且恰好为组合主键，当主键组合在源表发生了变化，这时候 <code>where &gt;=" 业务时间-1天"</code>会记录该变化，把主键发生变化的数据 Load 进来，从而造成数据重复。而使用这种自增策略可有效避免该情况发生，且自增策略只适用于源表自带业务自增主键的情况。</p><ol start="3"><li>表分区</li></ol><p>如面对日志表等基于时间的自增数据，且历史数据和状态基本不会变更，数据量非常大，全量或快照计算压力非常大的场景，这种场景需要对 Doris 表进行建表分区，每次增量进行分区替换操作即可，同时需要注意数据漂移情况。</p><p><strong>4）全量策略</strong></p><ol><li>Truncate Table 清空表插入</li></ol><p>先清空表格后再把源表数据全量导入，该方式适用于数据量较小的表格和凌晨没有用户使用系统的场景。</p><ol start="2"><li><code>ALTER TABLE tbl1 REPLACE WITH TABLE tbl2 </code>表替换</li></ol><p>这种方式是一种原子操作，适合数据量大的全量表。每次执行脚本前先 Create 一张数据结构相同的临时表，把全量数据 Load 到临时表，再执行表替换操作，可以进行无缝衔接。</p><h1><strong>应用实践</strong></h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="业务模型">业务模型<a href="#业务模型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e414110d34a460a869c9c0a8cf5a23c~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><ul><li>业务模型是分钟级调度 ETL</li><li>初次部署建议配置：8 节点 2FE * 8BE 混合部署</li><li>节点配置：32C <em> 60GB </em> 2TB SSD</li><li>对于存量数据 TB 级、增量数据 GB 级的场景完全够用，如有需要可以进行滚动扩容。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="具体应用"><strong>具体应用</strong><a href="#具体应用" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ol><li>离线数据和日志数据集成利用 DataX 进行增量和全量调度，Datax 支持 CSV 格式和多种关系型数据库的Redear，而 Doris 在很早之前就提供了 DataX Doris writer 连接器。</li></ol><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71127fce1de54a518aed418af70faafe~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><ol start="2"><li>实时统计部分借助了 Flink CDC 对源表进行实时同步，利用 Doris 的物化视图或者 Aggregate 模型表进行实时指标的汇总处理，因我们只有部分指标需要实时处理，不希望产生过多的数据库连接和 Flink Job，因此我们使用 Dinky 的多源合并和整库同步功能，也可以自己简单实现一个Flink DataStream 多源合并任务，只通过一个 Job 可对多个 CDC 源表进行维护。值得一提的是， Flink CDC 和 Apache Doris 新版本支持 Schema Change 实时同步，在成本允许的前提下，可完全使用 CDC 的方式对 ODS 层进行改造。</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EXECUTE CDCSOURCE demo_doris WITH (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'connector' = 'mysql-cdc',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'hostname' = '127.0.0.1',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'port' = '3306',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'username' = 'root',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'password' = '123456',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'checkpoint' = '10000',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'scan.startup.mode' = 'initial',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'parallelism' = '1',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'table-name' = 'ods.ods_*,ods.ods_*',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.connector' = 'doris',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.fenodes' = '127.0.0.1:8030',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.username' = 'root',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.password' = '123456',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.doris.batch.size' = '1000',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.sink.max-retries' = '1',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.sink.batch.interval' = '60000',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.sink.db' = 'test',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.sink.properties.format' ='json',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.sink.properties.read_json_by_line' ='true',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.table.identifier' = '${schemaName}.${tableName}',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  'sink.sink.label-prefix' = '${schemaName}_${tableName}_1'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li>脚本语言采用 Shell + SQL 或纯 SQL 的形式，我们在 Apache DolphinScheduler 上进行脚本生命周期管理和发布，如 ODS 层，可以编写通用的 DataX Job 文件，通过传参的方式将 DataX Job 文件传参执行源表导入，无需在每一个源表编写不同的DataX Job ，支持统一配置参数和代码内容，维护起来非常方便。另外我们在 DolphinsSheduler 上对 Doris 的 ETL 脚本进行管理，还可以进行版本控制，能有效控制生产环境错误的发生，进行及时回滚。</li></ol><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ceb0780a1764df881c4ac6e9a3c7530~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfcfa5c5caf444ecbdf442685ef7065c~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><ol start="4"><li>发布 ETL 脚本后导入数据，可直接在帆软 Report 进行页面制作，基于登陆账号来控制页面权限，如需控制行级别、字段级别权限，可以制作全局字典，利用 SQL 方式进行控制。Doris 完全支持对账号的库表权限控制，这一点和 MySQL 的设置完全一样，使用起来非常便捷。</li></ol><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8e4112e2e714a4cb721f733e22b0c65~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>除以上之外，在容灾恢复、集群监控、数据安全等方面也有应用，比如利用 Doris 备份实现容灾恢复、Grafana+Loki 对集群进行指标规则告警、Supervisor 对节点组件进行守护进程监控，开启 Doris 审计日志对执行 SQL 效率进行监控等，因篇幅限制，此处不进行详细说明。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="优化经验">优化经验<a href="#优化经验" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ol><li><strong>数据导入</strong></li></ol><p>我们使用 DataX 进行离线数据导入，DataX 采用的是 Stream Load 方式导入，该方式可以通过参数控制导入批次流量，DataX 导入不需要借助计算引擎，开箱即用的特点非常方便。另外，Stream Load 导入是同步返回结果的，其他导入方式一般是异步返回结果，针对我们的架构来说，在 Dolphinscheduler上执行异步导入数据会误以为该脚本已经执行成功，影响其正常运行。如采用其他异步导入方式，建议在 Shell 脚本中 执行<code> show load</code> 再利用正则过滤状态进行判断。</p><ol start="2"><li><strong>数据模型</strong></li></ol><p>我们所有层级的表模型大部分采用 Unique Key 模型，该模型可有效保证数据脚本的结果幂等性，Unique Key 模型可以完美解决上游数据重复的问题，大家可以根据业务模式来选择不同的模型建表。</p><ol start="3"><li><strong>外部数据源读取</strong></li></ol><p>Catalog 方式可以使用 JDBC 外表连接，还可以对 Doris 生产集群数据进行读取，便于生产数据直接 Load 进测试服务器进行测试。另外，新版支持多数据源的 Catalog，可以基于 Catalog 对 ODS 层进行改造，无需使用 DataX 对ODS 层进行导入。</p><ol start="4"><li><strong>查询优化</strong></li></ol><p>尽量把非字符类型（如 int 类型、where 条件）中最常用的字段放在前排 36 个字节内，在点查表过程中可以快速过滤这些字段（毫秒级别），可以充分利用该特性进行数据表输出。</p><ol start="5"><li><strong>数据字典</strong></li></ol><p>利用 Doris 自带的 <code>information_schema</code> 元数据制作简单的数据字典，这在还未建立数据治理体系前非常重要，当部门人数较多的时候，沟通成本成为发展过程中最大的“拦路虎”，利用数据字典可快速对表格和字段的全局查找和释义，最低成本形成数仓人员的数据规范，减少人员沟通成本，提高开发效率。</p><h1>架构收益</h1><ul><li>自动取数导数：数据仓库的明细表可以定时进行取数、导数，自助组合维度进行分析。</li><li>效率提升：T+1 的离线时效从小时计降低至分钟级</li><li>查询延迟降低：面对上亿行数据的表，利用 Doris 在索引和点查方面的能力，实现即席查询 1 秒内响应，复杂查询 5 秒内响应。</li><li>运维成本降低：从数据集成到数据服务，只需维护少数组件就可以实现整体链路高效管理。</li><li>数据管理体系：Doris 数仓的搭建，使得数据管理体系初步形成，数据资产得以规范化的沉淀。</li><li>资源节省：只用了少数服务器，快速搭建起一套数据仓库，成功实现降本赋能。同时 Doris 超高的压缩比，将数据压缩了 70%，相较于 Hadoop 来说，存储资源的消耗大幅降低。</li></ul><h1>总结与规划</h1><p>目前我们已经完成数仓建设的初期目标，未来我们有计划基于 Apache Doris 进行中台化的改造，同时 Apache Doris在用户画像和人群圈选场景的能力十分强悍，支持 Bitmap 等格式进行导入和转换，提供了丰富的 Bitmap 分析函数等，后续我们也将利用这部分能力进行客户群体分析，加快数字化转型。</p><p>最后，感谢 Apache Doris 社区和 SelectDB 团队对美联物业的快速响应和无偿支持，希望 Doris 发展越来越好，也希望更多的企业可以尝试使用 Apache Doris。</p>]]></content>
        <author>
            <name>谢帮桂</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[赋能直播行业精细化运营，斗鱼基于 Apache Doris 的应用实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Douyu</id>
        <link href="https://doris.apache.org/zh-CN/blog/Douyu"/>
        <updated>2023-05-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读：</strong> 斗鱼是一家弹幕式直播分享网站，为用户提供视频直播和赛事直播服务。随着斗鱼直播、视频等业务的高速发展，用户增长和营收两大主营业务线对精细化运营的需求越发地迫切，各个细分业务场景对用户的差异化分析诉求也越发的强烈。为更好满足业务需求，斗鱼在 2022 年引入了 <a href="http://doris.apache.org" target="_blank" rel="noopener noreferrer">Apache Doris</a> 构建了一套比较相对完整的实时数仓架构，并在该基础上成功构建了标签平台以及多维分析平台，在此期间积累了一些建设及实践经验通过本文分享给大家。</p><p>作者<strong>｜</strong>斗鱼资深大数据工程师、OLAP 平台负责人 韩同阳</p><p>斗鱼是一家弹幕式直播分享网站，为用户提供视频直播和赛事直播服务。斗鱼以游戏直播为主，也涵盖了娱乐、综艺、体育、户外等多种直播内容。随着斗鱼直播、视频等业务的高速发展，用户增长和营收两大主营业务线对精细化运营的需求越发地迫切，各个细分业务场景对用户的差异化分析诉求也越发的强烈，例如增长业务线需要在各个活动（赛事、专题、拉新、招募等）中针对不同人群进行差异化投放，营收业务线需要根据差异化投放的效果及时调整投放策略。  </p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f85dc99bc9fd48cd9db1bd93faf51e23~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>根据业务场景的诉求和精细化运营的要求，我们从金字塔自下而上来看，需求大致可以分为以下几点：</p><ul><li>分析需求更加复杂、精细化，不再满足简单的聚合分析；数据时效性要求更高，不满足于 T+1 的分析效率，期望实现近实时、实时的分析效率。</li><li>业务场景多，细分业务场景既存在独立性、又存在交叉性，例如：针对某款游戏进行专题活动投放（主播、用户），进行人群圈选、AB 实验等，需要标签/用户画像平台支持。</li><li>多维数据分析的诉求强烈，需要精细化运营的数据产品支持。</li></ul><p><strong>为更好解决上述需求，我们的初步目标是：</strong></p><ul><li>构建离线/实时数仓，斗鱼的离线数仓体系已成熟，希望此基础上构建一套实时数仓体系；</li><li>基于离线/实时数仓构建通用的标签中台（用户画像平台），为业务场景提供人群圈选、AB实验等服务；</li><li>在标签平台的基础上构建适用于特定业务场景的多维分析和精细化运营的数据产品。</li></ul><p>在目标驱动下，斗鱼在原有架构的基础上进行升级改造、<strong>引入 <a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">Apache Doris</a> 构建了实时数仓体系，并在该基础上成功构建了标签平台以及多维分析平台</strong>，在此期间积累了一些建设及实践经验通过本文分享给大家。</p><h1>原有实时数仓架构</h1><p>斗鱼从 2018 年开始探索实时数仓的建设，并尝试在某些垂直业务领域应用，但受制于人力的配置及流计算组件发展的成熟度，直到 2020 年第一版实时数据架构才构建完成，架构图如下图所示：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/894c5aa438e64fb88dc8865a1a725720~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>原有实时数仓架构是一个典型的 Lambda 架构，上方链路为离线数仓架构，下方链路为实时数据仓架构。鉴于当时离线数仓体系已经非常成熟，使用 Lambda 架构足够支撑实时分析需求，但随着业务的高速发展和数据需求的不断提升，<strong>原有架构凸显出几个问题</strong>：</p><ul><li>在实际的流式作业开发中，缺乏对实时数据源的管理，在极端情况下接近于烟囱式接入实时数据流，无法关注数据是否有重复接入，也无法辨别数据是否可以复用。</li><li>离线、实时数仓完全割裂，实时数仓没有进行数仓分层，无法像离线数仓按层复用，只能面向业务定制化开发。</li><li>数据仓库数据服务于业务平台需要多次中转，且涉及到多个技术组件，ToB 应用亟需引入 OLAP 引擎缓解压力。</li><li>计算引擎和存储引擎涉及技术栈多，学习成本和运维难度也很大，无法进行合理有效管理。</li></ul><h1>新实时数仓架构</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="技术选型"><strong>技术选型</strong><a href="#技术选型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>带着以上的问题，我们希望引入一款成熟的、在业内有大规模落地经验的 OLAP 引擎来帮助我们解决原有架构的痛点。我们希望该 OLAP 引擎不仅要具备传统 OLAP 的优势（即 Data Analytics），还能更好地支持数据服务（Data Serving）场景，比如标签数据需要明细级的查询、实时业务数据需要支持点更新、高并发以及大数据量的复杂 Join 。除此之外，我们希望该 OLAP 引擎可以便捷、低成本的的集成到 Lambda 架构下的离线/实时数仓架构中。<strong>立足于此，我们在技术选型时对比了市面上的几款 OLAP 引擎，如下图所示</strong>：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eecaaaf523ba4fefb77cf2ebc1871357~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>根据对选型的要求，<strong>我们发现 Apache Doris 可以很好地满足当前业务场景及诉求，同时也兼顾了低成本的要求，因此决定引入 Doris 进行升级尝试</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="架构设计"><strong>架构设计</strong><a href="#架构设计" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>我们在 2022 年引入了 Apache Doris ，并基于 Apache Doris 构建了一套比较相对完整的实时数仓架构，如下图所示。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4b304cb38ff4582b3292c52af2ba280~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>总的来说，引入 Doris 后为整体架构带来几大变化：</p><ul><li>统一了计算平台（玄武计算），底层引擎支持 Flink、Spark 等组件，接入层支持统一 SQL 和 JAR 包接入。</li><li>引入 Doris 后，我们将实时数仓分为 ODS、DWD、DWS、ADS 层，部分中间层实时数据直接使用 Doris 进行存储；</li><li>构建了基于 Doris 的 HOLAP 多维分析平台，直接服务于业务；简化了原来需要通过 Hive 进行预计算的加工链路，逐步替换使用难度和运维难度相对较高的 ClickHouse；</li><li>下游应用的数据存储从之前的 MySQL 和 HBase 更换为 Doris，可以在数据集市和大宽表的数据服务场景下直接查询 Doris。</li><li>支持混合 IDC（自建和云厂商）。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="overwrite-语义实现">Overwrite 语义实现<a href="#overwrite-语义实现" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Apache Doris 支持原子替换表和分区，我们在计算平台（玄武平台）整合 Doris Spark Connector 时进行了定制，且在 Connector 配置参数上进行扩展、增加了“Overwrite”模式。</p><p>当 Spark 作业提交后会调用 Doris 的接口，获取表的 Schema 信息和分区信息。</p><ul><li>如果为非分区表：先创建目标表对应的临时表，将数据导入到临时表中，导入后进行原子替换，如导入失败则清理临时表；</li><li>如果是动态分区表：先创建目标分区对应的临时分区，将数据导入临时分区，导入后进行原子替换，如导入失败则清理临时分区；</li><li>如果是非动态分区：需要扩展 Doris Spark Connector 参数配置分区表达式，配完成后先创建正式目标分区、再创建其临时分区，将数据导入到临时分区中，导入后进行原子替换，如导入失败则清理临时分区。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="架构收益">架构收益<a href="#架构收益" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过架构升级及二次开发，我们获得了 3 个明显的收益：</p><ul><li>构建了规范、完善、计算统一的实时数仓平台</li><li>构建了统一混合 OLAP 平台，既支持 MOLAP，又支持 ROLAP，大部分多维分析需求均由该平台实现。</li><li>面对大批量数据导入的场景，任务吞入率和成功率提升了 50%。</li></ul><h1>Doris 在标签中台的应用</h1><p>标签中台（也称用户画像平台）是斗鱼进行精准运营的重要平台之一，承担了各业务线人群圈选、规则匹配、A/B 实验、活动投放等需求。接下来看下 Doris 在标签中台是如何应用的。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="原标签中台架构">原标签中台架构<a href="#原标签中台架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a139e7f853d246f2a482877f6695dfc9~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>上图为斗鱼原来的标签中台架构，离线标签在数仓中加工完成后合入宽表，将最终数据写入 HBase 中，实时标签使用 Flink 加工，加工完直接写入到 HBase 中。</p><p>终端 APP 在使用标签中台时，主要解决两种业务需求：</p><ul><li>人群圈选，即通过标签和规则找到符合条件的人。</li><li>规则匹配，即当有一个用户，找出该用户在指定的业务场景下符合哪些已配置的规则，也可以理解是“人群圈选“的逆方向。</li></ul><p>在应对这两种场需求中，原标签中台架构出现了两个问题：</p><ul><li>实时标签链路：Flink 计算长周期实时指标时稳定性较差且耗费资源较高，任务挂掉之后由于数据周期较长，导致 Checkpoint 恢复很慢；</li><li>人群圈选：Spark 人群圈选效率较低，特别是在实时标签的时效性上。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新标签中台架构">新标签中台架构<a href="#新标签中台架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/264534a90f5a4b0db757bbd97cbf0bba~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>引入 Apache Doris 之后，我们对标签中台架构的进行了改进，主要改进集中在实时链路和标签数据存储这两个部分：</p><ul><li>实时标签链路：仍然是通过实时数据源到 Kafka 中，通过 Flink 进行实时加工；不同的是，我们将一部分加工逻辑迁移到 Doris 中进行计算，长周期实时指标的计算从单一的 Flink 计算转移到了 Flink + Doris 中进行；</li><li>标签数据存储：从 HBase 改成了 Doris，利用 Doris 聚合模型的部分更新特性，将离线标签和实时标签加工完之后直接写入到 Doris 中。</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-离线实时标签混合圈人"><strong>1. 离线/实时标签混合圈人</strong><a href="#1-离线实时标签混合圈人" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea2b504bfb3a425c8191f9c5b49695cd~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><ul><li>简化存储：原存储在 HBase 中的大宽表，改为在 Doris 中分区存储，其中离线标签 T+1 更新，实时标签 T 更新、T+1 采用离线数据覆盖矫正。</li><li>查询简化：<strong>面对人群圈选场景</strong>，无需利用 Spark 引擎，可直接在标签中台查询服务层，将圈选规则配置解析成 SQL 在 Doris 中执行、并获得最终的人群，大大提高了人群圈选的效率。<strong>面对规则匹配场景</strong>，使用 Redis 缓存 Doris 中的热点数据，以降低响应时间。</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-长周期实时标签计算原链路"><strong>2. 长周期实时标签计算原链路</strong><a href="#2-长周期实时标签计算原链路" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>长周期实时标签：计算实时标签时所需的数据周期较长，部分标签还需要采用历史数据（离线）合并实时数据流一起进行计算的场景。</p><p><strong>使用前：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c160d25ef8f84729b04da093f0ee98e6~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>从原来的计算链路中可知，计算长周期的实时标签时会涉及到维度补充、历史数据 Merge，在经过几步加工最终将数据写入到 HBase 中。</p><p>在实际使用中发现，在这个过程中 Merge 离线聚合的数据会使链路变得很复杂，往往一个实时标签需要多个任务参与才能完成计算；另外聚合逻辑复杂的实时标签一般需要多次聚合计算，任意一个中间聚合资源分配不够或者不合理，都有可能出现反压或资源浪费的问题，从而使整个任务调试起来特别困难，同时链路过长运维管理也很麻烦，稳定性也比较低。</p><p><strong>使用后：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/156b5b5531ac4202943554b23e8455a6~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>我们在长周期指标计算实时链路中加入了 Apache Doris，在  Flink 中只做维度补充和轻度加工汇总，只关注短的实时数据流，对于需要 Merge 的离线数据，Merge 的计算逻辑转移到 Doris 中进行计算，另外 Doris 中的轻度汇总/明细数据有助于问题排查，同时任务稳定性也能提升。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用收益">使用收益<a href="#使用收益" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>目前标签中台底层有近 4 亿+条用户标签，每个用户标签 300+，已有 1W+ 用户规则人群，每天定时更新的人群数量达到 5K+。标签中台引入 Apache Doris 之后，<strong>单个人群平均圈选时间实现了分钟级到秒级的跨越</strong>，实时标签任务稳定性有所提高，实时标签任务的产出时间相较于之前约有 <strong>40% 的提升</strong>，资源使用成本大大降低。</p><h1>Doris 在多维数据分析平台的应用</h1><p>除以上所述应用及收益之外，Apache Doris 也助力内部多维数据分析平台——斗鱼 360 取得了较大的发展，受益于 Apache Doris 的 Rollup、物化视图以及向量化执行引擎，使原来需要预计算的场景可以直接导入明细数据到 Doris 中，简化了业务数据开发流程，提升了分析效率；Doris 兼容 MySQL 协议，并具有独立简单的分布式架构，使得业务开发人员入门使用也更容易，缩短了业务开发周期，有效降低了开发成本；同时我们原来基于 ClickHouse 的查询目前也全部切换到了 Doris 中进行。</p><p>目前我们用于多维分析场景的 Doris 集群共有两个，节点规模约 120 个，存储数据量达 90~100 TB，每天增量写入到 Doris 的数据约 900GB，其中查询 QPS 在 120 左右，Apache Doris 应对起来毫不费力，轻松自如。</p><p><em>因文章篇幅限制，该部分应用不再赘述，后续有机会与大家进行详细分享。</em>  </p><h1>未来展望</h1><p>未来随着 Apache Doris 在斗鱼更广泛业务场景的落地，我们将在可视化运维、问题快速定位排查等方面进行更多实践和深耕。我们关注到， Apache Doris 1.2.0 版本已经对 Multi Catalog 功能进行了支持，我们也计划对其进行探索、解锁更多使用场景，同时也期待即将发布 Apache Doris 2.x 版本的行列混存功能，更好的支持 Data Serving 场景。</p>]]></content>
        <author>
            <name>韩同阳</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[杭银消金基于 Apache Doris  的统一数据查询网关改造]]></title>
        <id>https://doris.apache.org/zh-CN/blog/HYXJ</id>
        <link href="https://doris.apache.org/zh-CN/blog/HYXJ"/>
        <updated>2023-04-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读：</strong> 随着业务量快速增长，数据规模的不断扩大，杭银消金早期的大数据平台在应对实时性更强、复杂度更高的的业务需求时存在瓶颈。为了更好的应对未来的数据规模增长，杭银消金于 2022 年 10 月正式引入 Apache Doris 1.2 对现有的风控数据集市进行了升级改造，利用 Multi Catalog 功能统一了 ES、Hive、GP 等数据源出口，实现了联邦查询，为未来统一数据查询网关奠定了基础；同时，基于 <a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">Apache Doris</a> 高性能、简单易用、部署成本低等诸多优势，也使得各大业务场景的查询分析响应实现了从分钟级到秒级的跨越。</p><p>杭银消费金融股份有限公司，成立于 2015 年 12 月，是杭州银行牵头组建的浙江省首家持牌消费金融公司，经过这几年的发展，在 2022 年底资产规模突破 400 亿，服务客户数超千万。公司秉承“数字普惠金融”初心，坚持服务传统金融覆盖不充分的、具有消费信贷需求的客户群体，以“<strong>数据、场景、风控、技术</strong>”为核心，依托大数据、人工智能、云计算等互联网科技，为全国消费者提供专业、高效、便捷、可信赖的金融服务。</p><h1><strong>业务需求</strong></h1><p>杭银消金业务模式是线上业务结合线下业务的双引擎驱动模式。为更好的服务用户，运用数据驱动实现精细化管理，基于当前业务模式衍生出了四大类的业务数据需求：</p><ul><li>预警类：实现业务流量监控，主要是对信贷流程的用户数量与金额进行实时监控，出现问题自动告警。</li><li>分析类：支持查询统计与临时取数，对信贷各环节进行分析，对审批、授信、支用等环节的用户数量与额度情况查询分析。</li><li>看板类：打造业务实时驾驶舱与 T+1 业务看板，提供内部管理层与运营部门使用，更好辅助管理进行决策。</li><li>建模类：支持多维模型变量的建模，通过算法模型回溯用户的金融表现，提升审批、授信、支用等环节的模型能力。</li></ul><h1>数据架构 1.0</h1><p>为满足以上需求，我们采用 Greenplum + CDH 融合的架构体系创建了大数据平台 1.0 ，如下图所示，大数据平台的数据源均来自于业务系统，我们可以从数据源的 3 个流向出发，了解大数据平台的组成及分工：</p><ul><li>业务系统的核心系统数据通过 CloudCanal 实时同步进入 Greenplum 数仓进行数据实时分析，为 BI 报表，数据大屏等应用提供服务，部分数据进入风控集市 Hive 中，提供查询分析和建模服务。</li><li>业务系统的实时数据推送到 Kafka 消息队列，经 Flink 实时消费写入 ES，通过风控变量提供数据服务，而 ES 中的部分数据也可以流入 Hive 中，进行相关分析处理。</li><li>业务系统的风控数据会落在 MongoDB，经过离线同步进入风控集市 Hive，Hive 数仓支撑了查询平台和建模平台，提供风控分析和建模服务。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/669b73289fd8400cbc067b2b11f887d9~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>我们将 ES 和</strong> <strong>Hive</strong> <strong>共同组成了风控数据集市</strong>，从上述介绍也可知，四大类的业务需求基本都是由风控数据集市来满足的，因此我们后续的改造升级主要基于风控数据集市来进行。在这之前，我们先了解一下风控数据集市 1.0 是如何来运转的。</p><p><strong>风控数据集市 1.0</strong></p><p>风控数据集市原有架构是基于 CDH 搭建的，由实时写入和离线统计分析两部分组成，整个架构包含了 ES、Hive、Greenplum 等核心组件，风控数据集市的数据源主要有三种：通过 Greenplum 数仓同步的业务系统数据、通过 MongoDB 同步的风控决策数据，以及通过 ES 写入的实时风控变量数据。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a7f283f3e514b6c8c1b7672ce520a45~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>实时流数据：</strong> 采用了 Kafka + Flink + ES 的实时流处理方式，利用 Flink 对 Kafka 的实时数据进行清洗，实时写入ES，并对部分结果进行汇总计算，通过接口提供给风控决策使用。</p><p><strong>离线风控数据：</strong> 采用基于 CDH 的方案实现，通过 Sqoop 离线同步核心数仓 GP 上的数据，结合实时数据与落在 MongoDB 上的三方数据，经数据清洗后统一汇总到 Hive 数仓进行日常的跑批与查询分析。</p><p><strong>需求满足情况：</strong></p><p>在大数据平台 1.0 的的支持下，我们的业务需求得到了初步的实现：</p><ul><li>预警类：基于 ES + Hive 的外表查询，实现了实时业务流量监控；</li><li>分析类：基于 Hive 实现数据查询分析和临时取数；</li><li>看板类：基于 Tableau +Hive 搭建了业务管理驾驶舱以及T+1 业务看板；</li><li>建模类：基于 Spark+Hive 实现了多维模型变量的建模分析；</li></ul><p>受限于 Hive 的执行效率，以上需求均在分钟级别返回结果，仅可以满足我们最基本的诉求，而面对秒级甚至毫秒级的分析场景，Hive 则稍显吃力。</p><p><strong>存在的问题：</strong></p><ul><li><strong>单表宽度过大，影响查询性能</strong>。风控数据集市的下游业务主要以规则引擎与实时风控服务为主，因规则引擎的特殊性，公司在数据变量衍生方面资源投入较多，某些维度上的衍生变量会达到几千甚至上万的规模，这将导致 Hive 中存储的数据表字段非常多，部分经常使用的大宽表字段数量甚至超过上千，过宽的大宽表非常影响实际使用中查询性能。</li><li><strong>数据规模庞大，维护成本高。</strong> 目前 Hive 上的风控数据集市已经有存量数据在百 T 以上，面对如此庞大的数据规模，使用外表的方式进行维护成本非常高，数据的接入也成为一大难题。</li><li><strong>接口服务不稳定。</strong> 由风控数据集市离线跑批产生的变量指标还兼顾为其他业务应用提供数据服务的职责，目前 Hive 离线跑批后的结果会定时推送到 ES 集群（每天更新的数据集比较庞大，接口调用具有时效性），推送时会因为 IO 过高触发 ES 集群的 GC 抖动，导致接口服务不稳定。</li></ul><p>除此之外，风控分析师与建模人员一般通过 Hive &amp; Spark 方式进行数据分析建模，这导致随着业务规模的进一步增大，T+1 跑批与日常分析的效率越来越低，风控数据集市改造升级的需求越发强烈。</p><h1>技术选型</h1><p>基于业务对架构提出的更高要求，我们期望引入一款强劲的 OLAP 引擎来改善架构，因此我们于 2022 年 9 月份对 ClickHouse 和 Apache Doris 进行了调研，调研中发现 Apache Doris 具有高性能、简单易用、实现成本低等诸多优势，而且 Apache Doris 1.2 版本非常符合我们的诉求，原因如下：</p><p><strong>宽表查询性能优异</strong>：从官方公布的测试结果来看，1.2 Preview 版本在 SSB-Flat 宽表场景上相对 1.1.3 版本整体性能提升了近 4 倍、相对于 0.15.0 版本性能提升了近 10 倍，在 TPC-H 多表关联场景上较 1.1.3 版本上有近 3 倍的提升、较 0.15.0 版本性能提升了 11 倍以上，多个场景性能得到飞跃性提升。</p><p><strong>便捷的数据接入框架以及联邦数据分析能力：</strong> Apache Doris 1.2 版本推出的 Multi Catalog 功能可以构建完善可扩展的数据源连接框架，<strong>便于快速接入多类数据源，提供基于各种异构数据源的联邦查询和写入能力。</strong> 目前 Multi-Catalog 已经支持了 Hive、Iceberg、Hudi 等数据湖以及 MySQL、Elasticsearch、Greenplum 等数据库，全面覆盖了我们现有的组件栈，基于此能力有希望通过 Apache Doris 来打造统一数据查询网关。</p><p><strong>生态丰富：</strong> 支持 Spark Doris Connector、Flink Doris Connector，方便离线与实时数据的处理，缩短了数据处理链路耗费的时间。</p><p><strong>社区活跃：</strong> Apache Doris 社区非常活跃，响应迅速，并且 SelectDB 为社区提供了一支专职的工程师团队，为用户提供技术支持服务。</p><h1>数据架构 2.0</h1><p><strong>风控数据集市 2.0</strong></p><p>基于对 Apache Doris 的初步的了解与验证，22 年 10 月在社区的支持下我们正式引入 Apache Doris 1.2.0 Preview 版本作为风控数据集市的核心组件，Apache Doris 的 Multi Catalog 功能助力大数据平台统一了 ES、Hive、Greenplum 等数据源出口，通过 Hive Catalog 和 ES Catalog 实现了对 Hive &amp; ES 等多数据源的联邦查询，并且支持 Spark-Doris-Connector，可以实现数据 Hive 与 Doris 的双向流动，与现有建模分析体系完美集成，在短期内实现了性能的快速提升。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f0597006e834176b50f230c58860e9b~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>大数据平台 2.0</strong></p><p>风控数据集市调整优化之后，大数据平台架构也相应的发生了变化，如下图所示，仅通过 Doris 一个组件即可为数据服务、分析平台、建模平台提供数据服务。</p><p>在最初进行联调适配的时候，Doris 社区和 SelectDB 支持团队针对我们提出的问题和疑惑一直保持高效的反馈效率，给于积极的帮助和支持，快速帮助我们解决在生产上遇到的问题。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2abdee1b58a144528a3cd7d52ee948bc~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>需求实现情况：</strong></p><p>在大数据平台 2.0 的加持下，业务需求实现的方式也发生了变更，主要变化如下所示</p><ul><li>预警类：基于 ES Catalog+ Doris 实现了对实时数据的查询分析。在架构 1.0 中，实时数据落在 ES 集群上，通过 Hive 外表进行查询分析，查询结果以分钟级别返回；而在 Doris 1.2 集成之后， 使用 ES Catalog 访问 ES，可以实现对 ES 数据秒级统计分析。</li><li>分析类：基于 Hive Catalog + Doris 实现了对现有风控数据集市的快速查询。目前 Hive 数据集市存量表在两万张左右，如果通过直接创建 Hive 外部表的方式，表结构映射关系的维护难度与数据同步成本使这一方式几乎不可能实现。而 Doris 1.2 的 Multi Catalog 功能则完美解决了这个问题，只需要创建一个 Hive Catalog，就能对现有风控数据集市进行查询分析，既能提升查询性能，还减少了日常查询分析对跑批任务的资源影响。</li><li>看板类：基于 Tableau + Doris 聚合展示业务实时驾驶舱和 T+1 业务看板，最初使用 Hive 时，报表查询需要几分钟才能返回结果，而 Apache Doris 则是秒级甚至是毫秒级的响应速度。</li><li>建模类：基于 Spark+Doris 进行聚合建模。利用 Doris1.2 的 Spark-Doris-Connector功 能，实现了 Hive 与 Doris 数据双向同步，满足了 Spark 建模平台的功能复用。同时增加了 Doris 数据源，基础数据查询分析的效率得到了明显提升，建模分析能力的也得到了增强。</li></ul><p>在 Apache Doris 引入之后，以上四个业务场景的查询耗时基本都实现了从分钟级到秒级响应的跨越，性能提升十分巨大。</p><p><strong>生产环境集群监控</strong></p><p>为了快速验证新版本的效果，我们在生产环境上搭建了两个集群，目前生产集群的配置是 4 个 FE + 8个 BE，单个节点是配置为 64 核+ 256G+4T，备用集群为 4 个 FE + 4 个 BE 的配置，单个节点配置保持一致。</p><p>集群监控如下图所示：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfbf810e93e346d2bbde7d80fddb3f59~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>可以看出，Apache Doris 1.2 的查询效率非常高，原计划至少要上 10 个节点，而在实际使用下来，我们发现当前主要使用的场景均是以 Catalog 的方式查询，因此集群规模可以相对较小就可以快速上线，也不会破坏当前的系统架构，兼容性非常好。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据集成方案">数据集成方案<a href="#数据集成方案" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>前段时间，Apache Doris 1.2.2 版本已经发布，为了更好的支撑应用服务，我们使用 Apache Doris 1.2.2 与 DolphinScheduler 3.1.4 调度器、SeaTunnel 2.1.3 数据同步平台等开源软件实现了集成，以便于数据定时从 Hive 抽取到 Doris 中。整体的数据集成方案如下：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b029412dbb143369935fdcaa71bcc19~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>在当前的硬件配置下，数据同步采用的是 DolphinScheduler 的 Shell 脚本模式，定时调起 SeaTunnel 的脚本，数据同步任务的配置文件如下：</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> env{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  spark</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"hive2doris-template"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  spark</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">executor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">instances </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  spark</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">executor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">cores </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  spark</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">executor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">memory </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"20g"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spark {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  spark</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">sql</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">catalogImplementation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"hive"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  hive {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pre_sql </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"select * from ods.demo_tbl where dt='2023-03-09'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result_table_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ods_demo_tbl"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">transform {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sink {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  doris {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      fenodes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"192.168.0.10:8030,192.168.0.11:8030,192.168.0.12:8030,192.168.0.13:8030"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">user</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      password </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"XXX"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">database</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ods</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">table</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ods_demo_tbl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      batch_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">500000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      max_retries </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      doris</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">column_separator </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\t"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>该方案成功实施后，资源占用、计算内存占用有了明显的降低，查询性能、导入性能有了大幅提升：</strong></p><ol><li>存储成本降低</li></ol><p>使用前：Hive 原始表包含 500 个字段，单个分区数据量为 1.5 亿/天，在 HDFS 上占用约 810G 的空间。</p><p>使用后：我们通过 SeaTunnel 调起 Spark on YARN 的方式进行数据同步，可以在 <strong>40 分钟左右</strong>完成数据同步，同步后数据占用 <strong>270G 空间，存储资源仅占之前的 1/3</strong>。</p><ol start="2"><li>计算内存占用降低，性能提升显著</li></ol><p>使用前：上述表在 Hive 上进行 Group By 时，占用 YARN 资源 720 核 1.44T 内存，需要 <strong>162 秒</strong>才可返回结果；</p><p>使用后：</p><ul><li>通过 Doris 调用 Hive Catalog 进行聚合查询，在设置 <code>set exec_mem_limit=16G</code> 情况下用时 <strong>58.531 秒，查询耗时较之前减少了近 2/3；</strong></li><li>在同等条件下，在 Doris 中执行相同的的操作可以在 <strong>0.828 秒</strong>就能返回查询结果，性能增幅巨大。</li></ul><p>具体效果如下：</p><p>（1）Hive 查询语句，用时 162 秒。</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">product_no   </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> ods</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">demo_tbl </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> dt</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'2023-03-09'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> product_no</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>（2）Doris 上 Hive Catalog 查询语句，用时 58.531 秒。</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">set</span><span class="token plain"> exec_mem_limit</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">16</span><span class="token plain">G；</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">product_no   </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> hive</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ods</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">demo_tbl </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> dt</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'2023-03-09'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> product_no</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>（3）Doris 上本地表查询语句，<strong>仅用时0.828秒</strong>。</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">product_no   </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> ods</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">demo_tbl </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> dt</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'2023-03-09'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> product_no</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li>导入性能提升</li></ol><p>使用前：Hive 原始表包含 40 个字段，单个分区数据量 11 亿/天，在 HDFS 上占用约 806G 的空间</p><p>使用后：通过 SeaTunnel 调起 Spark on YARN 方式进行数据同步，可以在 11 分钟左右完成数据同步，即 <strong>1 分钟同步约一亿条数据</strong>，同步后占用 378G 空间。</p><p>可以看出，在数据导入性能的提升的同时，资源也有了较大的节省，主要得益于对以下几个参数进行了调整：</p><p><code>push_write_mbytes_per_sec</code>：BE 磁盘写入限速，300M</p><p><code>push_worker_count_high_priority:</code> 同时执行的 push 任务个数，15</p><p><code>push_worker_count_normal_priority</code>: 同时执行的 push 任务个数，15</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e9b5d64898843afb26b60a3d5dfb705~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="架构收益"><strong>架构收益</strong><a href="#架构收益" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><strong>（1）统一数据源出口，查询效率显著提升</strong></p><p>风控数据集市采用的是异构存储的方式来存储数据，Apache Doris 的 Multi Catalog 功能成功统一了 ES、Hive、GP 等数据源出口，实现了联邦查询。 同时，Doris 本身具有存储能力，可支持其他数据源中的数据通过外表插入内容的方式快速进行数据同步，真正实现了数据门户。此外，Apache Doris 可支持聚合查询，在向量化引擎的加持下，查询效率得到显著提升。</p><p><strong>（2）</strong> <strong>Hive</strong> <strong>任务拆分，提升集群资源利用率</strong></p><p>我们将原有的 Hive 跑批任务跟日常的查询统计进行了隔离，以提升集群资源的利用效率。目前 YARN 集群上的任务数量是几千的规模，跑批任务占比约 60%，临时查询分析占比 40%，由于资源限制导致日常跑批任务经常会因为资源等待而延误，临时分析也因资源未及时分配而导致任务无法完成。当部署了 Doris 1.2 之后，对资源进行了划分，完全摆脱 YARN 集群的资源限制，跑批与日常的查询统计均有了明显的改善，<strong>基本可以在秒级得到分析结果</strong>，同时也减轻了数据分析师的工作压力，提升了用户对平台的满意度。</p><p><strong>（3）提升了数据接口的稳定性，数据写入性能大幅提升</strong></p><p>之前数据接口是基于 ES 集群的，当进行大批量离线数据推送时会导致 ES 集群的 GC 抖动，影响了接口稳定性，经过调整之后，我们将接口服务的数据集存储在 Doris 上，Doris 节点并未出现抖动，实现数据快速写入，成功提升了接口的稳定性，同时 Doris 查询在数据写入时影响较小，数据写入性能较之前也有了非常大的提升，<strong>千万级别的数据可在十分钟内推送成功</strong>。</p><p><strong>（4）Doris 生态丰富，迁移方便成本较低。</strong></p><p>Spark-Doris-Connector 在过渡期为我们减轻了不少的压力，当数据在 Hive 与 Doris 共存时，部分 Doris 分析结果通过 Spark 回写到 Hive 非常方便，当 Spark 调用 Doris 时只需要进行简单改造就能完成原有脚本的复用，迁移方便、成本较低。</p><p><strong>（5）支持横向热部署，集群扩容、运维简单。</strong></p><p>Apache Doris 支持横向热部署，集群扩容方便，节点重启可以在在秒级实现，可实现无缝对接，减少了该过程对业务的影响； 在架构 1.0 中，当 Hive 集群与 GP 集群需要扩容更新时，配置修改后一般需要较长时间集群才可恢复，用户感知比较明显。而 Doris 很好的解决了这个问题，实现用户无感知扩容，也降低了集群运维的投入。</p><h1><strong>未来与展望</strong></h1><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fe9b6019532451e814e1f709a23d510~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>当前在架构 2.0 中的 Doris 集群在大数据平台中的角色更倾向于查询优化，大部分数据还集中维护在 Hive 集群上，未来我们计划在升级架构 3.0 的时候，完成以下改造：</p><ul><li>实时全量数据接入：利用 Flink 将所有的实时数据直接接入 Doris，不再经过 ES 存储；</li><li>数据集数据完整性：利用 Doris 构建实时数据集市的原始层，利用 FlinkCDC 等同步工具将业务库 MySQL与决策过程中产生的 MongoDB 数据实时同步到 Doris，最大限度将现有数据都接入 Doris 的统一平台，保证数据集数据完整性。</li><li>离线跑批任务迁移：将现有 Hive&amp;Spark 中大部分跑批任务迁移至 Doris，提升跑批效率；</li><li>统一查询分析出口：将所有的查询分析统一集中到 Doris，完全统一数据出口，实现统一数据查询网关，使数据的管理更加规范化；</li><li>强化集群稳定扩容：引入可视化运维管理工具对集群进行维护和管理，使 Doris 集群能够更加稳定支撑业务扩展。</li></ul><h1>总结与致谢</h1><p>Apache Doris1.2 是社区在版本迭代中的重大升级，借助 Multi Catalog 等优异功能能让 Doris 在 Hadoop 相关的大数据体系中快速落地，实现联邦查询；同时可以将日常跑批与统计分析进行解耦，有效提升大数据平台的的查询性能。</p><p>作为第一批 Apache Doris1.2 的用户，我们深感荣幸，同时也十分感谢 Doris 团队的全力配合和付出，可以让 Apache Doris 快速落地、上线生产，并为后续的迭代优化提供了可能。</p><p>Apache Doris 1.2 值得大力推荐，希望大家都能从中受益，祝愿 Apache Doris 生态越来越繁荣，越来越好！</p>]]></content>
        <author>
            <name>杭银消金大数据团队</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[并发提升 20+ 倍、单节点数万 QPS，Apache Doris 高并发特性解读]]></title>
        <id>https://doris.apache.org/zh-CN/blog/High_concurrency</id>
        <link href="https://doris.apache.org/zh-CN/blog/High_concurrency"/>
        <updated>2023-04-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>随着用户规模的极速扩张，越来越多用户将 Apache Doris 用于构建企业内部的统一分析平台，这一方面需要 <a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">Apache Doris</a> 去承担更大业务规模的处理和分析——既包含了更大规模的数据量、也包含了更高的并发承载，而另一方面，也意味着需要应对企业更加多样化的数据分析诉求，从过去的统计报表、即席查询、交互式分析等典型 OLAP 场景，拓展到推荐、风控、标签画像以及 IoT 等更多业务场景中，而数据服务（Data Serving）就是其中具有代表性的一类需求。Data Serving 通常指的是向用户或企业客户提供数据访问服务，用户使用较为频繁的查询模式一般是按照 Key 查询一行或多行数据，例如：</p><ul><li>订单详情查询</li><li>商品详情查询</li><li>物流状态查询</li><li>交易详情查询</li><li>用户信息查询</li><li>用户画像属性查询</li><li>...</li></ul><p>与面向大规模数据扫描与计算的 Adhoc 不同，<strong>Data Serving 在实际业务中通常呈现为高并发的点查询——</strong> <strong>查询返回的数据量较少、通常只需返回一行或者少量行数据，但对于查询耗时极为敏感、期望在毫秒内返回查询结果，并且面临着超高并发的挑战。</strong></p><p>在过去面对此类业务需求时，通常采取不同的系统组件分别承载对应的查询访问。OLAP 数据库一般是基于列式存储引擎构建，且是针对大数据场景设计的查询框架，通常以数据吞吐量来衡量系统能力，因此在 Data Serving 高并发点查场景的表现往往不及用户预期。基于此，用户一般引入 Apache HBase 等 KV 系统来应对点查询、Redis 作为缓存层来分担高并发带来的系统压力。而这样的架构往往比较复杂，存在冗余存储、维护成本高的问题。融合统一的分析范式为 Apache Doris 能承载的工作负载带来了挑战，也让我们更加系统化地去思考如何更好地满足用户在此类场景的业务需求。基于以上思考，<strong>在即将发布的 2.0 版本中，我们在原有功能基础上引入了一系列面向点查询的优化手段，单节点可达数万 QPS 的超高并发，极大拓宽了适用场景的能力边界。</strong></p><h1><strong>#  如何应对高并发查询？</strong></h1><p>一直以来高并发就是 Apache Doris 的优势之一。对于高并发查询，其核心在于如何平衡有限的系统资源消耗与并发执行带来的高负载。换而言之，需要最大化降低单个 SQL 执行时的 CPU、内存和 IO 开销，其关键在于减少底层数据的 Scan 以及随后的数据计算，其主要优化方式有如下几种：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="分区分桶裁剪">分区分桶裁剪<a href="#分区分桶裁剪" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Apache Doris 采用两级分区，第一级是 Partition，通常可以将时间作为分区键。第二级为 Bucket，通过 Hash 将数据打散至各个节点中，以此提升读取并行度并进一步提高读取吞吐。通过合理地划分区分桶，可以提高查询性能，以下列查询语句为例：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">select * from user_table where id = 5122 and create_date = '2022-01-01'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>用户以<code>create_time</code>作为分区键、ID 作为分桶键，并设置了 10 个 Bucket， 经过分区分桶裁剪后可快速过滤非必要的分区数据，最终只需读取极少数据，比如 1 个分区的 1 个 Bucket 即可快速定位到查询结果，最大限度减少了数据的扫描量、降低了单个查询的延时。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="索引">索引<a href="#索引" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>除了分区分桶裁剪， Doris 还提供了丰富的索引结构来加速数据的读取和过滤。索引的类型大体可以分为智能索引和二级索引两种，其中智能索引是在 Doris 数据写入时自动生成的，无需用户干预。智能索引包括前缀索引和 ZoneMap 索引两类：</p><ul><li><strong>前缀稀疏索引（Sorted Index）</strong> 是建立在排序结构上的一种索引。Doris 存储在文件中的数据，是按照排序列有序存储的，Doris 会在排序数据上每 1024 行创建一个稀疏索引项。索引的 Key 即当前这 1024 行中第一行的前缀排序列的值，当用户的查询条件包含这些排序列时，可以通过前缀稀疏索引快速定位到起始行。</li><li><strong>ZoneMap 索引</strong>是建立在 Segment 和 Page 级别的索引。对于 Page 中的每一列，都会记录在这个 Page 中的最大值和最小值，同样，在 Segment 级别也会对每一列的最大值和最小值进行记录。这样当进行等值或范围查询时，可以通过 MinMax 索引快速过滤掉不需要读取的行。</li></ul><p>二级索引是需要用手动创建的索引，包括 Bloom Filter 索引、Bitmap 索引，以及 2.0 版本新增的 Inverted 倒排索引和 NGram Bloom Filter 索引，在此不细述，可从官网文档先行了解，后续将有系列文章进行解读。</p><p><strong>官网文档：</strong></p><ul><li>倒排索引：<a href="https://doris.apache.org/zh-CN/docs/dev/data-table/index/inverted-index" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/data-table/index/inverted-index</a></li><li>NGram BloomFilter 索引：<a href="https://doris.apache.org/zh-CN/docs/dev/data-table/index/ngram-bloomfilter-index" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/data-table/index/ngram-bloomfilter-index</a></li></ul><p>我们以下列查询语句为例：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">select * from user_table where id &gt; 10 and id &lt; 1024</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>假设按照 ID 作为建表时指定的 Key， 那么在 Memtable 以及磁盘上按照 ID 有序的方式进行组织，查询时如果过滤条件包含前缀字段时，则可以使用前缀索引快速过滤。Key 查询条件在存储层会被划分为多个 Range，按照前缀索引做二分查找获取到对应的行号范围，由于前缀索引是稀疏的，所以只能大致定位出行的范围。随后过一遍 ZoneMap、Bloom Filter、Bitmap 等索引，进一步缩小需要 Scan 的行数。<strong>通过索引，大大减少了需要扫描的行数，减少 CPU 和 IO 的压力，整体大幅提升了系统的并发能力。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="物化视图">物化视图<a href="#物化视图" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>物化视图是一种典型的空间换时间的思路，其本质是根据预定义的 SQL 分析语句执⾏预计算，并将计算结果持久化到另一张对用户透明但有实际存储的表中。在需要同时查询聚合数据和明细数据以及匹配不同前缀索引的场景，<strong>命中物化视图时可以获得更快的查询相应，同时也避免了大量的现场计算，因此可以提高性能表现并降低资源消耗</strong>。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 对于聚合操作， 直接读物化视图预聚合的列</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">create materialized view store_amt as select store_id, sum(sale_amt) from sales_records group by store_id;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT store_id, sum(sale_amt) FROM sales_records GROUP BY store_id;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 对于查询， k3满足物化视图前缀列条件， 走物化视图加速查询</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE MATERIALIZED VIEW mv_1 as SELECT k3, k2, k1 FROM tableA ORDER BY k3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">select k1, k2, k3 from table A where k3=3;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="runtime-filter">Runtime Filter<a href="#runtime-filter" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>除了前文提到的用索引来加速过滤查询的数据， Doris 中还额外加入了动态过滤机制，即 Runtime Filter。在多表关联查询时，我们通常将右表称为 BuildTable、左表称为 ProbeTable，左表的数据量会大于右表的数据。在实现上，会首先读取右表的数据，在内存中构建一个 HashTable（Build）。之后开始读取左表的每一行数据，并在 HashTable 中进行连接匹配，来返回符合连接条件的数据（Probe）。而 Runtime Filter 是在右表构建 HashTable 的同时，为连接列生成一个过滤结构，可以是 Min/Max、IN 等过滤条件。之后把这个过滤列结构下推给左表。这样一来，左表就可以利用这个过滤结构，对数据进行过滤，从而减少 Probe 节点需要传输和比对的数据量。在大多数 Join 场景中，Runtime Filter 可以实现节点的自动穿透，将 Filter 穿透下推到最底层的扫描节点或者分布式 Shuffle Join 中。<strong>大多数的关联查询 Runtime Filter 都可以起到大幅减少数据读取的效果，从而加速整个查询的速度。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="opn-优化技术">OPN 优化技术<a href="#opn-优化技术" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在数据库中查询最大或最小几条数据的应用场景非常广泛，比如查询满足某种条件的时间最近 100 条数据、查询价格最高或者最低的几个商品等，此类查询的性能对于实时分析非常重要。在 Doris 中引入了 TOPN 优化来解决大数据场景下较高的 IO、CPU、内存资源消耗：</p><ul><li><p>首先从 Scanner 层读取排序字段和查询字段，利用堆排序保留 TOPN 条数据，实时更新当前已知的最大或最小的数据范围， 并动态下推至 Scanner</p></li><li><p>Scanner 层根据范围条件，利用索引等加速跳过文件和数据块，大幅减少读取的数据量。</p></li><li><p>在宽表中用户通常需要查询字段数较多， 在 TOPN 场景实际有效的数据仅 N 条， 通过将读取拆分成两阶段， 第一阶段根据少量的排序列、条件列来定位行号并排序，第二阶段根据排序后并取 TOPN 的结果得到行号反向查询数据，这样可以大大降低 Scan 的开销</p></li></ul><p><strong>通过以上一系列优化手段，可以将不必要的数据剪枝掉，减少读取、排序的数据量，显著降低系统 IO、CPU 以及内存资源消耗</strong>。此外，还可以利用包括 SQL Cache、Partition Cache 在内的缓存机制以及 Join 优化手段来进一步提升并发，由于篇幅原因不在此详述。</p><h1><strong>#  Apache Doris 2.0 新特性揭秘</strong></h1><p>通过上一段中所介绍的内容，Apache Doris 实现了单节点上千 QPS 的并发支持。但在一些超高并发要求（例如数万 QPS）的 Data Serving 场景中，仍然存在瓶颈：</p><ul><li>列式存储引擎对于行级数据的读取不友好，宽表模型上列存格式将大大放大随机读取 IO；</li><li>OLAP 数据库的执行引擎和查询优化器对于某些简单的查询（如点查询）来说太重，需要在查询规划中规划短路径来处理此类查询；</li><li>SQL 请求的接入以及查询计划的解析与生成由 FE 模块负责，使用的是 Java 语言，在高并发场景下解析和生成大量的查询执行计划会导致高 CPU 开销；</li><li>……</li></ul><p>带着以上问题，Apache Doris 在分别从降低 SQL 内存 IO 开销、提升点查执行效率以及降低 SQL 解析开销这三个设计点出发，进行一系列优化。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="行式存储格式row-store-format">行式存储格式（Row Store Format）<a href="#行式存储格式row-store-format" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>与列式存储格式不同，行式存储格式在数据服务场景会更加友好，数据按行存储、应对单次检索整行数据时效率更高，可以极大减少磁盘访问次数。<strong>因此在 Apache Doris 2.0 版本中，我们引入了行式存储格式，将行存编码后存在单独的一列中，通过额外的空间来存储</strong>。用户可以在建表语句的 Property 中指定如下属性来开启行存：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"store_row_column" = "true"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们选择以 JSONB 作为行存的编码格式，主要出于以下考虑：</p><ul><li>Schema 变更灵活：随着数据的变化、变更，表的 Schema 也可能发生相应变化。行存储格式提供灵活性以处理这些变化是很重要的，例如用户删减字段、修改字段类型，数据变更需要及时同步到行存中。通过使用 JSONB 作为编码方式，将列作为 JSONB 的字段进行编码， 可以非常方便地进行字段扩展以及更改属性。</li><li>性能更高：在行存储格式中访问行可以比在列存储格式中访问行更快，因为数据存储在单个行中。这可以在高并发场景下显著减少磁盘访问开销。此外，通过将每个列 ID 映射到 JSONB其对应的值，可以实现对个别列的快速访问。</li><li>存储空间：将 JSONB 作为行存储格式的编解码器也可以帮助减少磁盘存储成本。紧凑的二进制格式可以减少存储在磁盘上的数据总大小，使其更具成本效益。</li></ul><p>使用 JSONB 编解码行存储格式，可以帮助解决高并发场景下面临的性能和存储问题。行存在存储引擎中会作为一个隐藏列（<code>DORIS_ROW_STORE_COL</code>）来进行存储，在 Memtable Flush 时，将各个列按照 JSONB 进行编码并缓存到这个隐藏列里。在数据读取时， 通过该隐藏列的 Column ID 来定位该列， 通过其行号定位到某一具体的行，并反序列化各列。</p><p>相关PR：<a href="https://github.com/apache/doris/pull/15491" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/pull/15491</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="点查询短路径优化short-circuit">点查询短路径优化（Short-Circuit）<a href="#点查询短路径优化short-circuit" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通常情况下，一条 SQL 语句的执行需要经过三个步骤：首先通过 SQL Parser 解析语句，生成抽象语法树(AST)，随后通过 Query Optimizer 生成可执行计划（Plan），最终通过执行该计划得到计算结果。对于大数据量下的复杂查询，经由查询优化器生成的执行计划无疑具有更高效的执行效果，但对于低延时和高并发要求的点查询，则不适宜走整个查询优化器的优化流程，会带来不必要的额外开销。为了解决这个问题，我们实现了点查询的短路径优化，绕过查询优化器以及 PlanFragment 来简化 SQL 执行流程，直接使用快速高效的读路径来检索所需的数据。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9dd8a1a5d25b42959080601fe00bc743~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>当查询被 FE 接收后，它将由规划器生成适当的 Short-Circuit Plan 作为点查询的物理计划。该 Plan 非常轻量级，不需要任何等效变换、逻辑优化或物理优化，仅对 AST 树进行一些基本分析、构建相应的固定计划并减少优化器的开销。对于简单的主键点查询，如<code>select * from tbl where pk1 = 123 and pk2 = 456</code>，因为其只涉及单个 Tablet，因此可以使用轻量的 RPC 接口来直接与 StorageEngine 进行交互，以此避免生成复杂的Fragment Plan 并消除了在 MPP 查询框架下执行调度的性能开销。RPC 接口的详细信息如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">message PTabletKeyLookupRequest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    required int64 tablet_id = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    repeated KeyTuple key_tuples = 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    optional Descriptor desc_tbl = 4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    optional ExprList  output_expr = 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message PTabletKeyLookupResponse {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    required PStatus status = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    optional bytes row_batch = 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    optional bool empty_batch = 6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rpc tablet_fetch_data(PTabletKeyLookupRequest) returns (PTabletKeyLookupResponse);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上 tablet_id 是从主键条件列计算得出的，<code>key_tuples</code>是主键的字符串格式，在上面的示例中，<code>key_tuples</code>类似于 <!-- -->['123', '456']<!-- -->，在 BE 收到请求后<code>key_tuples</code>将被编码为主键存储格式，并根据主键索引来识别 Key 在 Segment File 中的行号，并查看对应的行是否在<code>delete bitmap</code>中，如果存在则返回其行号，否则返回<code>NotFound</code>。然后使用该行号直对<code>__DORIS_ROW_STORE_COL__</code>列进行点查询，因此我们只需在该列中定位一行并获取 JSONB 格式的原始值，并对其进行反序列化作为后续输出函数计算的值。  </p><p>相关PR：<a href="https://github.com/apache/doris/pull/15491" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/pull/15491</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="预处理语句优化preparedstatement">预处理语句优化（PreparedStatement）<a href="#预处理语句优化preparedstatement" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>高并发查询中的 CPU 开销可以部分归因于 FE 层分析和解析 SQL 的 CPU 计算，为了解决这个问题，我们在 FE 端提供了与 MySQL 协议完全兼容的预处理语句（Prepared Statement）。当 CPU 成为主键点查的性能瓶颈时，<strong>Prepared Statement 可以有效发挥作用，实现 4 倍以上的性能提升</strong>。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/286b350c992544e99306d5653cc7990c~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>Prepared Statement 的工作原理是通过在 Session 内存 HashMap 中缓存预先计算好的 SQL 和表达式，在后续查询时直接复用缓存对象即可。Prepared Statement 使用 <a href="https://dev.mysql.com/doc/dev/mysqlserver/latest/page_protocol_binary_resultset.html#sect_protocol_binary_resultset_row" target="_blank" rel="noopener noreferrer">MySQL 二进制协议</a>作为传输协议。该协议在文件<code>mysql_row_buffer.[h|cpp] </code>中实现，符合标准 MySQL 二进制编码， 通过该协议客户端例如 JDBC Client， 第一阶段发送<code>PREPARE</code>MySQL Command 将预编译语句发送给 FE 并由 FE 解析、Analyze 该语句并缓存到上图的 HashMap 中，接着客户端通过<code>EXECUTE</code>MySQL Command 将占位符替换并编码成二进制的格式发送给 FE， 此时 FE 按照 MySQL 协议反序列化后得到占位符中的值，生成对应的查询条件。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2610ee08253a4a5a83c9733c75c1f06e~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>除了在 FE 缓存 Statement，我们还需要在 BE 中缓存被重复使用的结构，包括预先分配的计算 Block，查询描述符和输出表达式，由于这些结构在序列化和反序列化时会造成 CPU 热点， 所以需要将这些结构缓存下来。对于每个查询的 PreparedStatement，都会附带一个名为 CacheID 的 UUID。当 BE 执行点查询时，根据相关的 CacheID 找到对应的复用类， 并在 BE 中表达式计算、执行时重复使用上述结构。下面是在 JDBC 中使用 PreparedStatement 的示例：1. 设置 JDBC URL 并在 Server 端开启 PreparedStatement</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">url = jdbc:mysql://127.0.0.1:9030/ycsb?useServerPrepStmts=true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>使用 Prepared Statement</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// use `?` for placement holders, readStatement should be reused</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PreparedStatement readStatement = conn.prepareStatement("select * from tbl_point_query where key = ?");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">readStatement.setInt(1234);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ResultSet resultSet = readStatement.executeQuery();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">readStatement.setInt(1235);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resultSet = readStatement.executeQuery();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">相关 PR：https://github.com/apache/doris/pull/15491</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="行存缓存">行存缓存<a href="#行存缓存" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Doris 中有针对 Page 级别的 Cache，每个 Page 中存的是某一列的数据，所以 Page Cache 是针对列的缓存。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f448699741b42518c9597168b54c0c7~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>对于前面提到的行存，一行里包括了多列数据，缓存可能被大查询给刷掉，为了增加行缓存命中率，就需要单独引入行存缓存（Row Cache）。行存 Cache 复用了 Doris 中的 LRU Cache 机制， 启动时会初始化一个内存阈值， 当超过内存阈值后会淘汰掉陈旧的缓存行。对于一条主键查询语句，在存储层上命中行缓存和不命中行缓存可能有数十倍的性能差距(磁盘 IO 与内存的访问差距)，<strong>因此行缓存的引入可以极大提升点查询的性能，特别是缓存命中高的场景下。</strong> </p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fc6e74df496469b84d5792655067bd9~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>开启行存缓存可以在 BE 中设置以下配置项来开启：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">disable_storage_row_cache=false //是否开启行缓存， 默认不开启</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">row_cache_mem_limit=20% // 指定row cache占用内存的百分比， 默认20%内存</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>相关 PR：<a href="https://github.com/apache/doris/pull/15491" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/pull/15491</a></p><h1><strong>#  Benchmark</strong></h1><p>基于以上一系列优化，帮助 Apache Doris 在 Data Serving 场景的性能得到进一步提升。我们基于 Yahoo! Cloud Serving Benchmark （YCSB）标准性能测试工具进行了基准测试，其中环境配置与数据规模如下：</p><ul><li>机器环境：单台 16 Core 64G 内存 4*1T 硬盘的云服务器</li><li>集群规模：1 FE + 3 BE</li><li>数据规模：一共 1 亿条数据，平均每行在 1K 左右，测试前进行了预热。</li><li>对应测试表结构与查询语句如下：  </li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 建表语句如下：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE `usertable` (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `YCSB_KEY` varchar(255) NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD0` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD1` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD2` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD3` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD4` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD5` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD6` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD7` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD8` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD9` text NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) ENGINE=OLAP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNIQUE KEY(`YCSB_KEY`)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COMMENT 'OLAP'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRIBUTED BY HASH(`YCSB_KEY`) BUCKETS 16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PROPERTIES (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"replication_allocation" = "tag.location.default: 1",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"in_memory" = "false",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"persistent" = "false",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"storage_format" = "V2",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"enable_unique_key_merge_on_write" = "true",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"light_schema_change" = "true",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"store_row_column" = "true",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"disable_auto_compaction" = "false"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 查询语句如下：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT * from usertable WHERE YCSB_KEY = ?</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>开启优化（即同时开启行存、点查短路径以及 PreparedStatement）与未开启的测试结果如下：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1188924223c84440b6f292ae94fdf782~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>开启以上优化项后平均<strong>查询耗时降低了 96%</strong> ，99 分位的<strong>查询耗时仅之前的 1/28</strong>，QPS 并发<strong>从 1400 增至 3w、提升了超过 20 倍</strong>，整体性能表现和并发承载实现数据量级的飞跃！</p><h1><strong>#  最佳实践</strong></h1><p>需要注意的是，在当前阶段实现的点查询优化均是在 Unique Key 主键模型进行的，同时需要开启 Merge-on-Write 以及 Light Schema Change 后使用，以下是点查询场景的建表语句示例：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE `usertable` (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `USER_KEY` BIGINT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD0` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD1` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD2` text NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `FIELD3` text NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">) ENGINE=OLAP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UNIQUE KEY(`USER_KEY`)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COMMENT 'OLAP'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRIBUTED BY HASH(`USER_KEY`) BUCKETS 16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PROPERTIES (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"enable_unique_key_merge_on_write" = "true",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"light_schema_change" = "true",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"store_row_column" = "true",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>注意:</strong></p><ul><li><p>开启<code>light_schema_change</code>来支持 JSONB 行存编码 ColumnID</p></li><li><p>开启<code>store_row_column</code>来存储行存格式</p></li></ul><p>完成建表操作后，类似如下基于主键的点查 SQL 可通过行式存储格式和短路径执行得到性能的大幅提升：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">select * from usertable where USER_KEY = xxx;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>与此同时，可以通过 JDBC 中的 Prepared Statement 来进一步提升点查询性能。如果有充足的内存， 还可以在 BE 配置文件中开启行存 Cache，上文中均已给出使用示例，在此不再赘述。</p><h1><strong>#  总结</strong></h1><p>通过引入行式存储格式、点查询短路径优化、预处理语句以及行存缓存，Apache Doris 实现了单节点上万 QPS 的超高并发，实现了数十倍的性能飞跃。而随着集群规模的横向拓展、机器配置的提升，Apache Doris 还可以利用硬件资源实现计算加速，自身的 MPP 架构也具备横向线性拓展的能力。<strong>因此 Apache Doris 真正具备了在</strong> <strong>一套架构下同时</strong> <strong>满足高吞吐的 OLAP 分析和高并发的 Data Serving 在线服务的能力，大大简化了混合工作负载下的技术架构，为用户提供了多场景下的统一分析体验</strong>。</p><p>以上功能的实现得益于 Apache Doris 社区开发者共同努力以及 SelectDB 工程师的的持续贡献，当前已处于紧锣密鼓的发版流程中，在不久后的 2.0 版本就会发布出来。如果对于以上功能有强烈需求，<strong><a href="https://wenjuan.feishu.cn/m?t=sF2FZOL1KXKi-m73g" target="_blank" rel="noopener noreferrer">欢迎填写问卷提交申请</a>，或者与 SelectDB 技术团队直接联系，提前获得 2.0-alpha 版本的体验机会</strong>，也欢迎随时向我们反馈使用意见。</p><p><strong>作者介绍：</strong></p><p>李航宇，Apache Doris Contributor，SelectDB 半结构化研发工程师。</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 1.2.3 Release 版本正式发布]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-1.2.3</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-1.2.3"/>
        <updated>2023-03-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>亲爱的社区小伙伴们，我们很高兴地宣布，<strong>Apache Doris 于 2023 年 3 月 20 日迎来 1.2.3 Release 版本的正式发布</strong>！在新版本中包含超过 200 项功能优化和问题修复。同时，1.2.3 版本作为 1.2 LTS 的迭代版本，<strong>更加稳定易用，建议用户升级到这个版本</strong>。</p><p><strong>GitHub下载：</strong><a href="https://github.com/apache/doris/releases/tag/1.2.3-rc02" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/releases/tag/1.2.3-rc02</a></p><p><strong>官网下载页：</strong><a href="https://doris.apache.org/zh-CN/download" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/download</a></p><h1>Improvement</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="jdbc-catalog">JDBC Catalog<a href="#jdbc-catalog" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持通过 JDBC Catalog 连接到另一个 Doris 数据库。</li></ul><p>参考文档：<a href="https://doris.apache.org/docs/dev/lakehouse/multi-catalog/jdbc/#doris" target="_blank" rel="noopener noreferrer">https://doris.apache.org/docs/dev/lakehouse/multi-catalog/jdbc/#doris</a></p><ul><li><p>支持通过参数 <code>only_specified_database</code> 来同步指定的数据库。</p></li><li><p>支持通过 <code>lower_case_table_names</code> 参数控制是否以小写形式同步表名，解决表名区分大小写的问题。</p></li></ul><p>参考文档：<a href="https://doris.apache.org/docs/dev/lakehouse/multi-catalog/jdbc" target="_blank" rel="noopener noreferrer">https://doris.apache.org/docs/dev/lakehouse/multi-catalog/jdbc</a></p><ul><li>优化 JDBC Catalog 的读取性能。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="elasticsearch-catalog">Elasticsearch Catalog<a href="#elasticsearch-catalog" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>支持 Array 类型映射。</p></li><li><p>支持通过 <code>like_push_down</code> 属性下推 like 表达式来控制 ES 集群的 CPU 开销。</p></li></ul><p>参考文档：<a href="https://doris.apache.org/docs/dev/lakehouse/multi-catalog/es" target="_blank" rel="noopener noreferrer">https://doris.apache.org/docs/dev/lakehouse/multi-catalog/es</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hive-catalog">Hive Catalog<a href="#hive-catalog" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>支持 Hive 表默认分区 <code>__HIVE_DEFAULT_PARTITION__</code>。</p></li><li><p>Hive Metastore 元数据自动同步支持压缩格式的通知事件。</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="动态分区优化">动态分区优化<a href="#动态分区优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持通过 storage_medium 参数来控制创建动态分区的默认存储介质。</li></ul><p>参考文档：<a href="https://doris.apache.org/docs/dev/advanced/partition/dynamic-partition" target="_blank" rel="noopener noreferrer">https://doris.apache.org/docs/dev/advanced/partition/dynamic-partition</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化-be-的线程模型">优化 BE 的线程模型<a href="#优化-be-的线程模型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>优化 BE 的线程模型，以避免频繁创建和销毁线程所带来的稳定性问题。</li></ul><h1>Bug 修复</h1><ul><li><p>修复了部分 Unique Key 模型 Merge-on-Write 表的问题；</p></li><li><p>修复了部分 Compaction 相关问题；</p></li><li><p>修复了部分 Delete 语句导致的数据问题；</p></li><li><p>修复了部分 Query 执行问题；</p></li><li><p>修复了在某些操作系统上使用 JDBC Catalog 导致 BE 宕机的问题；</p></li><li><p>修复了部分 Multi-Catalog 的问题；</p></li><li><p>修复了部分内存统计和优化问题；</p></li><li><p>修复了部分 DecimalV3 和 date/datetimev2 的相关问题。</p></li><li><p>修复了部分导入过程中的稳定性问题；</p></li><li><p>修复了部分 Light Schema Change 的问题；</p></li><li><p>修复了使用 <code>datetime</code> 类型无法批量创建分区的问题;</p></li><li><p>修复了大量失败的 Broker Load 作业导致 FE 内存使用率过高的问题;</p></li><li><p>修复了删除表后无法取消 Stream Load 的问题；</p></li><li><p>修复了某些情况下查询 <code>information_schema</code> 库表超时的问题；</p></li><li><p>修复了使用 <code>select outfile</code> 并发数据导出导致 BE 宕机的问题；</p></li><li><p>修复了事务性 Insert 操作导致内存泄漏的问题；</p></li><li><p>修复了 BE Tablet GC 线程导致 IO 负载过高的问题；</p></li><li><p>修复了 Kafka Routine Load 中提交 Offset 不准确的问题。</p></li></ul><h1>致谢</h1><p>Apache Doris 1.2.3 版本的发布离不开所有社区用户的支持，在此向所有参与版本设计、开发、测试、讨论的社区 52 位贡献者们表示感谢，他们分别是：</p><p><a href="https://github.com/zy-kkk" target="_blank" rel="noopener noreferrer">@zy-kkk</a>
<a href="https://github.com/zhannngchen" target="_blank" rel="noopener noreferrer">@zhannngchen</a>
<a href="https://github.com/ZhangYu0123" target="_blank" rel="noopener noreferrer">@ZhangYu0123</a>
<a href="https://github.com/zhangstar333" target="_blank" rel="noopener noreferrer">@zhangstar333</a>
<a href="https://github.com/zclllyybb" target="_blank" rel="noopener noreferrer">@zclllyybb</a>
<a href="https://github.com/yuxuan-luo" target="_blank" rel="noopener noreferrer">@yuxuan-luo</a>
<a href="https://github.com/yixiutt" target="_blank" rel="noopener noreferrer">@yixiutt</a>
<a href="https://github.com/yiguolei" target="_blank" rel="noopener noreferrer">@yiguolei</a>
<a href="https://github.com/yangzhg" target="_blank" rel="noopener noreferrer">@yangzhg</a>
<a href="https://github.com/xinyiZzz" target="_blank" rel="noopener noreferrer">@xinyiZzz</a>
<a href="https://github.com/XieJiann" target="_blank" rel="noopener noreferrer">@XieJiann</a>
<a href="https://github.com/xiaokang" target="_blank" rel="noopener noreferrer">@xiaokang</a>
<a href="https://github.com/WuWQ98" target="_blank" rel="noopener noreferrer">@WuWQ98</a>
<a href="https://github.com/WinkerDu" target="_blank" rel="noopener noreferrer">@WinkerDu</a>
<a href="https://github.com/wangbo" target="_blank" rel="noopener noreferrer">@wangbo</a>
<a href="https://github.com/TangSiyang2001" target="_blank" rel="noopener noreferrer">@TangSiyang2001</a>
<a href="https://github.com/SWJTU-ZhangLei" target="_blank" rel="noopener noreferrer">@SWJTU-ZhangLei</a>
<a href="https://github.com/starocean999" target="_blank" rel="noopener noreferrer">@starocean999</a>
<a href="https://github.com/stalary" target="_blank" rel="noopener noreferrer">@stalary</a>
<a href="https://github.com/sohardforaname" target="_blank" rel="noopener noreferrer">@sohardforaname</a>
<a href="https://github.com/SaintBacchus" target="_blank" rel="noopener noreferrer">@SaintBacchus</a>
<a href="https://github.com/qzsee" target="_blank" rel="noopener noreferrer">@qzsee</a>
<a href="https://github.com/qidaye" target="_blank" rel="noopener noreferrer">@qidaye</a>
<a href="https://github.com/platoneko" target="_blank" rel="noopener noreferrer">@platoneko</a>
<a href="https://github.com/nextdreamblue" target="_blank" rel="noopener noreferrer">@nextdreamblue</a>
<a href="https://github.com/mrhhsg" target="_blank" rel="noopener noreferrer">@mrhhsg</a>
<a href="https://github.com/morrySnow" target="_blank" rel="noopener noreferrer">@morrySnow</a>
<a href="https://github.com/morningman" target="_blank" rel="noopener noreferrer">@morningman</a>
<a href="https://github.com/maochongxin" target="_blank" rel="noopener noreferrer">@maochongxin</a>
<a href="https://github.com/luwei16" target="_blank" rel="noopener noreferrer">@luwei16</a>
<a href="https://github.com/luozenglin" target="_blank" rel="noopener noreferrer">@luozenglin</a>
<a href="https://github.com/liaoxin01" target="_blank" rel="noopener noreferrer">@liaoxin01</a>
<a href="https://github.com/Kikyou1997" target="_blank" rel="noopener noreferrer">@Kikyou1997</a>
<a href="https://github.com/Jibing-Li" target="_blank" rel="noopener noreferrer">@Jibing-Li</a>
<a href="https://github.com/jacktengg" target="_blank" rel="noopener noreferrer">@jacktengg</a>
<a href="https://github.com/htyoung" target="_blank" rel="noopener noreferrer">@htyoung</a>
<a href="https://github.com/HappenLee" target="_blank" rel="noopener noreferrer">@HappenLee</a>
<a href="https://github.com/Gabriel39" target="_blank" rel="noopener noreferrer">@Gabriel39</a>
<a href="https://github.com/freemandealer" target="_blank" rel="noopener noreferrer">@freemandealer</a>
<a href="https://github.com/englefly" target="_blank" rel="noopener noreferrer">@englefly</a>
<a href="https://github.com/eldenmoon" target="_blank" rel="noopener noreferrer">@eldenmoon</a>
<a href="https://github.com/dutyu" target="_blank" rel="noopener noreferrer">@dutyu</a>
<a href="https://github.com/Doris-Extras" target="_blank" rel="noopener noreferrer">@Doris-Extras</a>
<a href="https://github.com/chenlinzhong" target="_blank" rel="noopener noreferrer">@chenlinzhong</a>
<a href="https://github.com/catpineapple" target="_blank" rel="noopener noreferrer">@catpineapple</a>
<a href="https://github.com/Cai-Yao" target="_blank" rel="noopener noreferrer">@Cai-Yao</a>
<a href="https://github.com/caiconghui" target="_blank" rel="noopener noreferrer">@caiconghui</a>
<a href="https://github.com/ByteYue" target="_blank" rel="noopener noreferrer">@ByteYue</a>
<a href="https://github.com/BiteTheDDDDt" target="_blank" rel="noopener noreferrer">@BiteTheDDDDt</a>
<a href="https://github.com/Bingandbing" target="_blank" rel="noopener noreferrer">@Bingandbing</a>
@BePPPower
@adonis0147</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[查询性能较 Trino:Presto 3-10 倍提升！Apache Doris 极速数据湖分析深度解读]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Data Lakehouse</id>
        <link href="https://doris.apache.org/zh-CN/blog/Data Lakehouse"/>
        <updated>2023-03-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>从上世纪 90 年代初 Bill Inmon 在《building the Data Warehouse》一书中正式提出数据仓库这一概念，至今已有超过三十年的时间。在最初的概念里，数据仓库被定义为「一个面向主题的、集成的、相对稳定的、反映历史变化的数据集合，用于支持管理决策」，而数据湖最初是为了解决数仓无法存储海量且异构的数据而构建的集中式存储系统。</p><p>时代的发展与用户数据应用诉求的演进，催生了数据架构的不断革新，也衍生了更复杂的技术形态。可以清晰看到现代数据架构从计算到存储都在向着融合统一的方向发展，新的数据湖范式被提出，这也是 Lakehouse 诞生的背景。作为一种全新的、开放式的数据管理架构，Lakehouse 提供了更强的数据分析能力与更好的数据治理能力，也保留了数据湖的灵活性与开放式存储，为用户带来更多价值：</p><ul><li>从存储的角度：统一数据集成，避免冗余存储以及跨系统间 ETL 带来的繁重工程和失败风险；</li><li>从治理的角度：支持 ACID、Schema Evolution 与 Snapshot，数据与元数据皆可治理；</li><li>从应用的角度：多引擎访问支持、可插拔，通过统一接口进行数据访问，同时适用于多种工作负载 Workload；</li><li>……</li></ul><p>如果我们把 Lakehouse 从系统层面进行解构，会发现除了需要 Apache Iceberg、Apache Hudi 以及 Delta Lake 等数据湖表格式（Table Format）以外，<strong>高性能分析引擎更是充分发挥湖上数据价值的关键</strong>。</p><p>作为一款极速易用的开源实时 OLAP 数据库，Apache Doris 自 0.15 版本即开始尝试在 Apache Iceberg 之上探索与数据湖的能力结合。而经过多个版本的优化迭代，Apache Doris 在数据湖分析已经取得了长足的进展，一方面在数据读取、查询执行以及优化器方面做了诸多优化，另一方面则是重构了整体的元数据连接框架并支持了更多外部存储系统。因此 Apache Doris 已经完全具备了构建极速易用的 Lakehouse 架构的能力，并且也已在多个用户的真实业务场景中得到验证和推广，我们希望通过 Apache Doris 能为用户在更多场景中带来价值：</p><ol><li><p><strong>湖仓查询加速</strong></p><p>利用 Apache Doris 优秀的分布式执行引擎以及本地文件缓存，结合数据湖开放格式提供的多种索引能力，对湖上数据及文件提供优秀的查询加速能力，相比 Hive、Presto、Spark 等查询引擎实现数倍的性能提升。</p></li><li><p><strong>统一数据分析网关</strong></p><p>利用 Apache Doris 构建完善可扩展的数据源连接框架，便于快速接入多类数据源，包括各种主流关系型数据库、数据仓库以及数据湖引擎（例如 Hive、Iceberg、Hudi、Delta Lake、Flink Table Store 等），提供基于各种异构数据源的快速查询和写入能力，将 Apache Doris 打造成统一的数据分析网关。</p></li><li><p><strong>统一数据集成</strong></p><p>基于可扩展的连接框架，增强 Doris 在数据集成方面的能力，让数据更便捷的被消费和处理。用户可以通过 Doris 对上游的多种数据源进行统一的增量、全量同步，并利用 Doris 的数据处理能力对数据进行加工和展示，也可以将加工后的数据写回到数据源，或提供给下游系统进行消费。该能力使得 Apache Doris 能够成为业务的统一数据枢纽，降低数据流转成本。</p></li><li><p><strong>更加开放的数据生态</strong></p><p>通过对 Parquet/ORC 等数据格式以及开放的元数据管理机制的支持，用户不用再担心数据被特定数据库引擎锁定，无法被其他引擎访问，也不用再为数据的迁移和格式转换付出高昂的时间和算力成本，降低用户的数据迁移成本和对数据流通性的顾虑，更便捷、放心地享受 Apache Doris 带来的极速数据分析体验。</p></li></ol><p>基于以上的场景定位，我们需要进一步去思考在构建 Lakehouse 过程中需要如何去设计和改造系统，具体包括：</p><ul><li>如何支持更丰富的数据源访问以及更便捷的元数据获取方式；</li><li>如何提升湖上数据的查询执行性能；</li><li>如何实现更灵活的资源调度与负载管理；</li></ul><p>因此本文将重点介绍 Apache Doris 在 Lakehouse 上的设计思路和技术细节，同时会为大家介绍后续的发展规划。</p><h1>元数据连接与数据访问</h1><p>截至最新的 1.2.2 版本，Apache Doris 已经提供了十余种的数据湖格式和外部数据源的访问支持。同时也支持通过 Table Value Function 直接对文件进行分析。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/196b5972f51b4ed2a693082ec3f5a56f~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>为了支持这些数据源，Apache Doris 分别在<strong>元数据连接</strong>和<strong>数据访问</strong>两方面做了大量的架构调整和性能优化 <strong>。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="元数据连接">元数据连接<a href="#元数据连接" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>元数据包括数据源的库、表信息、分区信息、索引信息、文件信息等。不同数据源的元信息格式、组织方式各有不同，对于元数据的连接需要解决以下问题：</p><ol><li><strong>统一的元数据结构</strong>：屏蔽不同数据源的元数据差异。</li><li><strong>可扩展的元数据连接框架</strong>：低成本、快速地接入数据源。</li><li><strong>高效的元数据访问能力</strong>：提供可靠、高效的元数据访问性能，并支持实时同步元数据变更。</li><li><strong>自定义鉴权服务</strong>：能够灵活对接外部的权限管理系统，降低业务迁移成本。</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="统一的元数据结构"><strong>统一的元数据结构</strong><a href="#统一的元数据结构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在过去 Apache Doris 的元数据只有 Database（数据库） 和 Table（表）两个层级，当外部数据目录 Schema 发生变化或者外部数据目录的 Database 或 Table 非常多时，需要用户手工进行一一映射，维护量非常大。因此在 Apache Doris 1.2.0 版本中新增了 Catalog（数据目录）层级，提供了快速接入外部数据源的能力。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49db6f6b33b84674a7cccbe1edac8159~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Catalog 层级的引入解决以下问题：</p><ol><li><strong>数据源层级的映射</strong>：用户不再需要在 Database、Table 层级进行一一映射，可以通过 Catalog 直接映射整个数据源，自动同步其中的所有元信息，简化元数据映射逻辑</li><li><strong>数据源统一信息管理</strong>：在 Catalog 层级统一维护指定数据源的属性，如连接信息、权限信息、同步方式等，更方便的管理多个数据源。</li></ol><p>引入 Catalog 层级后，我们也对 Doris 的元数据进行调整和划分：</p><ol><li>Internal Catalog：原有的自管理的 Table 和 Database 都归属于 Internal Catalog。</li><li>External Catalog：用于对接其他非自管理的外部数据源。比如 HMS External Catalog 可以连接到一个 Hive Metastore 管理的集群、Iceberg External Cataog 可以连接到 Iceberg 集群等。</li></ol><p>用户可以使用 <code>SWITCH</code>语句切换不同的 Catalog，也可以通过全限定名方便的进行<strong>跨数据源的联邦查询</strong>，如：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT * FROM hive.db1.tbl1 a JOIN iceberg.db2.tbl2 b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ON a.k1 = b.k1;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>相关文档：<a href="https://doris.apache.org/zh-CN/docs/dev/lakehouse/multi-catalog" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/lakehouse/multi-catalog</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="可扩展的元数据连接框架">可扩展的元数据连接框架<a href="#可扩展的元数据连接框架" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>基于新的元数据层级，用户可以通过 <code>CREATE CATALOG</code>语句方便的添加新的数据源：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE CATALOG hive PROPERTIES (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    'type'='hms',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    'hive.metastore.uris' = 'thrift://172.21.0.1:7004',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在数据湖场景下，目前 Doris 支持的元数据服务包括：</p><ul><li>Hive Metastore 兼容的元数据服务</li><li>Aliyun Data Lake Formation</li><li>AWS Glue</li></ul><p>同时，开发者也可以自行扩展 External Catalog，只需要实现对应的访问接口，即可在 Doris 中快速接入新的元数据服务。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="高效的元数据访问"><strong>高效的元数据访问</strong><a href="#高效的元数据访问" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>元数据存储在外部数据源中，而对外部数据源的访问受到网络、数据源资源等限制，性能和可靠性是不可控的。所以 Doris 需要提供高效、可靠的元数据服务以保证线上服务的稳定运行，同时 Doris 也需要实时感知元数据的变更，提升数据访问的实时性。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e52775d83c64e63bde14cb22fb23b5d~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Doris 通过内存中的<strong>元数据缓存</strong>提供高效的元数据服务。元数据缓存包括<strong>列信息缓存</strong>，<strong>分区缓存</strong>，<strong>文件缓存。</strong> 通过元信息缓存，可以显著提升元数据访问性能并降低对外部元数据服务的请求压力，<strong>使得Doris 可以应对数千张表，数十万分区场景下，毫秒级别的元数据查询响应。</strong></p><p>Doris 支持在 Catalog/Database/Table 级别，对元数据缓存进行手动刷新。同时，针对 Hive Metastore，Doris还支持通过监听 Hive Metastore Event 自动同步元数据，提供元数据秒级实时更新能力。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="自定义鉴权服务"><strong>自定义鉴权服务</strong><a href="#自定义鉴权服务" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>外部数据源通常拥有自己的权限管理服务，而很多企业也会使用统一的权限管理系统（例如 Apache Ranger）来管理多套数据系统。Doris支持通过自定义鉴权插件对接企业内部已有的权限管理系统，从而可以低成本的接入现有业务，完成授权、审计、数据加密等操作。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d065f96d56e44af380b75a6636706070~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>具体实现上，用户可以基于 Doris 的 AccessController 接口实现插件对接相应的权限管理系统，并在创建 Catalog 时，指定对应的鉴权插件。通过这种机制，所有通过 Doris 对外部数据源的访问，都将统一使用自定义的插件完成鉴权、审计等操作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据访问">数据访问<a href="#数据访问" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>外部数据源的数据访问，主要集中在对存储系统的访问支持上。在数据湖场景下，主要是对 HDFS 以及各种 S3 兼容的对象存储的支持。目前 Apache Doris 支持的存储系统如下，并且仍在不断增加中：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f66b6569b6c349fbbc1b1ccebb8854ca~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h1>性能优化</h1><p>在实现数据源的连接和访问后，下一个问题是我们如何结合 Apache Doris 自身优异的查询性能以及各类存储系统的特性，进行针对性的查询性能优化，这也是在 构建 Lakehouse 过程中最需要解决的问题和权衡的因素。在具体实现过程中，Apache Doris 分别在<strong>数据读取、执行引擎、优化器</strong>方面进行了诸多优化。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据读取">数据读取<a href="#数据读取" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>湖上数据通常存储在远端存储系统上，相较于本地存储，在数据的访问延迟、并发能力、IO 带宽上天然存在一定劣势。因此，在数据读取上，Apache Doris 从减少远端读取频率，降低读取量等方面出发进行了细致的优化。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="native-file-format-reader">Native File Format Reader<a href="#native-file-format-reader" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Parquet 和 ORC 是最常见的开放数据格式，这些数据格式本身提供了包括索引、编码、统计信息在内的多种特性，如何针对格式特性来提升文件读取效率是性能优化的关键一步。在早期的实现中，Apache Doris 是通过 Apache Arrow 来读取 Parquet/ORC 数据文件的，但这种方式存在以下问题：</p><ol><li><strong>数据格式转换的开销</strong>：Arrow Reader 需要先将文件读取成 Arrow 的内存格式，再转换到 Doris 自己的内存格式，两次数据转换带来额外的开销。</li><li><strong>无法支持高级文件格式特性</strong>。如不支持 Parquet 的 Page Index，不支持 Bloom Fitler，无法实现谓词下推、延迟物化等功能。</li></ol><p>基于以上问题，我们对 Flile reader 进行了重构，实现了全新的 Native File Format Reader。这里我们以 Parquet Reader 为例，介绍 Doris 的文件格式读取方面所做的优化：</p><ol><li><strong>减少格式转换</strong>。新的 File Reader 直接将文件格式转换成 Doris 的内存格式，并可以直接利用字典编码等功能转换到对应的更高性能的内存格式，以提升数据转换和处理的效率。</li><li><strong>细粒度的智能索引</strong>。支持了 Parquet 的 Page Index，可以利用 Page 级别的智能索引对 Page 进行过滤。相比之前只能在 Row Group 级别过滤，Page Index 过滤粒度更细、过滤效果更好。</li><li><strong>谓词下推和延迟物化</strong>。延迟物化的基本逻辑是先读取有过滤条件的列，再使用过滤后的行号读取其他列。这种方式能显著降低文件的读取量。这一点在远程文件读取场景下尤为重要，可以最大限度减少不必要的数据读取。</li><li><strong>数据预读。</strong> 将多次文件读取合并成一次，充分利用远端存储高吞吐、低并发的特性，提高数据的总体吞吐效率。</li></ol><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5faaee5c7804020933e3a874d8fd32e~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="file-cache">File Cache<a href="#file-cache" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>利用本地高性能磁盘对远端存储系统中的文件进行本地缓存，能最大限度的减少远程数据读取的开销，同时可以提供接近 Doris 内部表数据的访问性能。在本地文件缓存方面 Doris 进行了如下优化：</p><ol><li><strong>文件块缓存（Block Cache）</strong> 。支持对远端文件进行 Block 级别的缓存。Block 的大小会根据读取请求自动调整，从 4KB 到 4MB 不等。Block 级别的缓存能有效减少缓存导致的读写放大问题，优化缓存冷启动场景下的数据读取延迟。</li><li><strong>缓存一致性哈希</strong>。通过一致性哈希算法对缓存位置和数据扫描任务进行管理和调度，充分利用已缓存的数据提供服务，并避免节点上下线导致缓存大面积失效的问题，提升缓存命中率和查询服务的稳定性。</li></ol><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7349ab4c773d495aa2b91334a4a28181~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>通过 Flie Cache，在命中缓存的情况下，Apache Doris 可以提供和本地表一致的查询性能。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="执行引擎">执行引擎<a href="#执行引擎" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在执行引擎层面，我们希望能够完全复用 Apache Doris 的向量化执行引擎以及各类执行层面的算子优化，为数据湖提供极速的查询体验。因此，Apache Doris 对数据扫描（Scan）节点进行了重构，使得每一种新的数据源的接入，开发者只需要关注数据源本身的访问逻辑，无需重复地开发通用功能。</p><ol><li><strong>通用查询能力的分层</strong></li></ol><p>包括内表在内的所有数据查询，都会使用相同的 Join、Sort、Agg 等算子。唯一不同在于数据源的访问方式上，例如对本地内部格式数据的读取，或存储在 S3 上的 Parquet 格式数据的读取。因此 Doris 将不同数据源的查询逻辑差异下推到最底层的 Scan 节点上。Scan 节点之上，所有查询逻辑统一，Scan 节点之下，由具体的实现类负责不同数据源的访问逻辑。</p><ol start="2"><li><strong>Scan 算子的通用框架</strong></li></ol><p>对于 Scan 节点，不同数据源也有很多共性的方面，如子任务的拆分逻辑、子任务的调度、IO 的调度、谓词下推以及 Runtime Filter 的处理等。因此我们也对这一部分架构进行了重构。首先，将共性部分都以接口的形式对外暴露，如子任务的拆分、下推谓词的处理等；其次，对子任务实现了统一的调度管理逻辑，可以由统一的调度器管理整个节点 Scan 任务的执行。调度器拥有节点全局的信息，可以方便的实现更细粒度的Scan 任务调度策略。在这样的统一的数据查询框架下，<strong>大约 1 人周就可以完成一种新数据源接入</strong>。
<img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8879785df1ff4069a3fb6413c372a04b~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="查询优化器">查询优化器<a href="#查询优化器" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>查询优化器层面的优化集中在<strong>统计信息收集</strong>和<strong>代价模型的推导</strong>方面。</p><p>Apache Doris 支持对不同数据源的统计信息收集，如 Hive Metastore、Iceberg Metafile、Hudi MetaTable 中存储的统计信息等。同时在代价模型推导方面，我们也针对外部数据源的特性做了细致的调整。基于这些优化，Doris 可以为复杂的外表查询提供更优的查询规划。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="性能对比">性能对比<a href="#性能对比" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>以上优先项，我们分别在<strong>宽表场景</strong>（Clickbench）和<strong>多表关联场景</strong>（TPC-H）下与 Presto/Trino 进行了 Hive 数据集的查询性能对比。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12724f561f4f42bcbb8b2e1b56e18e81~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e87d52832eb343a09a0e091a5efe7043~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>可以看到，在相同计算资源和数据集下，无论是宽表场景或多表关联场景，绝大多数 SQL Apache Doris 的查询耗时都是大幅低于 Presto/Trino <strong>，整体性能</strong> <strong>相比</strong> <strong>Presto/</strong> <strong>Trino 有 3-10 倍的提升</strong>。</p><h1>负载管理与弹性计算</h1><p>对外部数据源的查询并不依赖 Doris 的数据存储能力，这也为 Doris 实现弹性的无状态计算节点成为可能。在即将发布的 2.0 版本中，Apache Doris 还实现了弹性计算节点功能（Elastic Compute Node），可以专门用于支持外部数据源的查询负载。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a91244140a5e43bfa32d7a91f1af62c6~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>由于计算节点是无状态的，因此我们可以对这类节点进行快速扩缩容，以灵活地应对峰谷期的查询负载，在查询性能与成本消耗之间取得更好的平衡。</p><p>同时，Doris 也针对 k8s 场景下的集群管理和节点调度进行了优化，Master 节点可以自动管理弹性计算节点的上下线，方便业务在云原生场景、混合云场景下都能便捷的管理集群负载。</p><h1>案例实践</h1><p>随着以上功能的完善与性能的提升，Apache Doris 已经被多家社区用户应用于数据湖分析，在真实业务中发挥着重要的作用，在此以某金融企业的风控场景为例。</p><p>金融风控场景往往对数据的实时性有着更高的要求，早期基于 Greenplum 和 CDH 搭建的风控数据集市已经无法满足其高时效性的需求，T+1 的数据生产模式成为业务迅速发展的掣肘，因此该企业于 2022 年引入 Apache Doris 并改造了整个数据生产和应用流程，实现对 Elasticsearch、Greenplum 以及 Hive 的联邦分析，整体效果包括：</p><ul><li>只需创建一个 Hive Catalog 即可对现存的数万张 Hive 表进行查询分析，查询性能得到极大幅度提升；</li><li>利用 Elasticsearch Catalog 实现对 ES 实时数据的联邦分析，数据时效性从过去的分钟级提升至秒级甚至毫秒级，满足了风控策略的实时性要求；</li><li>将日常跑批与统计分析进行解耦，降低资源消耗的同时使系统稳定性得到进一步增强。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22a00c256dbd4e1d8a95fb11a3ebcad8~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h1>未来规划</h1><p>后续 Apache Doris 将持续在 Lakehouse 方向进行迭代和升级，下一步的工作将围绕在<strong>更丰富的数据源支持</strong>、<strong>数据集成</strong>和<strong>资源隔离与调度</strong>等方面：</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="更丰富的数据源支持">更丰富的数据源支持<a href="#更丰富的数据源支持" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>随着数据湖在各种业务场景中的不断落地，数据湖本身的功能也在不断迭代以满足越来越多样的业务需求。Doris也将和各个开源社区紧密合作，提供更完善的数据湖分析支持。</p><ul><li>Hudi Merge-On-Read 表的 Incremental Query 支持</li><li>利用 Iceberg/Hudi 丰富的索引功能，结合查询优化器提供更低延迟的分析性能。</li><li>支持包括 Delta Lake、Flink Table Store 等更多数据湖格式。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据集成">数据集成<a href="#数据集成" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>具体到功能层面，数据集成可以分为数据的<strong>读取</strong>和<strong>写回</strong>两部分。</p><p><strong>数据读取方面</strong>，Doris 将进一步整合数据湖的数据访问特性，包括：</p><ul><li>数据湖 CDC 的接入以及增量物化视图的支持，为用户提供近实时的数据视图。</li><li>支持 Git-Like 的数据访问模式，通过多版本、Branch 等机制，在数据安全、数据质量等方面为用户提供更便捷的数据管理模式。</li></ul><p><strong>数据写回功能的支持</strong>，帮助 Doris 进一步完善统一数据分析网关的生态闭环。用户可以使用 Doris 作为统一数据管理入口，管理各个数据源中的数据，包括加工后数据的写回、数据导出等，对业务提供统一的数据视图。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="资源隔离与调度">资源隔离与调度<a href="#资源隔离与调度" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>随着越来越多数据源的接入，Doris 也在逐步承接不同的工作负载，比如在提供低延迟的在线服务的同时，对 Hive 中 T-1 的数据进行批量处理。所以同集群内的资源隔离会愈发重要。</p><p>Doris 会持续优化弹性计算节点在不同场景下的调度管理逻辑，同时会支持更细粒度的节点内资源隔离，如 CPU、IO、内存等，帮助 Doris 支持多样且稳定的工作负载。</p><h1>加入我们</h1><p>目前社区已成立 Lakehouse SIG（湖仓兴趣小组），汇集了来自多家企业的开发者，旨在共同打造 Apache Doris 的 Lakehouse 场景支持，欢迎感兴趣的同学加入我们。</p><p><strong># 相关链接：</strong></p><p><strong>SelectDB 官网</strong>：</p><p><a href="https://selectdb.com" target="_blank" rel="noopener noreferrer">https://selectdb.com</a> </p><p><strong>Apache Doris 官网</strong>：</p><p><a href="http://doris.apache.org" target="_blank" rel="noopener noreferrer">http://doris.apache.org</a></p><p><strong>Apache Doris Github</strong>：</p><p><a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris</a></p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[从 ClickHouse 到 Apache Doris，腾讯音乐内容库数据平台架构演进实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Tencent Music</id>
        <link href="https://doris.apache.org/zh-CN/blog/Tencent Music"/>
        <updated>2023-03-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<hr><p>作者：腾讯音乐内容库数据平台 张俊、代凯</p><p>腾讯音乐娱乐集团（简称“腾讯音乐娱乐”）是中国在线音乐娱乐服务开拓者，提供在线音乐和以音乐为核心的社交娱乐两大服务。腾讯音乐娱乐在中国有着广泛的用户基础，拥有目前国内市场知名的四大移动音乐产品：QQ音乐、酷狗音乐、酷我音乐和全民K歌，总月活用户数超过8亿。  </p><h1>业务需求</h1><p>腾讯音乐娱乐拥有海量的内容曲库，包括录制音乐、现场音乐、音频和视频等多种形式。通过技术和数据的赋能，腾讯音乐娱乐持续创新产品，为用户带来更好的产品体验，提高用户参与度，也为音乐人和合作伙伴在音乐的制作、发行和销售方面提供更大的支持。</p><p>在业务运营过程中我们需要对包括歌曲、词曲、专辑、艺人在内的内容对象进行全方位分析，高效为业务赋能，<strong>内容库数据平台旨在集成各数据源的数据，整合形成内容数据资产（以指标和标签体系为载体），为应用层提供库存盘点、分群画像、指标分析、标签圈选等内容分析服务。</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cef94d5e9327496e9e0d2aff45816986~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><h1>数据架构演进</h1><p>TDW 是腾讯最大的离线数据处理平台，公司内大多数业务的产品报表、运营分析、数据挖掘等的存储和计算都是在TDW中进行，内容库数据平台的数据加工链路同样是在腾讯数据仓库 TDW 上构建的。截止目前，内容库数据平台的数据架构已经从 1.0 演进到了 4.0 ，<strong>经历了分析引擎从 ClickHouse 到 Apache Doris 的替换、经历了数据架构语义层的初步引入到深度应用</strong>，有效提高了数据时效性、降低了运维成本、解决了数据管理割裂等问题，收益显著。接下来将为大家分享腾讯音乐内容库数据平台的数据架构演进历程与实践思考。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据架构-10">数据架构 1.0<a href="#数据架构-10" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c7d269667b8450c8b1bfda3372b34e5~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>如图所示为数据架构 1.0 架构图，分为数仓层、加速层、应用层三部分，数据架构 1.0 是一个相对主流的架构，简单介绍一下各层的作用及工作原理：</p><ul><li>数仓层：通过 ODS-DWD-DWS 三层将数据整合为不同主题的标签和指标体系， DWM 集市层围绕内容对象构建大宽表，从不同主题域 DWS 表中抽取字段。</li><li>加速层：在数仓中构建的大宽表导入到加速层中，Clickhouse 作为分析引擎，Elasticsearch 作为搜索/圈选引擎。</li><li>应用层：根据场景创建 DataSet，作为逻辑视图从大宽表选取所需的标签与指标，同时可以二次定义衍生的标签与指标。</li></ul><p><strong>存在的问题：</strong></p><ul><li>数仓层：不支持部分列更新，当上游任一来源表产生延迟，均会造成大宽表延迟，进而导致数据时效性下降。</li><li>加速层：不同的标签跟指标特性不同、更新频率也各不相同。由于 ClickHouse 目前更擅长处理宽表场景，无区别将所有数据导入大宽表生成天的分区将造成存储资源的浪费，维护成本也将随之升高。</li><li>应用层：ClickHouse 采用的是计算和存储节点强耦合的架构，架构复杂，组件依赖严重，牵一发而动全身，容易出现集群稳定性问题，对于我们来说，同时维护 ClickHouse 和 Elasticsearch 两套引擎的连接与查询，成本和难度都比较高。</li></ul><p>除此之外，ClickHouse 由国外开源，交流具有一定的语言学习成本，遇到问题无法准确反馈、无法快速获得解决，与社区沟通上的阻塞也是促进我们进行架构升级的因素之一。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据架构-20">数据架构 2.0<a href="#数据架构-20" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/782a9cd3ff4d4f76afea166262065466~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>基于架构 1.0 存在的问题和 ClickHouse 的局限性，我们尝试对架构进行优化升级，<strong>将分析引擎 ClickHouse 切换为 Doris</strong>，Doris 具有以下的优势：</p><p><strong>Apache Doris 的优势：</strong></p><ul><li>Doris 架构极简易用，部署只需两个进程，不依赖其他系统，运维简单；兼容 MySQL 协议，并且使用标准 SQL。</li><li>支持丰富的数据模型，可满足多种数据更新方式，支持部分列更新。</li><li>支持对 Hive、Iceberg、Hudi 等数据湖和 MySQL、Elasticsearch 等数据库的联邦查询分析。</li><li>导入方式多样，支持从 HDFS/S3 等远端存储批量导入，也支持读取 MySQL Binlog 以及订阅消息队列 Kafka 中的数据，还可以通过 Flink Connector 实时/批次同步数据源（MySQL,Oracle,PostgreSQL 等）到 Doris。</li><li>社区目前 Apache Doris 社区活跃、技术交流更多，SelectDB 针对社区有专职的技术支持团队，在使用过程中遇到问题均能快速得到响应解决。</li></ul><p><strong>同时我们也利用 Doris 的特性，解决了架构 1.0 中较为突出的问题。</strong></p><ul><li>数仓层：Apache Doris 的 Aggregate 数据模型可支持部分列实时更新，因此我们去掉了 DWM 集市层的构建，直接增量到 Doris / ES 中构建宽表，<strong>解决了架构 1.0 中上游数据更新延迟导致整个宽表延迟的问题，进而提升了数据的时效性</strong>。数据（指标、标签等）通过 Spark 统一离线加载到 Kafka 中，使用 Flink 将数据增量更新到 Doris 和 ES 中（利用 Flink 实现进一步的聚合，减轻了 Doris 和 ES 的更新压力）。</li><li>加速层：该层主要将大宽表拆为小宽表，根据更新频率配置不同的分区策略，减小数据冗余带来的存储压力，提高查询吞吐量。<strong>Doris 具备多表查询和联邦查询性能特性，可以利用多表关联特性实现组合查询。</strong></li><li>应用层：DataSet 统一指向 Doris，<strong>Doris 支持外表查询</strong>，利用该特性可对 ES 引擎直接查询。</li></ul><p><strong>架构 2.0 存在的问题：</strong></p><ul><li>DataSet 灵活度较高，数据分析师可对指标和标签自由组合和定义，但是不同的分析师对同一数据的定义不尽相同、定义口径不一致，导致指标和标签缺乏统一管理，这使得数据管理和使用的难度都变高。</li><li>Dataset 与物理位置绑定，应用层无法进行透明优化，如果 Doris 引擎出现负载较高的情况，无法通过降低用户查询避免集群负载过高报错的问题。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据架构-30">数据架构 3.0<a href="#数据架构-30" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>针对指标和标签定义口径不统一，数据使用和管理难度较高的问题，我们继续对架构进行升级。数据架构 3.0 主要的变化是引入了专门的语义层，语义层的主要作用是将技术语言转换为业务部门更容易理解的概念，目的是将标签 (tag)与指标(metric)变为“一等公民”，作为数据定义与管理的基本对象。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7703a5716b24315b61828c86ec26fa9~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p><strong>引入语义层的优势有：</strong></p><ul><li>对于技术来说，应用层不再需要创建 DataSet，从语义层可直接获取特定内容对象的标签集 (tagset)和指标集(metricset) 来发起查询。</li><li>对于数据分析师来说，可统一在语义层定义和创建衍生的指标和标签，解决了定义口径不一致、管理和使用难度较高的问题。</li><li>对于业务来说，无需耗费过长时间考虑什么场景应选择哪个数据集使用，语义层对标签和指标透明统一的定义提升了工作效率、降低了使用成本。</li></ul><p><strong>存在的问题：</strong></p><p>从架构图可知，标签和指标等数据均处于下游位置，虽然标签与指标在语义层被显式定义，但仍然无法影响上游链路，数仓层有自己的语义逻辑，加速层有自己的导入配置，<strong>这样就造成了数据管理机制的割裂</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据架构-40">数据架构 4.0<a href="#数据架构-40" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在数据架构 3.0 的基础上，我们对语义层进行更深层次的应用，在数据架构 4.0 中，我们将语义层变为架构的中枢节点，目标是对所有的指标和标签统一定义，从计算-加速-查询实现中心化、标准化管理，解决数据管理机制割裂的问题。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2866d01339914cf7960b82fe83e870dc~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>语义层作为架构中枢节点所带来的变化：</p><ul><li>数仓层：语义层接收 SQL 触发计算或查询任务。数仓从 DWD 到 DWS 的计算逻辑将在语义层中进行定义，且以单个指标和标签的形式进行定义，之后由语义层来发送命令，生成 SQL 命令给数仓层执行计算。</li><li>加速层：从语义层接收配置、触发导入任务，比如加速哪些指标与标签均由语义层指导。</li><li>应用层：向语义层发起逻辑查询，由语义层选择引擎，生成物理 SQL。</li></ul><p><strong>架构优势：</strong></p><ul><li>可以形成统一视图，对于核心指标和标签的定义进行统一查看及管理。</li><li>应用层与物理引擎完成解耦，可进一步对更加灵活易用的架构进行探索：如何对相关指标和标签进行加速，如何在时效性和集群的稳定性之间平衡等。</li></ul><p><strong>存在的问题：</strong></p><p>因为当前架构是对单个标签和指标进行了定义，因此如何在查询计算时自动生成一个准确有效的 SQL 语句是非常有难度的。如果你有相关的经验，期待有机会可以一起探索交流。</p><h1>优化经验</h1><p>从上文已知，为更好地实现业务需求，数据架构演进到 4.0 版本，其中 <strong>Apache Doris 作为分析加速场景的解决方案在整个系统中发挥着重要的作用</strong>。接下来将从场景需求、数据导入、查询优化以及成本优化四个方面出发，分享基于 Doris 的读写优化经验，希望给读者带来一些参考。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="场景需求">场景需求<a href="#场景需求" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b03fed188c0c4e8d8761b2e10f52954e~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>目前我们有 800+ 标签， 1300+ 指标，对应 TDW 中有 80 + Source 表，单个标签、指标的最大基数达到了 2 亿+。我们希望将这些数据从 TDW 加速到 Doris 中完成标签画像和指标的分析。<strong>从业务的角度，需要满足以下要求：</strong></p><ul><li><strong>实时可用</strong>：标签/指标导入以后，需实现数据尽快可用。不仅要支持常规离线导入 T+1 ，同时也要支持实时打标场景。</li><li><strong>部分更新</strong>：因每个 Source 表由各自 ETL 任务产出对应的数据，其产出时间不一致，并且每个表只涉及部分指标或标签，不同数据查询对时效性要求也不同，因此架构需要支持部分列更新。</li><li><strong>性能高效</strong>：具备高效的写入能力，且在圈选、洞察、报表等场景可以实现秒级响应。</li><li><strong>控制成本</strong>：在满足业务需求的前提下，最大程度地降低成本；支持冷热数据精细化管理，支持标签灵活上下架。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据导入方案">数据导入方案<a href="#数据导入方案" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cacb43aa7815479c835d5401bd943ce9~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>为了减轻 Doris 写入压力，我们考虑在数据写入 Doris 之前，尽量将数据生成宽表，再写入到 Doris 中。<strong>针对宽表的生成，我们有两个实现思路</strong>：第一个是在 TDW 数仓中生成宽表；第二个是 Flink 中生成宽表。我们对这两个实现思路进行了实践对比，最终决定选择第二个实现思路，原因如下：</p><p>在 TDW 中生成宽表，虽然链路简单，但是弊端也比较明显。</p><ul><li>存储成本较高， TDW 除了要维护离散的 80 +个 Source 表外，还需维护 1 个大宽表、2 份冗余的数据。</li><li>实时性比较差，由于每个 Source 表产出的时间不一样，往往会因为某些延迟比较大的 Source 表导致整个数据链路延迟增大。</li><li>开发成本较高，该方案只能作为离线方式，若想实现实时方式则需要投入开发资源进行额外的开发。</li></ul><p>而<strong>在 Flink 中生成宽表，链路简单、成本低也容易实现</strong>，主要流程是：首先用 Spark 将相关 Source 表最新数据离线导入到 Kafka 中， 接着使用 Flink 来消费 Kafka，并通过主键 ID 构建出一张大宽表，最后将大宽表导入到 Doris 中。如下图所示，来自数仓 N 个表中 ID=1 的 5 条数据，经过 Flink 处理以后，只有一条 ID=1 的数据写入 Doris 中，大大减少 Doris 写入压力。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a06412b91a9d47da872a0a9796ffe257~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>通过以上导入优化方案，<strong>极大地降低了存储成本</strong>， TDW 无需维护两份冗余的数据，Kafka 也只需保存最新待导入的数据。同时该方案<strong>整体实时性更好且可控</strong>，并且大宽表聚合在 Flink 中执行，可灵活加入各种 ETL 逻辑，离线和实时可对多个开发逻辑进行复用，<strong>灵活度较高</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据模型选择"><strong>数据模型选择</strong><a href="#数据模型选择" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>目前我们生产环境所使用的版本为 Apache Doris 1.1.3，我们对其所支持的 Unique 主键模型、Aggregate 聚合模型和 Duplicate 明细模型进行了对比 ，相较于 Unique 模型和 Duplicate 模型，<strong>Aggregate 聚合模型满足我们部分列更新的场景需求</strong>：</p><p>Aggregate 聚合模型可以支持多种预聚合模式，可以通过<code>REPLACE_IF_NOT_NULL</code>的方式实现部分列更新。数据写入过程中，Doris 会将多次写入的数据进行聚合，最终用户查询时，返回一份聚合后的完整且正确的数据。</p><p>另外两种数据模型适用的场景，这里也进行简单的介绍：</p><ul><li>Unique 模型适用于需要保证 Key 唯一性场景，同一个主键 ID 多次导入之后，会以 append 的方式进行行级数据更新，仅保留最后一次导入的数据。在与社区进行沟通后，确定<strong>后续版本 Unique 模型也将支持部分列更新</strong>。</li><li>Duplicate 模型区别于 Aggregate 和 Unique 模型，数据完全按照导入的明细数据进行存储，不会有任何预聚合或去重操作，即使两行数据完全相同也都会保留，因此 Duplicate 模型适用于既没有聚合需求，又没有主键唯一性约束的原始数据存储。</li></ul><p>确定数据模型之后，我们在建表时如何对列进行命名呢？可以直接使用指标或者是标签的名称吗？</p><p>在使用场景中通常会有以下几个需求：</p><ul><li>为了更好地表达数据的意义，业务方会有少量修改标签、指标名称的需求。</li><li>随着业务需求的变动，标签经常存在上架、下架的情况。</li><li>实时新增的标签和指标，用户希望数据尽快可用。</li></ul><p>Doris 1.1.3 是不支持对列名进行修改的，如果直接使用指标/标签名称作为列名，则无法满足上述标签或指标更名的需求。而对于上下架标签的需求，如果直接以 drop/add column 的方式实现，则会涉及数据文件的更改，该操作耗时耗力，甚至会影响线上查询的性能。</p><p>那么，有没有更轻量级的方式来满足需求呢？接下来将为大家分享相关解决方案及收益：****</p><ul><li><strong>为了实现少量标签、指标名称修改</strong>，我们用 MySQL 表存储相应的元数据，包括名称、全局唯一的 ID 和上下架状态等信息，比如标签歌曲名称<code>song_name</code>的  ID 为 4，在 Doris 中存储命名为 a4，用户使用更具有业务含义<code>song_name</code>进行查询。在查询 Doris 前，我们会在查询层将 SQL 改写成具体的列名 a4。这样名称的修改只是修改其元数据，底层 Doris 的表结构可以保持不变。</li><li><strong>为了实现标签灵活上下架</strong>，我们通过统计标签的使用情况来分析标签的价值，将低价值的标签进入下架流程。下架指的是对元信息进行状态标注，在下架标签重新上架之前，不会继续导入其数据，元信息中数据可用时间也不会发生变化。</li><li><strong>对于实时新增标签/指标</strong>，我们基于名称 ID 的映射在 Doris 表中预先创建适量 ID 列，当标签/指标完成元信息录入后，直接将预留的 ID 分配给新录入的标签/指标，避免在查询高峰期因新增标签/指标所引起的 Schema Change 开销对集群产生的影响。经测试，用户在元信息录入后 10 分钟内就可以使用相应的数据。</li></ul><p>值得关注的是，<strong>在社区近期发布的 1.2.0 版本中，增加了 Light Schema Change 功能， 对于增减列的操作不需要修改数据文件，只需要修改 FE 中的元数据，从而可以实现毫秒级的 Schame Change 操作</strong>。同时开启 Light Schema Change 功能的数据表也可以支持列名的修改，这与我们的需求十分匹配，后续我们也会及时升级到最新版本。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="写入优化"><strong>写入优化</strong><a href="#写入优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>接着我们在数据写入方面也进行了调整优化，这里几点小经验与大家分享：</p><ul><li>Flink 预聚合：通过主键 ID 预聚合，减少写入压力。（前文已说明，此处不再赘述）</li><li>写入 Batch 大小自适应变更：为了不占用过多 Flink 资源，我们实现了从同一个 Kafka Topic 中消费数据写入到不同 Doris 表中的功能，并且可以根据数据的大小自动调整写入的批次，尽量做到攒批低频写入。</li><li>Doris 写入调优：针对- 235 报错进行相关参数的调优。比如设置合理的分区和分桶（Tablet 建议1-10G），同时结合场景对 Compaction 参数调优：</li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">max_XXXX_compaction_thread</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">max_cumulative_compaction_num_singleton_deltas</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>优化 BE 提交逻辑：定期缓存 BE 列表，按批次随机提交到 BE 节点，细化负载均衡粒度。</li></ul><blockquote><p>优化背景：在写入时发现某一个 BE负载会远远高于其他的 BE，甚至出现 OOM。结合源码发现：作业启动后会获取一次 BE 地址列表，从中随机选出一个 BE 作为 Coordinator 协调者，该节点主要负责接收数据、并分发到其他的 BE 节点，除非作业异常报错，否则该节点不会发生切换。</p><p>对于少量 Flink 作业大数据场景会导致选中的 BE 节点负载较高，因此我们尝试对 BE 提交逻辑进行优化，设置每 1 小时缓存一次 BE 列表，每写入一个批次都随机从 BE 缓存列表中获取一个进行提交，这样负载均衡的粒度就从 job 级别细化到每次提交的批次，使得 BE 间负载更加的均衡，这部分实现我们已经贡献到社区，欢迎大家一起使用并反馈。</p><ul><li><a href="https://github.com/apache/doris-spark-connector/pull/59" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris-spark-connector/pull/59</a></li><li><a href="https://github.com/apache/doris-spark-connector/pull/60" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris-spark-connector/pull/60</a></li><li><a href="https://github.com/apache/doris-spark-connector/pull/61" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris-spark-connector/pull/61</a></li></ul></blockquote><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf32f571d41b473580c9affc6b1eb012~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>通过以上数据导入的优化措施，使得整体导入链路更加稳定，每日离线<strong>导入时长下降了 75%</strong> ，数据版本累积情况也有所改善，其中 cumu compaction 的<strong>合并分数更是从 600+直降到 100 左右</strong>，优化效果十分明显。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a9e49997121435a887ce81265f2c9e7~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="查询优化">查询优化<a href="#查询优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>目前我们的场景指标数据是以分区表的形式存储在 Doris 中， ES 保留一份全量的标签数据。在我们的使用场景中，标签圈选的使用率很高，大约有 60% 的使用场景中用到了标签圈选，在标签圈选场景中，通常需要满足以下几个要求：</p><ul><li>用户圈选逻辑比较复杂，数据架构需要支持同时有上百个标签做圈选过滤条件。</li><li>大部分圈选场景只需要最新标签数据，但是在指标查询时需要支持历史的数据的查询。</li><li>基于圈选结果，需要进行指标数据的聚合分析。</li><li>基于圈选结果，需要支持标签和指标的明细查询。</li></ul><p>经过调研，我们最终采用了 <strong>Doris on ES 的解决方案</strong>来实现以上要求，将 Doris 的分布式查询规划能力和 ES 的全文检索能力相结合。Doris on ES 主要查询模式如下所示：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT tag, agg(metric) </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   FROM Doris </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   WHERE id in (select id from Es where tagFilter)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   GROUP BY tag</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在 ES 中圈选查询出的 ID 数据，以子查询方式在 Doris 中进行指标分析。</p><p>我们在实践中发现，查询时长跟圈选的群体大小相关。如果从 ES 中圈选的群体规模超过 100 万时，查询时长会达到 60 秒，圈选群体再次增大甚至会出现超时报错。经排查分析，主要的耗时包括两方面：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a599a1c478dd4fe49572958b9e7582e2~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><ul><li>BE 从 ES 中拉取数据（默认一次拉取 1024 行），对于 100 万以上的群体，网络 IO 开销会很大。</li><li>BE 数据拉取完成以后，需要和本地的指标表做 Join，一般以 SHUFFLE/BROADCAST 的方式，成本较高。</li></ul><p><strong>针对这两点，我们进行了以下优化：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d617b0bd683410b9189a4e3129dede8~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><ul><li>增加了查询会话变量<code>es_optimize</code>，以开启优化开关；</li><li>数据写入 ES 时，新增 BK 列用来存储主键 ID Hash 后的分桶序号，算法和 Doris 的分桶算法相同（CRC32）；</li><li>BE 生成 Bucket Join 执行计划，将分桶序号下发到 BE ScanNode 节点，并下推到 ES；</li><li>ES 对查询出的数据进行 Bitmap 压缩，并将数据的多批次获取优化为一次获取，减少网络 IO 开销；</li><li>Doris BE 只拉取和本地 Doris 指标表相关 Bucket 的数据，直接进行本地 Join，避免 Doris BE 间数据再 Shuffle 的过程。</li></ul><p>通过以上优化措施，<strong>百万分群圈选洞察查询时间从最初的 60 秒缩短到 3.7 秒</strong>，性能显著提升！</p><p>经过与社区沟通交流，<strong>Apache Doris 从 2.0.0 版本开始，将支持倒排索引</strong>。可进行文本类型的全文检索；支持中文、英文分词；支持文本、数值日期类型的等值和范围过滤；倒排索引对数组类型也提供了支持，多个过滤条件可以任意进行 AND OR NOT 逻辑组合。由于高性能的向量化实现和面向 AP 数据库的精简优化，<strong>Doris 的倒排索引相较于 ES 会有 3~5 倍性价比提升</strong>，即将在 2 月底发布的 2.0 preview 版本中可用于功能评估和性能测试，相信在这个场景使用后会有进一步的性能提升。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="成本优化">成本优化<a href="#成本优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在当前大环境下，降本提效成为了企业的热门话题，<strong>如何在保证服务质量的同时降低成本开销</strong>，是我们一直在思考的问题。在我们的场景中，<strong>成本优化主要得益于 Doris 自身优秀的能力</strong>，这里为大家分享两点：</p><p><strong>1、冷热数据进行精细化管理。</strong></p><ul><li>利用 Doris TTL 机制，在 Doris 中只存储近一年的数据，更早的数据放到存储代价更低的 TDW 中；</li><li>支持分区级副本设置，3 个月以内的数据高频使用，分区设置为 3 副本 ；3-6 个月数据分区调整为 2 副本；6 个月之前的数据分区调整为1 副本；</li><li>支持数据转冷， 在 SSD 中仅存储最近 7 天的数据，并将 7 天之前的数据转存到到 HDD 中，以降低存储成本；</li><li>标签上下线，将低价值标签和指标下线处理后，后续数据不再写入，减少写入和存储代价。</li></ul><p><strong>2、降低数据链路成本。</strong></p><p>Doris 架构非常简单，只有FE 和 BE 两类进程，不依赖其他组件，并通过一致性协议来保证服务的高可用和数据的高可靠，自动故障修复，运维起来比较容易;</p><ul><li>高度兼容 MySQL 语法，支持标准 SQL，极大降低开发人员接入使用成本；</li><li>支持多种联邦查询方式，支持对 Hive、MySQL、Elasticsearch 、Iceberg 等组件的联邦查询分析，降低多数据源查询复杂度。</li></ul><p>通过以上的方式，<strong>使得存储成本降低 42%，开发与时间成本降低了 40%</strong> ，成功实现降本提效，后续我们将继续探索！</p><h1>未来规划</h1><p>未来我们还将继续进行迭代和优化，我们计划在以下几个方向进行探索：</p><ul><li>实现自动识别冷热数据，用 Apache Doris 存储热数据，Iceberg 存储冷数据，利用 Doris 湖仓一体化能力简化查询。</li><li>对高频出现的标签/指标组合，通过 Doris 的物化视图进行预计算，提升查询的性能。</li><li>探索 Doris 应用于数仓计算任务，利用物化视图简化代码逻辑，并提升核心数据的时效性。</li></ul><p>最后，感谢 Apache Doris 社区和 <a href="https://selectdb.com" target="_blank" rel="noopener noreferrer">SelectDB</a> 的同学，感谢其快速响应和积极支持，未来我们也会持续将相关成果贡献到社区，希望 Apache Doris 飞速发展，越来越好！</p><p><strong># 相关链接：</strong></p><p><strong>SelectDB 官网</strong>：</p><p><a href="https://selectdb.com" target="_blank" rel="noopener noreferrer">https://selectdb.com</a> </p><p><strong>Apache Doris 官网</strong>：</p><p><a href="http://doris.apache.org" target="_blank" rel="noopener noreferrer">http://doris.apache.org</a></p><p><strong>Apache Doris Github</strong>：</p><p><a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris</a></p>]]></content>
        <author>
            <name>张俊 &amp; 代凯</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[复杂查询响应速度提升10+倍，度言软件基于 Apache Doris 实时数仓建设实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Duyansoft</id>
        <link href="https://doris.apache.org/zh-CN/blog/Duyansoft"/>
        <updated>2023-02-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>作者 | 杭州度言软件大数据团队</p><p>编辑整理：SelectDB</p><p>杭州度言软件有限公司（度言软件）成立于2014年，是信贷不良资产处置技术服务供应商，以“智能科技赋能不良资产处置，推动贷后行业合规高效发展”为使命，运用云通讯、大数据、人工智能等智能科技为信贷不良资产处置业务赋能，提供贷后管理通信能力支撑，实现了催收作业的智能化管理，客户群体为银行、消费金融公司、AMC 等金融机构和为这些机构提供人力资源外包服务的相关公司，目前已拥有 2000 多家企业客户。</p><p>度言软件以围绕信贷不良资产案件高效流转管理为目的核心，从机构管理、团队管理、坐席管理、外呼作业、调解法诉等环节入手，帮助客户构建数智化的业务管理体系，以数字化系统提升管理效能、以智能化工具赋能处置作业，打通金融机构、外包服务公司、司法系统等多方的业务系统，并按照监管要求<strong>对外呼行为、录音文件、沟通记录等案件相关数据进行记录、汇集、稽核、统计和分析，具有海量账号同时登陆、数据请求高并发、多来源数据汇总接入的特点要求。</strong></p><h1>业务需求</h1><p>2021 年之前，度言软件旗下产品的数据需求主要由传统数据库 MySQL，MongoDB，ElasticSearch 为主的技术架构来实现，近两年随着业务不断发展带而来数据量的高速增长，传统的数仓技术架构已初显瓶颈，难以满足客户日益丰富多样化的数据及分析需求。为了给客户提供更优质的服务体验，度言软件亟需对现有的技术架构做出优化和重构。</p><h1>早期架构及痛点</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数仓架构-10-版本">数仓架构 1.0 版本<a href="#数仓架构-10-版本" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>初创期间，由于公司业务量相对较少，主要还是以 OLTP 业务和少量的业务报表服务为主，并且对于数据分析方面的需求也很少，仅通过传统的数据库基本就能满足早期的业务数据需求。<strong>数仓</strong> <strong>架构 1.0 如下图所示：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b90115e4f1124a7480f095c113412dce~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数仓架构-20-版本">数仓架构 2.0 版本<a href="#数仓架构-20-版本" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>随着公司业务的不断扩展，数据体量也出现极速增长的态势，业务侧对于数据分析方面的需求也逐渐多了起来，为此我们成立了专门的大数据团队，为搭建新的数仓及业务数据分析需求进行服务。<strong>如下图所示为数仓架构 2.0</strong> ：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8556d98d920445ffa9290843aff41e4e~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>数仓架构 2.0 版本是基于 MaxCompute + Hologres/MySQL 来搭建的。数据来源主要有 MySQL 和 MongoDB 的业务数据以及埋点日志数据；数据首先采集到数据总线 DataHub 中，后经过 DataHub 直接导入到 MaxCompute，MaxCompute 作为一个离线数仓，我们将其进行了传统的数仓分层；数据的加工处理和分析计算主要在离线数仓中进行，并将计算好的结果导出到 MySQL中，来对接 QuickBI 展示报表。此外，我们还尝试了将 Hologres 用作实时数仓，作为 MongoDB 的替换方案，用于业务上的查询系统。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="早期架构存在的问题">早期架构存在的问题：<a href="#早期架构存在的问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ol><li><strong>响应速度较慢</strong>。MySQL 对于大表的聚合计算并不友好，响应速度较慢。产品侧要求数据查询响应时间在 5 秒以内，虽然我们也基于 MySQL 进行了许多优化，但优化效果十分有限，仍无法达到 5s 的响应要求；我们甚至尝试了直接用 MaxCompute 对接 QuickBI，希望基于 MaxCompute 的查询加速和 QuickBI 的缓存来帮助我们解决问题，然而结果并不理想。</li><li><strong>维系维度表成本高、难度大。</strong> 离线数仓在数据同步的时效性上并不占优势(每 5 分钟进行一次批量同步)，因此不太适合数据频繁更新和删除的场景，同时也给维度表的维护带来了额外的工作量。在数据更新和删除场景中，我们需要定期通过过滤和去重来保持数据的一致性，而事实上，大多时候需要报表数据实时关联维度表，这让我们直接放弃了在离线数仓中维系维度表的方案。</li><li><strong>不支持高并发点查询场景。</strong> 原实时数仓虽然可以满足我们对数据分析的部分性能要求，但其对高并发的点查场景并不太友好，不管是采用列式存储还是行级存储建表，优化之后的响应时长在 500 毫秒左右，综合来看性价比不算太高。</li></ol><h1>解决思路</h1><p>为了解决上述问题，我们希望理想数仓能具有如下特性：</p><ol><li>实现一站式实时数仓，能同时满足多种不同业务数据需求，大大简化大数据架构体系；</li><li>可同时支持 OLAP，Ad-hoc 和高 QPS 点查场景；</li><li>数据接入友好，写入即可见，对数据增删改和聚合等都有较好的支持；</li><li>架构简单，运维部署和维护简单，有较好的监控体系。</li></ol><h1>技术选型</h1><p>在 2022 年 3 月份，我们对市场上主流的的几款即席查询数据库进行了调研，调研中我们发现每个产品只能满足某 1 个或几个特定的使用场景，没有一个产品可以完全满足所有的选型要求，而同时采用多个产品，将大大增加开发运维成本，同时也会使架构变得更加庞大复杂，这并不符合我们对理想数仓的要求。</p><p>正在这时，我们从开源社区、技术媒体等渠道了解到了<a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer"> Apache Doris</a> ，经初步调研，我们发现 Doris 基本可以满足我们对理想数仓的所有要求。接着我们对 Doris 展开了深入调研，并使我们最终决定使用 Doris：Doris 架构非常简单，只有 FE 和 BE 两类进程，这两类进程都可以进行横向扩展，单集群可以支持到数百台机器、数十 PB 的存储容量，并且这两类进程通过一致性协议来保证服务的高可用和数据的高可靠。这种高度集成的架构设计极大的降低了分布式系统的运维成本，同时也不需要依赖于 Hadoop，避免了我们需要投入成本来额外部署 Hadoop 集群。</p><h1>基于 Doris 的新数仓架构设计</h1><p>最初使用 Doris 的初衷是替换部分 MySQL 数据量较大的报表，基于 MySQL 的查询约需要几十秒的响应时间，在替换为 Doris 后，查询性能有了显著提升，几秒内即可返回结果，最长的 SQL 执行时间大概在 8 秒左右，速度相较于之前提升了8 倍。Doris 的初步应用就给了我们一个意外的惊喜，因此我们决定使用 Doris 完全替换掉早期数仓中的 MySQL，在这使用过程中，我们又发现 Doris 远比我们想象的要强大，目前已将客户报表及公司内部运营决策数据全部迁移至 Apache Doris，并计划用 Apache Doris 来替换 MongoDB 和 ElasticSearch，用于业务上高 QPS 的点查场景。<strong>以下是基于 Doris 的新数仓架构设计及使用情况：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ee756d4fef24d07875b14855ff91f63~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据建模"><strong>数据建模：</strong><a href="#数据建模" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>我们在业务上使用最多的是 Unique 模型和 Aggregate 模型，这两种模型基本能够满足业务需求。</p><ul><li>Unique 模型主要用于维度表和业务表(原始表)的接入，确保数据导入过程中的一致性。</li><li>Aggregate主要用于报表数据的导入，Aggregate 分为 Key (维度列) 和 Value（指标列），Value 列支持四种聚合方式：<code>sum</code> ,<code>replace</code>,<code>max</code>,<code>min</code>。当前主要以<code>replace</code> 聚合方式为主，方便统计数据重复导入和修正结果，后续也会尝试更多的方式来充分发挥 Doris 的性能。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据接入"><strong>数据接入：</strong><a href="#数据接入" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ol><li>使用 Flink-Doris-Connector 进行实时导入：主要用于业务数据的导入，基于MySQL 的 Binlog 日志写入到 Kafka 后，通过 Flink 解析加工后准实时写入 Doris。</li><li>使用 DataX 进行离线导入：主要用于对接离线数仓已计算后的报表数据。</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据开发"><strong>数据开发：</strong><a href="#数据开发" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>目前 Doris 主要以提供终端查询为主，复杂的 SQL 开发任务运行比较少，为尽可能减少 Doris 在数据加工方面的资源消耗，当前仅有报表集群在凌晨执行少量的 SQL 任务，主要以 Doris SQL 通过 insert into 的方式来导入。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据管理"><strong>数据管理：</strong><a href="#数据管理" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Doris 支持将当前数据以文件的形式通过 Broker 备份到远端存储系统中，后可以通过恢复命令从远端存储系统中将数据恢复到任意 Doris 集群。通过该功能，Doris 可支持定期对数据进行快照备份，也可以通过该功能在不同集群间进行数据迁移。我们也会定期将集群数据备份到阿里云 OSS 上，作为备用数据恢复方案。另外，在这期间我们对 Doris 集群进行了一次拆分，将报表集群和业务上的高并发查询集群分开，采用了 Doris 的数据备份和迁移功能。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="监控和报警"><strong>监控和报警：</strong><a href="#监控和报警" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>我们使用官网推荐的 Prometheus 和 Grafana 进行监控项的采集和展示，Doris 本身提供了丰富的监控指标和标准监控模版，可以非常便捷地对 Doris 集群使用情况进行监控和报警。</p><p>另外，为了进一步对慢 SQL 进行优化，我们还部署了审计日志插件，对于特定用户和特定的慢 SQL 进行优化和资源限制。如下是我们日常使用中的一些指标：</p><p><strong>慢 SQL 查询：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96037a4c50314c0dbfefd6c63855fac8~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>对于一些长文本 SQL，无法完全展示，可以进一步查看<code>fe.audit.log</code>。</p><p><strong>主要查询统计指标：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0e838af4538449aa3fed993d3ea982f~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h1>优化实践：</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="提高并发">提高并发<a href="#提高并发" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>我们考虑在资源给定的情况下，如何最大程度地提高并发。刚开始引入 Doris 集群的时候，我们尝试对复杂 SQL 进行压测（SQL 层面优化已完成），但始终无法达到预期的压测效果。后来我们尝试<strong>调低</strong> <code>parallel_fragment_exec_instance_num</code> <strong>的值</strong>，顺利完成了压测目标。</p><blockquote><p><strong>需要说明的是：</strong></p><p><code>parallel_fragment_exec_instance_num </code>指的是 Scan Node 在每个 BE 节点上执行实例的个数，相当于在整个查询计划执行过程中的并发度，调高该参数可以提升查询效率，但同时也会增加更多机器资源的消耗。因此在资源有限且查询耗时满足业务需求的情况下，通过调低参数来节省单个 SQL 的资源消耗，有助于提高并发表现。另外，我们通过 Doris 社区了解到，在即将发布的新版本中将实现参数自动设置，无需进行手动调整。</p></blockquote><p>如下图，我们可以看到，在参数设置为 16 的时候，异常率高达 82.84%，并且期间还出现了 BE 宕机重启，将参数调低至 8 后，异常率也同步降低到了 27.66%。最后我们将参数设置为最小值 1 后，异常率为 0，查询响应也能达到预期目标。</p><p>说明：测试环境已重新取数，配置较低，数据仅用来说明 <code>parallel_fragment_exec_instance_num</code> 变动所带来的效果。</p><p>当参数调整为 1：<code>parallel_fragment_exec_instance_num = 1</code></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b34b8b88a4454d8c903bc682d14b8248~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>当参数调整为 8：<code>parallel_fragment_exec_instance_num = 8</code></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/082a039e65404dbfbd836b5eaa55f45e~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fda87b9110ac45e09091051138bd6b22~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>当参数调整为 16：<code>parallel_fragment_exec_instance_num = 16</code></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ec04a8265644ff0a2440c9499998b89~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="be-内存问题">BE 内存问题<a href="#be-内存问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>最初我们使用的是 Doris 0.15 的版本。由于刚开始处于测试阶段，Doris 集群配置比较低或参数配置的不合理，当某些 SQL 扫描数据量较大时，就可能因为内存问题导致 BE 宕机。</p><p>在向社区咨询后，了解到 Supervisor 是用 Python 开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台 Daemon，并监控进程状态，异常退出时能自动重启，因此我们参照官网给出的例子直接用 Supervisor 对 Doris 的 FE 和 BE 进程进行管理。</p><p>但是在运行了一段时间后，新的问题又出现了(已升级到 1.1.0 版本)。Doris 的 BE 节点内存一直在缓慢上升状态，并且达到了设置的最大内存参数 80% 后仍在继续上涨。后经分析发现 BE 存在内存泄漏问题，因此设置的参数并未生效。为此，我们将 Supervisor 切换为 Systemd 来守护 FE、BE 进程，限制整个节点的内存使用上限。不过在 Doris 1.1.3 推出之后，此问题已得到彻底的修复。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="资源占用">资源占用<a href="#资源占用" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在迁移完新集群后，我们发现通过 Flink-Doris-Connector 数据导入占用非常高的集群资源，虽然设置了按批次写入(每 3s 写入一次 )，以限制数据的导入频率，但集群资源的占用仍未得到较大改善。因此我们在集群资源和数据实时可见性方面做了权衡，介于我们对数据实时性的要求相对不是太高，所以我们将每 3s 写入一次改为每 10s 或 20s 写入一次，调整写入时间后，集群的 CPU 资源占用下降明显，得到改善。</p><h1>应用现状</h1><p>目前度言软件有 2 个 Doris 集群，1 个集群用作线上业务的查询系统，主要是应对高 QPS 的点查场景，我们将原先基于业务库 MySQL 和 MongoDB 的查询迁移至 Doris，一方面减少了业务库的读写压力，同时也提高了用户查询服务的使用体验。在 Doris 中，最复杂的查询在 1 秒以内即可响应，响应速度提升了十几倍；另外 1 个集群主要用作即席查询(AD-Hoc Query)和报表分析，具体包括公司内部使用的所有报表和一些临时查询、客户报表、数据实时大屏。</p><p>总而言之，使用 Doris 替换了部分业务使用场景后，用户在产品上的使用体验有了进一步得到提升，页面打开更加流畅，原本因为查询慢而不能实现的功能，当前已经实现并上线使用。同时在资源成本上也减轻了 MySQL 和 MongoDB 数据库的压力，不需要频繁进行升配和磁盘升级。</p><h1>总结规划</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="效果总结">效果总结<a href="#效果总结" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ol><li>Doris 完美覆盖了原本需要多个技术栈才能实现的业务场景，极大地简化了大数据的架构体系。</li><li>Doris 对 Join 支持较好，因此我们选择了将维度表放到 Doris 中进行维护，相较于之前在离线数仓中进行维护，明显地提高了开发的效率，并降低了数据出错的可能性，满足了业务上对维度表近实时更新的需求。</li><li>Doris 支持 MySQL 协议和标准 SQL，开发人员学习成本低，上手简单，可以快速将原先的业务迁移至 Doris 上来。</li><li>Doris 社区活跃，版本迭代速度快。在遇到任何问题时，都可以向社区求助，<a href="https://cn.selectdb.com/" target="_blank" rel="noopener noreferrer">SelectDB</a> 为 Apache Doris 组建了一支全职专业的技术支持入队，24H 内即可得到社区的响应回复。</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="未来规划">未来规划<a href="#未来规划" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>到目前为止，基于 Doris 的实时数仓搭建已基本完成，但我们对 Doris 的进一步尝试才刚刚开始，比如 BE 的多磁盘部署，物化视图的使用，Doris-On-ES，Doris 多租户和资源划分等。</p><p><strong>此外，我们也希望 Doris 未来能对以下功能进行进一步优化：</strong></p><ol><li>Flink-Doris-Connector 能支持单 Sink 同时写入多张表，不需要再通过分流后多个 Sink 写入。</li><li>物化视图能够支持多表 Join，不再局限于单表。</li><li>进一步优化数据的底层 Compaction，在保证数据可见性的同时能够尽可能降低资源消耗。</li><li>Doris-Manager 提供对慢 SQL 的优化建议以及表信息收集，对于不合理的建表进行一定的提示。</li></ol><p>从 3 月份使用 Doris 以来，我们一直都和 Doris 社区保持着密切的联系，后续我们也将继续围绕 Doris 作为实时数仓应用到更多的业务使用场景中，对于使用中遇到的问题和优化的方案，我们也会持续和社区保持热切联系，为社区进步贡献我们的一份力量。</p>]]></content>
        <author>
            <name>杭州度言软件大数据团队</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[并发提升 10 倍，运算延时降低 70%，领健从 ClickHouse 和 Kudu 到 Apache Doris 数仓升级实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/linkedcare</id>
        <link href="https://doris.apache.org/zh-CN/blog/linkedcare"/>
        <updated>2023-01-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>作者｜杨鷖 资深大数据开发工程师</p><p>领健是健康科技行业 SaaS 软件的引领者，专注于消费医疗口腔和医美行业，为口腔诊所、医美机构、生美机构提供经营管理一体化系统，提供了覆盖单店管理、连锁管理、健康档案/电子病历、客户关系管理、智能营销、B2B交易平台、进销存、保险支付、影像集成、BI商业智能等覆盖机构业务全流程的一体化SaaS软件。 同时通过开放平台连接产业上下游，与优质的第三方平台合作，为机构提供完整配套的一站式服务。 截止当前，领健已经在全国设立了 20 余个分支机构，超过 30000 多家中高端以及连锁机构正在使用其服务。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a0e8025d5fa49d185b2d074a4290a54~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><h1>Doris 在领健的演进历程</h1><p>在进入正文之前，简单了解一下 Doris 在领健的发展历程。最初 Doris 替代 ClickHouse 被应用到数据服务项目中，该项目是领健为旗下客户提供的增值报表服务；后在项目服务中发掘出 Doris 查询性能优异、简单易用、部署成本低等诸多优势，在 2021 年10月，我们决定扩大 Doris 应用范围，将 Doris 引入到公司的数仓中，在 Doris 社区及 SelectDB 专业技术团队的支持下，业务逐步从 Kudu 迁移到 Doris，并在最近升级到 1.1.4 向量化版本。我们将通过本文为大家详细介绍领健基于 Doris 的演进实践及数仓构建的经验。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8f81591dede4eafa811bfa4cbb36456~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><h1>数据服务架构演进</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="项目需求">项目需求<a href="#项目需求" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>领健致力于为医疗行业客户提供精细化门店运营平台，为客户提供了数据报表工具，该工具可实现自助式拖拽设计图表、支持多种自带函数自建、数据实时更新等功能，可以支持门店订单查询、客户管理、收入分析等，以推动门店数字化转型，辅助门店科学决策。为更好实现以上功能，数据报表工具需满足以下特点：</p><ul><li><p>支持复杂查询：客户进行自助拖拽设计图表时，将生成一段复杂的 SQL 查询语句直查数据库，且语句复杂度未知，这将对数据库带来不小的压力，从而影响查询性能。</p></li><li><p>高并发低延时：至少可以支撑 <strong>100 个</strong>并发，并在<strong>1 秒内</strong>得到查询结果；</p></li><li><p>数据实时同步： 报表数据源自于 SaaS 系统，当客户对系统中的历史数据进行修改后，报表数据也要进行同步更改，保持一致，这就要求报表数据要与系统实现实时同步。</p></li><li><p>低成本易部署：SaaS 业务存在私有云客户，为降低私有化部署的人员及成本投入，这要求<strong>架构部署及运维要足够简单。</strong></p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="clickhouse-遭遇并发宕机"><strong>ClickHouse 遭遇并发宕机</strong><a href="#clickhouse-遭遇并发宕机" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>最初项目选用 ClickHouse 来提供数据查询服务，但在运行过程中 ClickHouse 遭遇了严重的并发问题，即 10 个并发就会导致 ClickHouse 宕机，这使其无法正常为客户提供服务，这是迫使我们寻找可以替代 ClickHouse 产品的关键因素。</p><p><strong>除此之外还有几个较为棘手的问题：</strong></p><ol><li>云上 ClickHouse 服务成本非常高，且 ClickHouse 组件依赖性较高，数据同步时 ClickHouse 和 Zookeeper 的频繁交互，会对稳定性产生较大的压力。</li><li>如何进行无缝迁移，不影响客户正常使用。</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="技术选型">技术选型<a href="#技术选型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>针对存在的问题及需求，我们决定进行技术选型，分别对 Doris（0.14）、Clickhous、Kudu 这 3 个产品展开的调研测试。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eff0da8d60d4865898ed629a75baeb7~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>如上表所示，我们对这 3 个产品进行了横向比较，可以看出 Doris 在多方面表现优异：</p><ul><li><p>高并发：Doris 并发性好，可支持上百甚至上千并发，轻松解决 10 并发导致 ClickHouse 宕机问题。</p></li><li><p>查询性能：Doris 可实现毫秒级查询响应，在单表查询中，虽 Doris 与 ClickHouse 查询性能基本持平，但在多表查询中，Doris 远胜于 ClickHouse ，Doris 可以实现在较高的并发下，QPS 不下降。</p></li><li><p>数据更新：Doris 的数据模型可以满足我们对数据更新的需求，以保障系统数据和业务数据的一致性，下文将详细介绍。</p></li><li><p>使用成本：Doris 架构简单，整体部署简单快速，具有完备的导入功能，很好的弹性伸缩能力；同时， Doris 内部可以自动做副本平衡，运维成本极低。而 ClickHouse 及 Kudu 对组件依赖较高，在使用上需要做许多准备工作，这就要求具备一支专业的运维支持团队来处理大量的日常运维工作。</p></li><li><p>标准 SQL：Doris 兼容 MySQL 协议，使用标准 SQL，开发人员上手简单，不需要付出额外的学习成本。</p></li><li><p>分布式 Join ：Doris 支持分布式 Join，而 ClickHouse 由于 Join 查询限制、函数局限性、以及可维护性较差等原因，不满足我们当前的业务需求。</p></li><li><p>社区活跃：Apache Doris 是国内自研数据库，开源社区相当活跃，同时 SelectDB 为 Doris 社区提供了专业且全职团队做技术支持，遇到问题可以直接与社区联系沟通，并能得到快速解决，这对于国外的项目，很大的降低与社区沟通的语言与时间成本。</p></li></ul><p>从以上调研中可以发现，Doris 各方面能力优秀，十分符合我们对选型产品的需求，因此我们使用 Doris 替代了 ClickHouse ，很好解决了ClickHouse 并发性能差、宕机等问题，很好的支撑了数据报表查询服务。</p><h1>数仓架构演进</h1><p>在数据报表的使用过程中，我们逐渐发掘出 Doris 诸多优势，因此决定扩大 Doris 应用范围，将 Doris 引入到公司的数仓中来。<strong>接下来将为大家介绍公司数仓从 Kudu 到 Doris 的演进历程，以及在搭建过程中的优化实践分享。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="早期公司数仓架构">早期公司数仓架构<a href="#早期公司数仓架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>早期的公司数仓架构使用 Kudu、Impala 来作为运算存储引擎，整体架构如下图所示。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08384d4c88a44df2b2043839b4275db3~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>从上图可知，数据通过 Kafka Consumer 进入 ODS 层；通过 Kudu 层满足数据更新需要；运用 Impala 来执行数据运算和查询；通过自研平台 DMEP 进行任务调度。 在 ETL 代码中会使用大量的 Upsert 对数据进行 Merge 操作，那么引入 Doris 的首要问题就是要如何实现 Merge 操作，支持业务数据更新，下文中将进行介绍。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="基于-doris-的新数仓架构设计">基于 Doris 的新数仓架构设计<a href="#基于-doris-的新数仓架构设计" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71287cc9fa804e51a8eaccfa84a0bb94~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>如上图所示，在新架构设计中使用 Apache Doris 负责数仓存储及数据运算；实时数据、 ODS数据的同步从 Kafka Consumter 改为 Flink ；流计算平台使用团队自研的 Duckula；任务调度则引入最新 的 DolphinSchedular，Dolphin schedule 几乎涵盖了自研 DMEP 的大部分功能，同时可以很方便拓展 ETL 的方式，可调度很多不同的任务。</p><h1>优化实践</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据模型选择"><strong>数据模型选择</strong><a href="#数据模型选择" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>上文中提到，当客户对系统中的历史数据修改后，报表数据也要进行同步更改，同时，客户有时只更改某一列的数值，这要求我们需要选择合适的 Doris 模型来满足这些需求。我们在测试中发现，<strong>通过 Aggregate 聚合模型<code>Replace_if_not_null</code> 方式进行数据更新时，可以实现单独更新一列，代码如下：</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">drop table test.expamle_tbl2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE IF NOT EXISTS test.expamle_tbl2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `user_id` LARGEINT NOT NULL COMMENT "用户id",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `date` DATE NOT NULL COMMENT "数据灌入日期时间",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `city` VARCHAR(20) COMMENT "用户所在城市",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `age` SMALLINT COMMENT "用户年龄",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `sex` TINYINT COMMENT "用户性别",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `last_visit_date` DATETIME REPLACE_IF_NOT_NULL COMMENT "用户最后一次访问时间",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `cost` BIGINT REPLACE_IF_NOT_NULL COMMENT "用户总消费",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `max_dwell_time` INT REPLACE_IF_NOT_NULL COMMENT "用户最大停留时间",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `min_dwell_time` INT REPLACE_IF_NOT_NULL COMMENT "用户最小停留时间"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AGGREGATE KEY(`user_id`, `date`, `city`, `age`, `sex`)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRIBUTED BY HASH(`user_id`) BUCKETS 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PROPERTIES (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"replication_allocation" = "tag.location.default: 1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">insert into test.expamle_tbl2 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">values(10000,'2017-10-01','北京',20,0,'017-10-01 06:00:00',20,10,10);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">select * from test.expamle_tbl ;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">insert into test.expamle_tbl2 (user_id,date,city,age,sex,cost)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">values(10000,'2017-10-01','北京',20,0,50);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">select * from test.expamle_tbl ;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如下图所示，当写 50 进去，可以实现只覆盖<code>Cost</code>列，其他列保持不变。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/100bb75cf1e44d068661ebe55b6f2de2~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/210265345caf48c29b128c9c8f46704b~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="doris-compaction-优化">Doris Compaction 优化<a href="#doris-compaction-优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>当 Flink 抽取业务库全量数据、持续不断高频写入 Doris 时，将产生了大量数据版本，Doris 的 Compaction 合并版本速度跟不上新版本生成速度，从而造成数据版本堆积。从下图可看出，BE Compaction Score 分数很高，最高可以达到 400，而健康状态分数应在 100 以下。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dd483fab25e4f768039a24e71504646~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>针对以上我们做了以下调整：</p><ul><li><p>全量数据不使用实时写入的方式，先导出到 CSV，再通过 Stream Load 写入 Doris；</p></li><li><p>降低 Flink 写入频率，增大 Flink 单一批次数据量；该调整会降低数据的实时性，需与业务侧进行沟通，根据业务方对实时性的要求调整相关数值，最大程度的降低写入压力。</p></li><li><p>调节 Doris BE 参数，使更多 CPU 资源参与到 Compaction 操作中；</p><ul><li><code>compaction_task_num_per_disk</code> 单磁盘 Compaction 任务线程数默认值 2，提升后会大量占用CPU资源，阿里云 16 核，提升 1 个线程多占用 6% 左右 CPU。</li><li><code>max_compaction_threads compaction</code>线程总数默认为10。</li><li><code>max_cumulative_compaction_num_singleton_deltas</code> 参数控制一个 CC 任务最多合并 1000 个数据版本，适当改小后单个 Compaction 任务的执行时间变短，执行频率变高，集群整体版本数会更加稳定。</li></ul></li></ul><p>通过调整集群， Compaction Score 稳定在了<strong>50-100，有效解决了版本堆积问题</strong>。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/032dbec263cc42c18a4bfbe7c89ee32b~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>值得关注的是，在 Doris 1.1 版本中对 Compaction 进行了一系列的优化，<strong>在任务调度层面</strong>，增加了主动触发式的 Compaction 任务调度，结合原有的被动式扫描，高效的感知数据版本的变化，主动触发Compaction。<strong>在任务执行层面</strong>，对资源进行隔离，将重量级的 Base Compaction 和轻量级的Cumulative Compaction 进行了物理分离，防止任务的互相影响。同时，<strong>针对高频小文件的导入</strong>，优化文件合并策略，采用梯度合并的方式，保证单次合并的文件都属于同一数量级，逐渐有层次的进行数据合并，减少单个文件参与合并的次数，大幅节省系统消耗。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="负载隔离">负载隔离<a href="#负载隔离" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>最初我们只有 1 个 Doris 集群，Doris 集群要同时支持高频实时写、 高并发查询、ETL 处理以及Adhoc 查询等功能。其中高频实时写对 CPU 的占用很高，而 CPU 的上限决定高并发查询的能力，另外 Adhoc 查询无法预知 SQL 的复杂度，当复杂度过高时也会占用较高的内存资源。这就导致了资源竞争，业务之前互相影响的问题。为解决这些问题，我们进行了以下探索优化。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6657aca763b64629af22fe809322fe5e~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><ol><li><strong>Doris 集群拆分</strong></li></ol><p>最初我们尝试对 Doris 集群进行拆分，我们把 1 个集群拆分为 3 个集群，分别为 ODS 集群、DW 集群、ADS 集群。我们将 CPU 负载最高的 ODS 层分离出去， ETL 时，通过 Doris 外表连接另一个 Doris 集群抽取数据；同时也将 BI 应用访问的集群分离出去，独立为业务提供数据查询。如下所示为各集群负责的任务：</p><ul><li><p>ODS 集群：数仓 ODS 层，Flink 写数据集中在此层进行。</p></li><li><p>DW 集群：数仓 DW 层，DIM 层，主要负责 ETL 处理，Adhoc 查询任务。</p></li><li><p>ADS 集群：数仓 ADS 层，主要支持 Web 应用的数据查询</p></li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3be48754afb749d89f74fff965df965f~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>通过集群拆分，有效降低各个资源间的相互影响，保证每个业务运转都有较充足的资源。但是集群的拆分也存在集群之间数据同步 ETL 时间较长、从 ADS 到 ODS 跨3个集群的数据校验复杂度较高等问题。直到 Doris 0.15 发布后，这些问题也得到了相对有效的解决。</p><ol start="2"><li><strong>资源隔离优化集群资源</strong></li></ol><p>Doris 0.15 版本新增了资源标签功能以及查询 Block 功能，资源标签功能允许 Doris 集群实现资源隔离，该功能有效减少集群之间同步数据的时间，降低了跨集群数据校验复杂度。其次查询 Block 功能的上线，可以对 SQL 进行查询审计，阻塞简单/不合规的查询语句，降低资源占用率，提升查询性能。除此之外，通过资源隔离的方式，我们将 3 个集群合并成 1 个集群，被合并的 6 个入口节点 FE 被释放掉，将节省的资源加到核心的运算节点上来。</p><p>升级到 Doris 0.15 后，我们将 ODS 表的副本修改为 <code>group_ods</code>3份，<code>default</code>3份。 Flink 写入时只写 <code>group_ods</code> 资源组的节点，数据写入后，得益于 Doris 内部的副本同步机制，数据会自动实时同步到 <code>default</code>资源组。ETL 则可以使用 <code>default</code> 资源组的节点资源取用 ODS 数据，进行查询和数据处理。同理 ADS 也做了相同处理，原先需要通过外表进行数据抽取同步的表，均被做成了副本跨资源组的形式。此方式有效缩短了跨集群数据同步的 ETL 时长 。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2805d319336a475b8923bb7651ccafaa~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="离线-etl-内存高">离线 ETL 内存高<a href="#离线-etl-内存高" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>我们使用的是离线 ETL 方式直接在 Doris 上做 ETL 操作，在 Join 时，如果右表数据量比较大的情况下会消耗大量的内存，从而造成 OOM。在 1.0 版本之前内存跟踪能力较弱，容易造成 BE 节点超出 Linux 限制，导致进程被关闭 ，这时候会收到以下报错信息：<code>Host is down</code>或者 <code>Fail to initialize storage reader</code>。在1.0 及更高版本中， Doris 由于优化了内存跟踪，则容易见到以下报错：<code>Memory exceed limit. Used: XXXX ,Limit XXXX.</code></p><p><strong>针对内存受限问题，我们开始寻找优化方案，另外由于公司内部资源受限，优化方案必须在不增加集群成本的情况下把超出集群负荷的任务跑通。这里为大家介绍 2 个解决方法：</strong></p><ol><li>优化调整 Join 的方式：</li></ol><p>Doris 内部 Join 分为 4 种，其内存开销以及优先级如下图所示：</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0009e1b36db3405c8351e56e25a6635a~tplv-k3u1fbpfcp-zoom-1.image" alt="img" class="img_ev3q"></p><p>从上图可知，Join 类型优先级从左往右依次变低，Shuffle 的优先级最低，排在 Broadcast 之后。值得注意的是， Broadcast 内存开销非常大，它将右表广播到所有 BE 节点，这相当于每个 BE 节点会消耗一个右表的内存，这将造成很大的内存开销。<strong>针对 Broadcast 比较大的内存开销，我们通过 Hint 条件强制 Join 类型的方式，使 Join 语句跳过 Broadcast 到 Shuffle Join ，从而降低内存消耗</strong>。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">select * from a join [shuffle] b on a.k1 = b.k1;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li><strong>数据分批处理</strong></li></ol><p>我们尝试将数据按照时间分批，每批涵盖某一个或某几个时间段的数据，分批进行 ETL，有效降低内存消耗，避免 OOM 。分批须知：需要将分批的标记列放在主键中，最大程度提升搜索数据的效率；注意分桶和分区的设置方式，保证每个分区的数据量都比较均衡，避免个别分区内存占用较高的问题。</p><h1>总结</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="新架构收益"><strong>新架构收益：</strong><a href="#新架构收益" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ul><li><p>基于 Doris 的新数仓架构不再依赖 Hadoop 生态组件，运维简单，维护成本低。</p></li><li><p>具有更高性能，使用更少的服务器资源，提供更强的数据处理能力。</p></li><li><p>支持高并发，能直接支持 WebApp 的查询服务。</p></li><li><p>支持外表，可以很方便的进行数据发布，将数据推送其他数据库中。</p></li><li><p>支持动态扩容，数据自动平衡。</p></li><li><p>支持多种联邦查询方式，支持 Hive、ES、MySQL 等</p></li></ul><p>得益于新架构的优异能力，我们所用集群从 <strong>18 台 16C128G 减少到 12 台 16C128G</strong>，集群资源较之前<strong>节省了33%</strong> ，大大降低了投入成本；并且运算性能得到大幅提升，在 Kudu 上 <strong>3 小时</strong>即可完成的 ETL 任务， Doris 只需要 <strong>1 小时</strong>即可完成 。除此之外，高频更新的场景下，Kudu 内部数据碎片文件不能进行自动合并，表的性能会越来越差，需要定期重建；而Doris 内部的 Compaction 机制可以有效避免此问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="社区寄语">社区寄语：<a href="#社区寄语" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>首先，Doris 的使用成本很低，仅需要 3 台低配服务器、甚至是台式机，就能相对容易的部署一套基于 Doris 的数仓作为数据中台基础；我认为对于想要进行数字化，但介于资源投入有限而又不想落后于市场的企业来说，非常建议尝试使用 Apache Doris ，Doris 可以助力企业低成本跑通整个数据中台。</p><p>其次，Doris 是一款国人自研的的 MPP 架构分析型数据库，这令我感到很自豪，同时其社区十分活跃、便于沟通，Doris 背后的商业化公司 SelectDB 为社区组建了一支专职技术团队，任何问题都能在 1 小时内得到响应，近 1 年社区更是在 SelectDB 的持续推动下，推出了一系列十分抗打的新特性。另外社区在版本迭代时会认真考虑中国人的使用习惯，这些会为我们的使用带来很多便利。</p><p>最后，感谢 Doris 社区和 SelectDB 团队的全力支持，也欢迎开发者以及各企业多多了解 Doris、使用 Doris，支持国产数据！</p><h1>1.2.0 版本传送门</h1><p>Apache Doris 于 2022 年 12 月 7 日迎来 1.2.0 Release 版本的正式发布！新版本中<strong>实现了全面的向量化、实现多场景查询性能 3-11 倍的提升</strong>，在 Unique Key 模型上<strong>实现了 Merge-on-Write 的数据更新模式、数据高频更新时查询性能提升达 3-6 倍</strong>，增加了 Multi-Catalog 多源数据目录、<strong>提供了无缝接入</strong> <strong>Hive</strong>、ES、Hudi、Iceberg 等外部数据源的能力 <strong>，引入了 Light Schema Change 轻量表结构变更、</strong> 实现毫秒级的 Schema Change 操作<strong>并可以借助 Flink CDC</strong> 自动同步上游数据库的 DML 和 <strong>DDL</strong> <strong>操作</strong>，以 JDBC 外部表替换了过去的 ODBC 外部表，支持了 Java UDF 和 Romote UDF 以及 Array 数组类型和 JSONB 类型，修复了诸多之前版本的性能和稳定性问题，推荐大家下载和使用！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="下载安装">下载安装<a href="#下载安装" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>GitHub下载：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdoris%2Freleases" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/releases</a></p><p>官网下载页：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoris.apache.org%2Fdownload" target="_blank" rel="noopener noreferrer">https://doris.apache.org/download</a></p><p>源码地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdoris%2Freleases%2Ftag%2F1.1.3-rc024" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/releases/tag/1.2.0-rc04</a></p>]]></content>
        <author>
            <name>杨鷖</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[下一个十年，我们需要一款什么样的 OLAP 数据库？]]></title>
        <id>https://doris.apache.org/zh-CN/blog/summit</id>
        <link href="https://doris.apache.org/zh-CN/blog/summit"/>
        <updated>2023-01-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1><strong>十年对于数据库意味着什么？</strong></h1><p>身处在日新月异的时代，我们见惯了技术的兴起与繁荣、变迁与衰落，甚至是朝荣夕灭。信息技术以前所未有的速度更迭，给周遭事物带来了颠覆性地变化。数据库亦是如此，无数数据库悄然湮没在技术更迭的浪潮里，直到在浩渺如海的代码片段中都找不到些许印记。而有的则历久而弥新，经受了时间的考验，彰显出强大的生命力，并以更加繁茂的姿态扎根生长。</p><p>十年对于数据库而言，可能是一段从诞生到消逝的完整软件生命周期，也可能是迈过里程碑之后的全新旅程。</p><p>所以从 MySQL 1.0 版本诞生，到具备颠覆性意义的 MySQL 5.7 版本正式发布，时间跨度刚好是十年，而十年之后的故事，大家已经都知道了。</p><p>所以从 Benoit、Thierry、Marcin 联合创建 Snowflake，到在纽交所成功上市、成为软件行业有史以来最大规模的IPO，再到全面开启云数据仓库时代，时间跨度也差不多十年。</p><p><strong>而对于 Apache Doris，十年意味着什么？</strong></p><p>留个悬念，在回答这个问题之前，我们不妨来回顾下社区发展历程。</p><p>尽管最早的历史可以追溯到 2008 年的百度凤巢广告系统，但彼时非 SQL 的单机查询引擎加 KV 存储系统在产品形态上与 OLAP 还有着较大的差异。</p><p><strong>正式确立 OLAP 数据库这一形态是在 2013 年</strong>。通过自研全列式存储引擎 OLAP Engine 并基于 Apache Impala 改造了全新的 MPP 查询引擎，自此，Doris 真正成为了具备大数据量下高效支持数据分析能力的 OLAP 数据库，并在百度内部大规模应用，成为了百度内部统一的 OLAP 分析平台。</p><p>往往一个内部项目的发展会有两种演进模式，一种是随着需求的增加系统架构日益臃肿，当面对较为灵活的需求，常因改动成本过大而被彻底重构。另一种则是长期服务某一固定场景、需求逐渐收敛乃至停滞，最终被快速革新的外部技术彻底取代。而开源则是内部项目的一场新生，在更广阔的应用场景、更多样的开发者群体以及更高效的研发模式加持下开启新的篇章。</p><p>于是在数个版本的迭代与优化后，2017年 Doris 的前身在 GitHub 上开源，2018 年进入 Apache 基金会孵化，并正式更名为 Apache Doris。（GitHub 地址：<a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris</a>）</p><p><strong>时至 2022 年，正是 Apache Doris 在 OLAP 领域深耕的十年之际。</strong></p><p><strong># 我们该如何回顾过去的 2022 年？</strong></p><p>2022 年，外部世界正处在前所未有的变化之中，无数魔幻时刻在现实中发生。需要庆幸的是，技术和开源的力量帮助我们穿越了许多不确定性。而这一年势必成为 Apache Doris 发展历程中有着浓墨重彩的一年，我们从几个角度来回顾一下 Apache Doris 过去一年的发展：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="社区重要指标"><strong>社区重要指标</strong><a href="#社区重要指标" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/370bf10ea2304bc3a2156ea1e6ccaa96~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p><strong>过去一年中：</strong></p><ul><li>社区累计贡献者的数量从 200 余位增长至近 420 位，同比增长<strong>超过 100%</strong> ，目前仍在持续上升中。</li><li>每月活跃贡献者的数量从 50 位增长至 100 位，同样呈现<strong>翻倍</strong>增长的趋势。</li><li>GitHub Star 数量从 3.6k 增长至 6.8k，多次登上 GitHub Trengding 日/周/月度<strong>榜单前列</strong>。</li><li>全部 Commits 数量从 3.7k 增长至 7.6k，过去一年新提交代码量超越了以往多年累加总和。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f69a1b9ade34d60afd9de9e8bb53dcd~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>从这些数据中，我们可以感受到 2022 年是 Apache Doris 全面爆发的一年，各个维度数据指标几乎都有了 100% 的增长。这一年的努力也使 <strong>Apache Doris 成为了全球大数据和数据库领域最为活跃的开源社区之一</strong>，上方 GitHub Contribution 增长趋势图更是证明了这一点。而这一切，正是由社区所有的用户和开发者共同创造的。</p><p>另外值得纪念的是，在 2022 年 6 月， Apache Doris 迎来了开源以来最重要的里程碑之一，正式从 Apache 孵化器毕业、成为了 <strong>Apache 顶级项目</strong>。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0090f08f0f3b4cefaa9ff181a56d4751~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="开源用户规模"><strong>开源用户规模</strong><a href="#开源用户规模" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>得益于社区成立的专职工程师团队，为 Apache Doris 社区用户提供义务的技术支持，2022 年我们在用户连接与沟通方面变得更加顺畅，可以更直面用户、去倾听用户真实的声音。</p><p>在过去的一年里，Apache Doris 已经在互联网、金融、电信、教育、汽车、制造、物流、能源、政务等数十个行业应用落地，尤其是在以海量数据著称的互联网行业。在中国市值或估值排行前 50 的互联网公司中，有 80% 企业在长期使用 Apache Doris 来解决自身业务中的数据分析问题，其中包含了百度、美团、小米、腾讯、京东、字节跳动、网易、新浪、360、 米哈游、知乎等头部知名企业。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db9dfe3552784ad484577ae87102ac07~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>在全球范围内，<strong>Apache Doris 已经得到了超过 1000 家企业用户的认可</strong>，并且这一数字仍在快速增长中。这 1000 多家企业用户中，绝大多数与社区有着直接联系，并通过各种方式参与到社区建设中来。他们中的许多企业用户也参与到本次 Doris Summit 的议题分享中，将自身基于真实业务场景的实践经验分享给大家。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="版本更新迭代"><strong>版本更新迭代</strong><a href="#版本更新迭代" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>如果说过去版本将使用和运维的简易性作为第一追求的话，那么 2022 年发布版本则是在<strong>性能、稳定性、易用性</strong>等多方面特性的全面进化。</p><ul><li>4 月份社区发布了自开源以来的首个 1 位版本—— Apache Doris 1.0，在 1.0 版本中，意义非凡的向量化执行初次与大家见面，标志着 Apache Doris 开始迈入极速数据分析时代。</li><li>6 月份发布的 1.1 版本，我们对向量化引擎进行了进一步完善和优化，并将其作为正式功能默认开启。与此同时，社区建立了 LTS 版本发布机制，以每月发布一个 3 位版本的速度，对 1.1 版本进行快速地 Bug 修复和功能优化，力求满足更多社区用户在稳定性方面的高要求。</li><li>在综合考虑版本迭代节奏和用户需求后，我们决定将众多新特性在 1.2 版本中发布。同时期社区的稳定性和质量保障工作也取得了显著的成效，测试 Case 得到了极大程度地丰富，并在 Master 分支上构建了流水线。通过一系列质量手段，Apache Doris 的代码质量和稳定性得到进一步提升，这也使得版本发布有着更加严格的准出标准。</li><li>12 月初 1.2 版本正式面世。这一版本的发布不仅使查询性能有了近十倍的提升，同时我们还推出了过去半年时间里研发的诸多重磅功能，包括 Unique Key 模型 Merge-on-Write 的数据更新模式、支持无缝对接多种数据湖的 Multi-Catalog 多源数据目录、Java UDF 、Array 数组类型和 JSONB 类型等，让 Apache Doris 在更多数据分析场景具备了更强的适应性和可能性。</li><li>我们也针对系统稳定性进行了大量的工作，一方面，利用 SQL Smith 等自动化测试工具以及各个知名开源项目的测试用例，构建了数以百万计的测试用例集；另一方面，通过社区准入流水线和完善的回归测试框架，保证了代码合入的质量。因此1.2 版本不论从功能、性能还是稳定性方面，都是一次厚积薄发后的全面进化，也是对所有开发者在 2022 年辛苦付出的最好回报。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="核心特性演进"><strong>核心特性演进</strong><a href="#核心特性演进" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>核心特性方面，社区的研发力量主要围绕四个方面开展工作，分别是<strong>性能、实时性、半结构化数据支持与 Lakehouse</strong>。</p><ul><li><strong>查询性能提升</strong>。从 1.0 版本面世到 1.2 版本发布，Apache Doris 在性能方面取得了极为显著的成绩。在单表场景上，Apache Doris 荣登 Clickhouse 公司推出的 Clickbench 数据库性能榜单，并取得了<strong>前三名</strong>的优秀成绩。在多表关联场景上，得益于向量化执行引擎及各种查询优化技术，相对 2021 年底发布的 0.15 版本 ，Apache Doris 在 SSB 和 TPC-H 等标准测试数据集下均<strong>取得了数倍乃至数十倍的性能提升</strong>。这一系列性能方面的优化，已经成功让 Apache Doris 跻身全球数据库性能最优阵列中！</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da5058d3369f440ebb5ff8f4937eb3d7~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><ul><li><strong>实时场景优化。</strong> 在 1.2 版本中，我们在原有 Unique Key 数据模型上实现了Merge-On-Write 的数据更新方式，查询性能在高频更新时有 <strong>5-10 倍的提升</strong>，实现了在可更新数据上的低延迟实时分析体验。另外还实现了轻量 Schema Change 功能，对于数据的加减列不再需要转换历史数据，可通过 Flink CDC 等工具快速便捷地同步上游事务数据库中的 DML 或 DDL 操作，使数据同步工作能够更加流畅统一。</li><li><strong>半结构化数据支持。</strong> 目前 Apache Doris 支持了 Array 和 JSONB 类型，其中 Array 类型不仅能更方便地存储复杂的数据结构，还可以通过 Array 函数满足用户行为分析等场景的业务需求。而 JSONB 是一种二进制 JSON 存储方式，它不但比纯文本 Text JSON 的访问性能快 4 倍，同时也有更低的内存消耗。通过 JSONB 可以方便地导入各种 JSON 格式的日志数据结构，并能取得优异的查询效率。这也是 Apache Doris 在日志分析领域所做的探索之一。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8594d0597f49431d8439e516d9fc2f4d~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><ul><li><strong>Lakehouse</strong>。在最新发布的 1. 2 版本中，我们引入了全新的 Catalog 概念，正式将 Apache Doris 迈入湖仓一体时代。通过简单的命令便可以方便地连接到各自外部数据源并自动同步元数据，实现统一的分析体验。通过 Native Format Reader、延迟物化、异步 IO、数据预取等多项针对外部数据源的性能优化，并充分利用自身的高性能执行引擎和查询优化器，在对外表访问性能上，Apache Doris 可以达到 Trino/Presto 的 <strong>3- 5 倍</strong>、Hive 的 <strong>10-100 倍</strong>。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcc2dfd28ed14648a67fe10817e34c2d~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2023-roadmap"><strong>2023 RoadMap</strong><a href="#2023-roadmap" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>承前而启后，2023 年，Apache Doris 社区在以上几方面特性持续完善的同时，也将开启更多有意义的工作。<strong>全年的 RoadMap 以及明年 Q1 的具体计划，可以参考以下的全景图：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f90d9aefc194cd3913836299a44fe3d~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" class="img_ev3q"></p><p>稳定的版本发布和迭代速度对于开源软件至关重要。在 2023 年，我们将以每季度一个 2 位版本的节奏，开始 Apache Doris 2.x 版本的迭代。同时，针对每个 2 位版本，我们也将以每月一个 3 位版本的速度进行功能维护和优化。</p><p><strong>从功能角度来看，后续研发工作将会围绕以下几个主要方向展开：</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="高性能"><strong>高性能</strong><a href="#高性能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>高性能是 Apache Doris 不断追求的目标，过去一年在 Clickbench、TPC-H 等公开测试数据集上的优异表现，已经证明了其在执行层以及算子优化方面做到了业界领先。未来我们也会不断优化各个场景下的性能表现，回馈用户极速的数据分析体验，具体包括：</p><ul><li><strong>更复杂SQL性能提升：</strong> 2022 年我们已经启动全新查询优化器的设计与开发，而这一成果在 2023 年一季度就将与大家见面。全新查询优化器提供了丰富的规则模型，实现了更智能的代价选择，可以更高效地支撑复杂查询，能够完整执行 TPC-DS 全部 99 个SQL。同时全新查询优化器还具备全查询场景的自适应优化，便于用户在面对不同分析负载和业务场景时都获得一致性的使用体验。</li><li><strong>更高的点查询并发：</strong> 高并发一直是 Apache Doris 所擅长的场景，而 2023 年我们将会进一步加强这一能力，通过 Short-Circuit Plan、Prepare Statement、Query Cache 等一系列技术，实现单机数万 QPS 的超高并发支持，并具备随集群规模的拓展进而线性提升并发的能力。</li><li><strong>更灵活的多表物化视图：</strong> 在过去版本中，通过强一致的单表物化视图，Apache Doris 加速了固定维度数据的分析效率。而全新的多表物化视图将会解耦 Base 表与 MV 表的生命周期，通过异步刷新和灵活的增量计算方式，满足多表关联以及更复杂 SQL 的预计算加速需求，这一特性将在接下来的 2023 年第一季度与大家见面！</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="高性价比"><strong>高性价比</strong><a href="#高性价比" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>成本和效率对企业而言是赢得市场竞争的关键，对数据库而言亦是如此。过去 Apache Doris 凭借在易用性方面的诸多设计帮助用户大幅节约了计算与存储资源成本，后续我们也会引入一系列云原生能力，在不影响业务效率的同时进一步降低成本，具体包括：</p><ul><li><strong>更低的存储成本：</strong> 我们将探索与云上对象存储系统和文件系统的结合，帮助用户进一步降低存储成本，包括更完善的冷热数据分离能力，将冷数据智能转移至更廉价的对象存储或文件系统中。结合单一远程副本、冷数据 Cache 以及冷热智能转换等技术，保证业务查询效率不受影响的同时实现存储成本大幅降低，这一功能将于 2023 年第一季度发布。</li><li><strong>更弹性的计算资源：</strong> 剥离存储与计算状态，引入仅用于计算的 Elastic Compute Node 。由于不存储数据，弹性计算节点具备更加快速的弹性伸缩能力，便于用户在业务高峰期进行快速扩容，进一步提升在海量数据计算场景（如数据湖分析）的分析效率，这一功能已经处于最终调试阶段，即将与大家见面。后续我们还将通过对集群内存和 CPU 运行指标的监控和自动策略配置，实现自动的节点扩缩容（Auto-scaling）。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="混合负载"><strong>混合负载</strong><a href="#混合负载" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>随着用户规模的极速扩张，越来越多的用户将 Apache Doris 用于构建企业内部的统一分析平台。这一方面需要 Apache Doris 去承担更大规模的数据处理和分析，另一方面也需要 Apache Doris 同时去应对更多分析负载的挑战，从过去的实时报表和 Ad-hoc 等典型 OLAP 场景，扩展到 ELT/ETL 、日志检索与分析等更多场景的统一。为了能更好适配这些场景，许多工作已经进入紧锣密鼓的研发中，并将于 2023 年陆续与大家见面，具体包括：</p><ul><li><strong>更灵活的 Pipeline 执行引擎*</strong> *：**与传统的火山模型相比，Pipeline 模型无需手动设置并发度，可以实现不同管道之间的并行计算，充分利用多核的计算能力，实现更灵活的执行调度，提升在混合负载场景下的综合性能表现。</li><li><strong>Workload Manager：</strong> 在性能提升的同时，也亟需完善的资源隔离和划分的能力。我们将会基于 Pipeline 执行引擎实现更细粒度和更灵活的负载管理、资源队列以及共享隔离等功能，兼顾多种混合负载场景下的查询性能与稳定性。</li><li><strong>轻量级容错：</strong> 轻量级容错能力也是我们后续持续完善的地方，既能利用 MPP 的高效率又能对错误进行容忍，以更好适应用户在 ETL/ELT 场景的挑战。</li><li><strong>函数兼容与多语言UDF：</strong> 与此同时，后续也将支持 Hive/Trino/Spark 函数的兼容性以及多语言的 UDF，来帮助用户更灵活地进行数据加工，也可以更方便地从其他数据库系统迁移到 Apache Doris。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="多模数据分析"><strong>多模数据分析</strong><a href="#多模数据分析" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在过去 Apache Doris 更多是是擅长于结构化数据分析，随着对半结构化、非结构化数据分析需求的增加，从 1.2 版本起我们增加了 Array 和 JSONB 类型以实现数据的 Native 支持，后续版本仍将持续加强这一能力，为日志分析场景提供性价比更高、性能更强的解决方案，<strong>具体包括：</strong></p><ul><li><strong>更丰富的复杂数据类型*</strong> *：**除 Array/JSONB 类型以外，2023 年第一季度我们将增加对 Map/Struct 类型的支持，包括高效写入、存储、分析函数以及类型之间的相互嵌套，以更好满足多模态数据分析的支持。后续将支持更加丰富的数据类型，包括 IP、GEO 地理信息等数据类型，并会探索在时序数据场景的高效数据分析。</li><li><strong>更高效的文本分析算法：</strong> 对于文本数据，我们将引入更多的文本分析算法，包括自适应 Like、高性能子串匹配、高性能正则匹配，Like 语句的谓词下推、Ngram Bloomfilter 等，同时基于倒排索引实现全文检索能力，在日志分析场景提供比 ES 更高性能和性价比的分析能力。这些功能都已经处于就绪阶段，将在 2023 年初与大家见面。</li><li><strong>动态 Schema 表：</strong> 传统数据库在设计之初 Schema 是静态的，Schema 变更时需要执行 DDL ，而这一操作往往具有阻塞性。在越来越多的现代数据分析场景中，表结构会随时间推移而变化，因此我们引入了 Dynamic Table，可以根据数据写入自动适应 Schema ，不再需要执行 DDL，由过去的人工干预数据结构进化为数据自驱动，极大提升了灵活数据分析的便捷性。这一功能将在 2022 年第一季度正式发布。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lakehouse"><strong>Lakehouse</strong><a href="#lakehouse" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>随着数据湖技术的发展，分析性能成为发挥数据湖效用、挖掘数据价值最大的掣肘。基于一款简单易用和高性能的查询分析引擎在数据湖之上构建分析服务，成为新的技术趋势。在过去一年，通过在数据湖上的诸多性能优化、结合自身的高性能执行引擎和查询优化器以及，Apache Doris 实现了数据湖上极速易用的分析体验，性能较 Presto/Trino 有 3-5 倍的提升。在 2023 年，我们将会继续完善这一能力，具体包括：</p><ul><li><strong>更简易的数据对接：</strong> 在 1.2 版本中我们发布了 Multi-Catalog，支持了多种异构数据源的元数据自动映射与同步，实现了数据湖的无缝对接，后续将对 Delta Lake 的支持以及 Iceberg、Hudi 等更多数据格式的支持。</li><li><strong>更完整的数据湖能力支持：</strong> 提供数据湖上数据的增量更新与查询，还会支持将分析结果写回数据湖、外表写入内表，实现数据分析流程的全闭环。同时还将支持多版本 Snapshot 读取和删除，并进一步在 Apache Doris 为数据湖数据提供物化视图。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实时性与存储引擎优化"><strong>实时性与存储引擎优化</strong><a href="#实时性与存储引擎优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>数据价值会随着时间推移而降低，因此实时性对于高时效性要求的用户而言至关重要。在 1.1 版本中我们在 Compaction 和 Flink 实时写入方面进行了诸多优化，同时 1.2 版本的 Merge-on-Write 数据更新模式进一步使 Apache Doris 在实时更新与极速查询得以统一。2023 年我们将会持续强化对存储引擎的优化，具体包括：</p><ul><li><strong>更稳定的数据写入：</strong> 通过一系列 Compaction 操作和批量数据写入方面的优化，节省资源开销，降低写放大问题，并结合全新的内存管理框架提升写入过程的内存稳定性，进而提升系统稳定性。</li><li><strong>更完善的数据更新支持：</strong> 过去部分列更新是通过 Agg 模型上的 Replace_if_not_null 来实现的，后续我们将会增加 Unique Key 模型上的部分列更新支持，并完整实现 Delete、Update、 Merge 等数据更新的操作。</li><li><strong>更统一的数据模型：</strong> 当前 Apache Doris 的三种数据模型在各个场景均有丰富的应用，后续我们将尝试统一现有几种数据模型，使用户在使用体验上更加统一。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="易用性和稳定性"><strong>易用性和稳定性</strong><a href="#易用性和稳定性" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>除了功能方面的丰富与完善，更简单、更易用、更稳定同样也是 Apache Doris 一直追求的目标，2023 年我们将在以下几方面出发，让用户具有更简易和放心的使用体验：</p><ul><li><strong>简化建表：</strong> 目前 Apache Doris 在建表时分区已经支持了时间函数，后续我们将进一步消除 Bucket 设置，帮助用户最大程度简化建表建模。</li><li><strong>安全性：</strong> 目前已经实现基于 RBAC 模型的权限管理机制，使用户权限更安全可靠；并对 ID-federation、行列级别权限，数据脱敏等进行了优化，后续将进一步完善。</li><li><strong>可观测性：</strong> Profile 是定位查询性能问题的重要手段，后续我们将加强对 Profile 的监控并提供可视化 Profile 工具，帮助用户更快定位问题。</li><li><strong>更好的 BI 兼容性和更完善的数据集成迁移方案：</strong> 当前各 BI 工具可以通过 MySQL 协议连接到 Apache Doris，后续我们将对主流 BI 软件进一步适配，保证更佳的查询体验。随着 DBT、Airbyte 等新兴数据集成和迁移工具的兴起，越来越多用户使用此类系统将数据同步至 Apache Doris ，后续我们也会提供对此些系统的官方支持。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="开启下一个十年"><strong>开启下一个十年！</strong><a href="#开启下一个十年" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h6 class="anchor anchorWithStickyNavbar_LWe7" id="或许有读者或听众还记得我在开头提的问题对于-apache-doris十年意味着什么">或许有读者或听众还记得我在开头提的问题，对于 Apache Doris，十年意味着什么？<a href="#或许有读者或听众还记得我在开头提的问题对于-apache-doris十年意味着什么" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h6><p>有两层含义，上一个十年和下一个十年。</p><p><strong>上一个十年，是 Apache Doris 起源的十年</strong>。从诞生到开源、从默默无闻到被越来越多人熟知和使用，开源赋予了 Apache Doris 更加旺盛的生命力和创造力。</p><p><strong>而下一个十年，则是一场新的旅程</strong>。</p><p>正如我在本次 Doris Summit 分享的主题，New Journey of Apache Doris。如果说过去 Apache Doris 更多是服务于在线报表场景和 Ad-hoc 分析的 OLAP 引擎的话，那么在所有社区和开发者的努力下，当前 Apache Doris 已经具备了更为广阔的定位，即极速、易用、实时、统一的多模分析型数据库。</p><p>这其中的统一，既包含了架构的统一、也包含了业务和数据的统一。用户可以通过 Apache Doris 构建多种不同场景的数据分析服务、同时支撑在线与离线的业务负载、高吞吐的交互式分析与高并发的点查询；通过一套架构实现湖和仓的统一、在数据湖和多种异构存储之上提供无缝且极速的分析服务；也可通过对日志/文本等半结构化乃至非结构化的多模数据进行统一管理和分析、来满足更多样化数据分析的需求。</p><p>这是我们希望 Apache Doris 能够带给用户的价值，<strong>不再让用户在多套系统之间权衡，仅通过一个系统解决绝大部分问题，降低复杂技术栈带来的开发、运维和使用成本，最大化提升生产力。</strong></p><p>“我们已经出发了太久，以至于忘记了为什么出发。”</p><p>希望通过这一定位的转变迎接下一个十年的挑战，或许技术趋势会有变化，架构将会革新，但我们解决用户数据分析问题的初衷不会改变。</p><p>希望继续带着上一个十年出发的初心，开启下一个十年的旅程。</p>]]></content>
        <author>
            <name>陈明雨</name>
        </author>
        <category label="重大新闻" term="重大新闻"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris 1.2.1 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-1.2.1</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-1.2.1"/>
        <updated>2023-01-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>在 1.2.1 版本中，Doris 团队已经修复了自 1.2.0 版本发布以来约 200 个问题或性能改进项。同时，1.2.1 版本也作为 1.2 LTS 的第一个迭代版本，具备更高的稳定性，建议所有用户升级到这个版本。</p><h1>优化改进</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持高精度小数-decimalv3">支持高精度小数 DecimalV3<a href="#支持高精度小数-decimalv3" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>支持精度更高和性能更好的 DecimalV3，相较于过去版本具有以下优势：</p><ul><li><p>可表示范围更大，取值范围都进行了明显扩充，有效数字范围 <!-- -->[1,38]<!-- -->。</p></li><li><p>性能更高，根据不同精度，占用存储空间可自适应调整。</p></li><li><p>支持更完备的精度推演，对于不同的表达式，应用不同的精度推演规则对结果的精度进行推演。</p></li></ul><p><a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/DECIMALV3" target="_blank" rel="noopener noreferrer">DecimalV3</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持-iceberg-v2">支持 Iceberg V2<a href="#支持-iceberg-v2" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>支持 Iceberg V2 (仅支持 Position Delete， Equality Delete 会在后续版本支持)，可以通过 Multi-Catalog 功能访问 Iceberg V2 格式的表。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持-or-条件转-in">支持 OR 条件转 IN<a href="#支持-or-条件转-in" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>支持将 where 条件表达式后的 or 条件转换成 in 条件，在部分场景中可以提升执行效率。 <a href="https://github.com/apache/doris/pull/15437" target="_blank" rel="noopener noreferrer">#15437</a> <a href="https://github.com/apache/doris/pull/12872" target="_blank" rel="noopener noreferrer">#12872</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化-jsonb-类型的导入和查询性能">优化 JSONB 类型的导入和查询性能<a href="#优化-jsonb-类型的导入和查询性能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>优化 JSONB 类型的导入和查询性能，在测试数据上约有 70% 的性能提升。  <a href="https://github.com/apache/doris/pull/15219" target="_blank" rel="noopener noreferrer">#15219</a>  <a href="https://github.com/apache/doris/pull/15219" target="_blank" rel="noopener noreferrer">#15219</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="stream-load-支持带引号的-csv-数据">Stream load 支持带引号的 CSV 数据<a href="#stream-load-支持带引号的-csv-数据" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过导入任务参数 <code>trim_double_quotes</code> 来控制，默认值为 false，为 true 时表示裁剪掉 CSV 文件每个字段最外层的双引号。  <a href="https://github.com/apache/doris/pull/15241" target="_blank" rel="noopener noreferrer">#15241</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="broker-支持腾讯云-chdfs-和-百度云-bos-afs">Broker 支持腾讯云 CHDFS 和 百度云 BOS 、AFS<a href="#broker-支持腾讯云-chdfs-和-百度云-bos-afs" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>可以通过 Broker 访问存储在腾讯云 CHDFS 和 百度智能云 BOS、AFS 上的数据。 <a href="https://github.com/apache/doris/pull/15297" target="_blank" rel="noopener noreferrer">#15297</a> <a href="https://github.com/apache/doris/pull/15448" target="_blank" rel="noopener noreferrer">#15448</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新增函数">新增函数<a href="#新增函数" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>新增函数 <code>substring_index</code>。 <a href="https://github.com/apache/doris/pull/15373" target="_blank" rel="noopener noreferrer">#15373</a></p><h1>问题修复</h1><ul><li><p>修复部分情况下，从 1.1.x 版本升级到 1.2.0 版本后，用户权限信息丢失的问题。 <a href="https://github.com/apache/doris/pull/15144" target="_blank" rel="noopener noreferrer">#15144</a></p></li><li><p>修复使用 date/datetimev2 类型进行分区时，分区值错误的问题。 <a href="https://github.com/apache/doris/pull/15094" target="_blank" rel="noopener noreferrer">#15094</a></p></li><li><p>修复部分已发布功能的 Bug，具体列表可参阅：<a href="https://github.com/apache/doris/pulls?q=is%3Apr+label%3Adev%2F1.2.1-merged+is%3Aclosed" target="_blank" rel="noopener noreferrer">PR List</a></p></li></ul><h1>升级注意事项</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="已知问题">已知问题<a href="#已知问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>请勿使用 JDK11 作为 BE 的运行时 JDK，会导致 BE Crash。</p></li><li><p>该版本对csv格式的读取性能有下降，会影响csv格式的导入和读取效率，我们会在下一个三位版本尽快修复</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="行为改变">行为改变<a href="#行为改变" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>BE 配置项 <code>high_priority_flush_thread_num_per_store</code> 默认值由 1 改成 6 ，以提升 Routine Load 的写入效率。<a href="https://github.com/apache/doris/pull/14775" target="_blank" rel="noopener noreferrer">#14775</a></p></li><li><p>FE 配置项 <code>enable_new_load_scan_node</code> 默认值改为 true ，将使用新的 File Scan Node 执行导入任务，对用户无影响。 <a href="https://github.com/apache/doris/pull/14808" target="_blank" rel="noopener noreferrer">#14808</a></p></li><li><p>删除 FE 配置项 <code>enable_multi_catalog</code>，默认开启 Multi-Catalog 功能。</p></li><li><p>默认强制开启向量化执行引擎。会话变量 <code>enable_vectorized_engine</code> 将不再生效，如需重新生效，需将 FE 配置项 <code>disable_enable_vectorized_engine</code> 设为 false，并重启 FE。 <a href="https://github.com/apache/doris/pull/15213" target="_blank" rel="noopener noreferrer">#15213</a></p></li></ul><h1>致谢</h1><p>有 45 位贡献者参与到 1.2.1 版本的开发与完善中，感谢他们的付出，他们分别是：</p><p>@adonis0147</p><p>@AshinGau</p><p>@BePPPower</p><p>@BiteTheDDDDt</p><p>@ByteYue</p><p>@caiconghui</p><p>@cambyzju</p><p>@chenlinzhong</p><p>@dataroaring</p><p>@Doris-Extras</p><p>@dutyu</p><p>@eldenmoon</p><p>@englefly</p><p>@freemandealer</p><p>@Gabriel39</p><p>@HappenLee</p><p>@Henry2SS</p><p>@hf200012</p><p>@jacktengg</p><p>@Jibing-Li</p><p>@Kikyou1997</p><p>@liaoxin01</p><p>@luozenglin</p><p>@morningman</p><p>@morrySnow</p><p>@mrhhsg</p><p>@nextdreamblue</p><p>@qidaye</p><p>@spaces-X</p><p>@starocean999</p><p>@wangshuo128</p><p>@weizuo93</p><p>@wsjz</p><p>@xiaokang</p><p>@xinyiZzz</p><p>@xutaoustc</p><p>@yangzhg</p><p>@yiguolei</p><p>@yixiutt</p><p>@Yulei-Yang</p><p>@yuxuan-luo</p><p>@zenoyang</p><p>@zhangstar333</p><p>@zhannngchen</p><p>@zhengshengjun</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[应用实践：数仓体系效率全面提升！同程数科基于 Apache Doris 的数据仓库建设]]></title>
        <id>https://doris.apache.org/zh-CN/blog/LY</id>
        <link href="https://doris.apache.org/zh-CN/blog/LY"/>
        <updated>2022-12-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<blockquote><p>导读：同程数科成立于 2015 年，是同程集团旗下的旅游产业金融服务平台。2020 年，同程数科由于看到了 Apache Doris 丰富的数据接入方式、优异的并行运算能力和极简运维的特性，引入了Apache Doris 进行数仓架构改造。本文详细讲述了同程数科数仓架构从1.0 到 2.0 的演进过程及使用Doris过程中的应用实践。希望对大家有所帮助。</p></blockquote><blockquote><p>作者｜同程数科大数据高级工程师 王星</p></blockquote><p><img loading="lazy" alt="kv" src="https://cdnd.selectdb.com/zh-CN/assets/images/kv-fb77e142257a98bea6656a33a626b310.png" width="900" height="383" class="img_ev3q"></p><h1>业务背景</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="业务介绍">业务介绍<a href="#业务介绍" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>同程数科是同程集团旗下的旅游金融服务平台，其前身是同程金服。正式成立于 2015 年，同程数科以“数字科技引领旅游产业”为愿景，坚持以科技的力量，赋能我国旅游产业。
目前，同程数科的业务涵盖金融服务、消费金融服务、金融科技及数字科技等板块，累计服务覆盖超过千万用户和 76 座城市。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="业务需求">业务需求<a href="#业务需求" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>包含四大类：</p><ul><li>看板类：包括实时驾驶舱以及 T+1 业务看板等。</li><li>预警类：包括风控熔断、资金异常以及流量监控等。</li><li>分析类：包括及时性数据查询分析以及临时取数等。</li><li>财务类：包括清算以及支付对账需求。</li></ul><h1>架构演进之 1.0</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="工作流程">工作流程<a href="#工作流程" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="1" src="https://cdnd.selectdb.com/zh-CN/assets/images/1-bb0a3cc8027796049893fcf4d60dd5ab.png" width="1080" height="608" class="img_ev3q"></p><p>我们最初的数仓架构沿袭了前几年非常流行的SteamSets 和 Apache Kudu 组合的第一代架构。该架构中，Binlog 通过StreamSets后，通过实时采集后写入 Apache Kudu 中，最后通过 Apache Impala 和可视化工具进行查询和使用。</p><p>不足：</p><ul><li>组件引入过多，维护成本随之增加</li><li>多种技术架构和过长的开发链路，提高了数仓研发人员的学习成本，数仓人员需要在不同组件之间进行开发，导致开发效率降低。</li><li>Apache Kudu 在大表关联 Join 方面性能差强人意。</li><li>由于数仓使用了 CDH组件搭建，离线和实时集群并未进行分离，形成资源之间的相互竞争；在离线数据批量处理时对 IO 或磁盘消耗较大，无法保证实时数据的及时性。</li><li>虽然 SteamSets 配备了预警能力，但作业恢复能力仍相对欠缺。在配置多个任务时， JVM 的消耗较大，导致恢复速度较慢。</li></ul><h1>架构演进之 2.0</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="调研过程">调研过程<a href="#调研过程" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>由于缺点众多，我们不得不放弃了数仓1.0的架构。在 2020年中，我们对市面上流行的数仓进行了深度调研。</p><p>在调研过程中，我们集中对比了Click house和Apache Doris。ClickHouse 对 CPU 的利用率较高，所以在单表查询时表现比较优秀，但是在多查询高 QPS 的情况下则表现欠佳。反观Doris不仅单节点最高可支持上千QPS，而且得益于分区分桶裁剪的功能，可以支持QPS万级别的高并发查询；再者，ClickHouse的扩容缩容复杂且繁琐，目前做不到自动在线操作，需要自研工具支持。Doris支持集群的在线动态扩缩容，且可以随着业务的发展水平扩展。</p><p>在调研中，ApacheDoris脱颖而出。Doris高并发的查询能力非常吸引我们，而且灵活的扩缩容能力也也更适合我们灵活多变的广告业务。因此我们选择了 Apache Doris。</p><p><img loading="lazy" alt="2" src="https://cdnd.selectdb.com/zh-CN/assets/images/2-11b7311ef2c06a545dbdb54e01787f6d.png" width="1080" height="608" class="img_ev3q"></p><p>引入 Apache Doris 后，我们对整个数仓进行了改造：</p><ul><li>通过Canal 采集MySQL Binlog 进入 Kafka中。因为Apache Doris 与 Kafka 的契合度较高，可以便捷地使用 Routine Load 对数据加载和导入。</li><li>我们对原有离线计算的数据链路进行了细微调整。对于存储在 Hive 中的数据，Apahce Doris 可以通过 Broker Load 将 Hive 中的数据导入。这样一来离线集群的数据就可以直接加载到 Doris。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="选择-doris">选择 Doris<a href="#选择-doris" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="3" src="https://cdnd.selectdb.com/zh-CN/assets/images/3-1a638414ccc0a8decbd99b24160973a8.png" width="1080" height="608" class="img_ev3q"></p><p>Apache Doris 整体表现令人深刻：</p><ul><li>数据接入：提供了丰富的数据导入方式，能够支持众多数据源的接入。</li><li>数据连接：Doris 支持 JDBC 与 ODBC 等方式连接。Doris对 BI 工具的可视化展示比较友好，能够便捷地与 BI 工具进行连接。另外Doris 采用MySQL 协议进行通信，用户可以通过各类 Client 工具直接访问 Doris。</li><li>SQL 语法：Doris 采用MySQL 协议，高度兼容MySQL 语法，支持标准SQL，对于数仓开发人员来说学习成本较低；</li><li>MPP 并行计算：Doris 基于 MPP 架构，提供了非常优秀的并行计算能力。在复杂Join和大表Join的场景下Doris优势非常明显；</li><li>文档健全：Doris 官方文档非常健全，对于新用户上手非常友好。（我们最看重的一点）</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="doris-实时系统架构">Doris 实时系统架构<a href="#doris-实时系统架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="4" src="https://cdnd.selectdb.com/zh-CN/assets/images/4-eeefe38e4d58d7a253a72ca3c98ecace.png" width="1080" height="608" class="img_ev3q"></p><ul><li><p>数据源：在实时系统架构中，数据源来自产业金融、消费金融、风控数据等业务线，通过 Canal 和 API 接口进行采集。</p></li><li><p>数据采集：通过 Canal- Admin 进行数据采集后，Canal将数据发送到 Kafka 消息队列之中。之后，数据再通过 Routine Load 接入到 Doris 集群。</p></li><li><p>Doris 数仓：由Doris 集群组成了了数据仓库的三级分层，分别是：使用了 Unique 模型的 DWD 明细层 、 Aggregate 模型的 DWS 汇总层以及 ADS 应用层。</p></li><li><p>数据应用：数据应用于实时看板、数据及时性分析以及数据服务三方面。</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="doris-新数仓特点">Doris 新数仓特点<a href="#doris-新数仓特点" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>数据导入方式简便，根据不同场景采用 3 种不同的导入方式：</p><ul><li>Routine Load：当我们提交 Rountine Load 任务时，Doris 内部会有一个常驻进程实时消费 Kafka ，不断从 Kafka 中读取数据并导入进 Doris中。</li><li>Broker Load：维度表及历史数据等离线数据有序地导入Doris。</li><li>Insert Into：用于定时批式计算任务，负责处理DWD 层数据，从而形成 DWS 层以及 ADS 层。
Doris 的良好数据模型，提升了我们的开发效率：</li><li>Unique 模型在 DWD 层接入时使用，可以有效防止重复消费数据。</li><li>Aggregate 模型用作聚合。在 Doris 中，Aggregate 支持如 Sum、Replace、Min 、Max 4 种方式的聚合模型，聚合的过程中使用 Aggregate 底层模型可以减少很大部分 SQL 代码量，不再人工手写Sum、Min、Max 等代码。
Doris 查询效率高：</li><li>支持物化视图与 Rollup 物化索引。物化视图底层类似 Cube 的概念与预计算的过程，与 Kylin 中以空间换时间的方式类似，均是在底层生成特殊的表，在查询中命中物化视图并快速响应。</li></ul><h1>新架构的收益</h1><ul><li>数据接入：在最初的架构中，通过 SteamSets 进行数据接入的过程中需要手动建立 Kudu 表。由于缺乏工具，整个建表和创建任务的过程需要 20-30 分钟。如今可以通过平台与快速构建语句实现数据快速接入，每张表的接入过程从之前的20-30分钟缩短到现在的 3-5 分钟，性能提升了 5-6 倍。</li><li>数据开发：使用 Doris之后，我们可以直接使用 Doris 中自带的 Unique、Aggregate 等数据模型及可以很好支持日志类场景的 Duplicate 模型，在 ETL 过程中大幅度加快开发过程。</li><li>查询分析：Doris 底层带有物化视图及 Rollup 物化索引等功能。物化视图底层类似 Cube 的概念与预计算的过程，与 Kylin 中以空间换时间的方式类似，均是在底层生成特殊的表，在查询中命中物化视图并快速响应。同时 Doris 底层对于大表关联进行了诸多优化，如 Runtime Filter 以及其他 Join 和自定义优化。相较于 Doris，Apache Kudu 则需要经过更为深入和复杂的优化才能更好地使用。</li><li>数据报表：我们最初使用 Kudu 报表查询需要 1-2 分钟才能够完成渲染，而 Doris 则是秒级甚至是毫秒级的响应速度。</li><li>便捷运维：Doris 没有 Hadoop 生态系统的复杂度，维护成本远低于 Hadoop。尤其是在集群迁移过程中，Doris 的运维便捷性尤为突出。3 月份，我们的机房进行了搬迁，12 台 Doris 节点机器在三天内全部迁移完成。整体操作较为简单，除了机器上架下架和搬移外，FE 扩容与缩容时只运用了 Add 与 Drop 等简单指令，并未消耗太长时间。</li></ul><h1>未来展望</h1><ul><li>实现基于 Flink CDC 的数据接入：当前，优化后的数据库架构中并没有没有引入 Flink CDC ，而是继续沿用了 数据经Canal 采集到 Kafka 后再采集到 Doris 中的模式，链路相对来说较长。使用Flink CDC 虽然可以继续精简整体架构，但是还需要写一定量的代码，这对于数据分析师直接使用感受并不友好。我们希望数据分析师只需要写简单SQL 或在页面上直接操作。在未来的规划中，我们计划引入 Flink CDC 功能并对上层应用进行扩充。</li><li>紧跟社区迭代计划：我们正在使用的 Doris 版本相对较老，现在的最新版本 Apache Doris V1.2.0在全面向量化、multi-catalog多元数据目录、light schema change轻量表结构变更方面有了较大幅度的提升。我们将紧跟社区迭代节奏对集群进行升级并充分利用新特性。</li><li>强化建设相关体系：我们现在的指标体系管理如报表元数据、业务元数据等维护与管理水平依旧有待提高。在数据质量监控方面，虽然目前包含了数据质量监控功能，但对于整个平台监控与数据自动化监控方面还需要强化与改善。</li></ul>]]></content>
        <author>
            <name>王星</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris 1.1.5 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-1.1.5</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-1.1.5"/>
        <updated>2022-12-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>在 1.1.5 版本中，Doris 团队已经修复了自 1.1.4 版本发布以来约 36 个问题或性能改进项。同时，1.1.5 版本也是作为 1.1 LTS 版本的错误修复版本，建议所有用户升级到这个版本。</p><h1>Behavior Changes</h1><p>当别名与原始列名相同时，例如 "select year(birthday) as birthday"，在 group by、order by、having 子句中使用别名时将与 MySQL 中保持一致，Group by 和 having 将首先使用原始列，order by 将首先使用别名。这里可能会对用户带来疑惑，因此建议最好不要使用与原始列名相同的别名。</p><h1>Features</h1><p>支持 Hash 函数 murmur_hash3_64。<a href="https://github.com/apache/doris/pull/14636" target="_blank" rel="noopener noreferrer">#14636</a></p><h1>Improvements</h1><p>为日期函数 convert_tz 添加时区缓存以提高性能。<a href="https://github.com/apache/doris/pull/14616" target="_blank" rel="noopener noreferrer">#14616</a></p><p>当调用 show 子句时，按 tablename 对结果进行排序。 <a href="https://github.com/apache/doris/pull/14492" target="_blank" rel="noopener noreferrer">#14492</a></p><h1>Bug Fix</h1><p>修复 if 语句中带有常量时导致 BE 可能 Coredump 的问题。<a href="https://github.com/apache/doris/pull/14858" target="_blank" rel="noopener noreferrer">#14858</a></p><p>修复 ColumnVector::insert_date_column 可能崩溃的问题 <a href="https://github.com/apache/doris/pull/14839" target="_blank" rel="noopener noreferrer">#14839</a></p><p>更新 high_priority_flush_thread_num_per_store 默认值为 6，将提高负载性能。 <a href="https://github.com/apache/doris/pull/14775" target="_blank" rel="noopener noreferrer">#14775</a></p><p>优化 quick compaction core。 <a href="https://github.com/apache/doris/pull/14731" target="_blank" rel="noopener noreferrer">#14731</a></p><p>修复分区列非 duplicate key 时 Spark Load 抛出 IndexOutOfBounds 错误的问题。
<a href="https://github.com/apache/doris/pull/14661" target="_blank" rel="noopener noreferrer">#14661</a></p><p>修正 VCollectorIterator 中的内存泄漏问题。 <a href="https://github.com/apache/doris/pull/14549" target="_blank" rel="noopener noreferrer">#14549</a></p><p>修复了存在 Sequence 列时可能存在的建表问题。 <a href="https://github.com/apache/doris/pull/14511" target="_blank" rel="noopener noreferrer">#14511</a></p><p>使用 avg rowset 来计算批量大小，而不是使用 total_bytes，因为它要花费大量的 Cpu。 <a href="https://github.com/apache/doris/pull/14273" target="_blank" rel="noopener noreferrer">#14273</a></p><p>修复了 right outer join 可能导致 core 的问题。<a href="https://github.com/apache/doris/pull/14821" target="_blank" rel="noopener noreferrer">#14821</a></p><p>优化了 TCMalloc gc 的策略。 <a href="https://github.com/apache/doris/pull/14777" target="_blank" rel="noopener noreferrer">#14777</a> <a href="https://github.com/apache/doris/pull/14738" target="_blank" rel="noopener noreferrer">#14738</a> <a href="https://github.com/apache/doris/pull/14374" target="_blank" rel="noopener noreferrer">#14374</a></p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Doris on Es在快手商业化的最佳实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/BestPractice_Kwai</id>
        <link href="https://doris.apache.org/zh-CN/blog/BestPractice_Kwai"/>
        <updated>2022-12-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<blockquote><p>作者：贺祥，数据架构高级工程师，快手商业化团队</p></blockquote><p><img loading="lazy" alt="kv" src="https://cdnd.selectdb.com/zh-CN/assets/images/kv-846e4e39fd88e1e34d2474b23690d9b2.png" width="900" height="383" class="img_ev3q"></p><h1>1 关于快手</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="11-快手">1.1 快手<a href="#11-快手" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>快手（HKG: 1024）是一个短视频和潮流社交网络。发现有趣的短片，通过生活中的录音、视频、玩日常挑战或喜欢最好的动效模版和视频来为虚拟社区做出贡献。用短视频分享生活，并从数十种神奇的效果和滤镜中选择喜欢的方式。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="12-快手商业化报表引擎">1.2 快手商业化报表引擎<a href="#12-快手商业化报表引擎" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>快手商业化报表引擎为外部广告主提供广告投放效果的实时多维分析报表在线查询服务，以及为内部各商业化系统提供多维分析报表查询服务，致力于解决多维分析报表场景的高性能、高并发、高稳定的查询问题。</p><h1>2 初期架构</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="21-需求背景">2.1 需求背景<a href="#21-需求背景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>传统 OLAP 引擎应对多维分析时更多是以预建模的方式，通过构建数据立方体（Cube）对事实数据进行下钻、上卷、切片、切块等操作。现代 OLAP 分析引入了关系模型的理念，在二维关系表中描绘数据。而在建模过程中，往往有两种建模方式，一是采用宽表模型、将多张表的数据通过 Join 写入进一张宽表中，另一种方式是采用星型模型、将数据表区分为事实表和维度表、查询时对事实表与维度表进行 Join 。
以上两种方案各有部分优缺点：</p><p>宽表模型：</p><p>采取空间换时间的思路，理论上都是维表主键为唯一 ID 来填充所有维度，冗余存储了多条维度数据。其优势在于查询时非常方便，无需关联额外维表，性能表现更佳。其弊端在于如果有维度数据变化，需要对全表数据进行重刷，无法支撑高频的 Update。</p><p>星型模型：</p><p>维度数据与事实数据完全分离，维度数据往往用专门的引擎存储 (如 MySQL、Elasticsearch 等)，查询时通过主键关联查询维度数据，其优势在于维度数据变化不影响事实数据、可支持高频 Update 操作。其弊端在于查询逻辑相对更复杂，且多表 Join 可能导致性能受损。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="22-业务需求">2.2 业务需求<a href="#22-业务需求" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在快手的业务场景中，商业化报表引擎承载了外部广告主实时查询广告投放效果的需求，在构建报表引擎时，我们期望可以满足如下要求：</p><ul><li>超大数据量：单表原始数据每天增量百亿</li><li>查询高 QPS：平均 QPS千级别</li><li>高稳定性要求：在线服务要求稳定性4个9
最为重要的是，由于维度数据经常发生变更，维度表需要支持高达上千 QPS 的 Update 操作，同时还要进一步支持模糊匹配、分词检索等需求。
基于以上需求，我们选择了星型模型来建模，并以 Apache Druid 和 Elasticsearch 为核心构建了早期的报表引擎架构。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="23-初期架构基于apache-druid的架构">2.3 初期架构：基于Apache Druid的架构<a href="#23-初期架构基于apache-druid的架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>我们选择了引擎结合的方式，用Elasticsearch适配Druid引擎来实现。在数据写入阶段，我们通过Flink对数据进行分钟级预聚合，利用Kafka对数据进行小时级别的数据预聚合。在数据查询中，App端发起查询需求，对RE Front统一接口进行查询，Re Query根据引擎适配，向维表引擎（Elasticsearch和MySQL）及扩展引擎分别发起查询。</p><p>Druid则是一款基于时序的查询引擎，支持数据实时摄入，用来存储和查询大量的事实数据。而选用Elasticsearch作为维度数据存储引擎，主要是因为如下原因：</p><ul><li>支持高频实时更新，可以支撑上千 QPS的 Update操作</li><li>支持分词模糊检索，适用于快手的业务</li><li>支持量级较高的维表数据，不用像MySQL数据库一样做分库分表才能满足</li><li>支持数据同步监控，同时拥有检查和恢复的服务</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="24-报表引擎">2.4 报表引擎<a href="#24-报表引擎" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>报表引擎架构整体分为REFront 和 REQuery两层，REMeta为独立的元数据管理模块。报表引擎在REQuery内部实现MEM Join。支持Druid引擎中的事实数据与ES引擎中的维度数据做关联查询。为上层业务提供虚拟的cube表查询。屏蔽复杂的跨引擎管理查询逻辑。</p><p><img loading="lazy" alt="1" src="https://cdnd.selectdb.com/zh-CN/assets/images/1-ca39b5dcdd3d69d8fee822dc1b74a2e5.png" width="864" height="885" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-基于apache-doris的架构">3 基于Apache Doris的架构<a href="#3-基于apache-doris的架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="31-架构遗留的问题">3.1 架构遗留的问题<a href="#31-架构遗留的问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>首先，我们在使用报表引擎时，发现了这样的一个问题。Mem Join是单机实现与串行执行，到单次从ES中拉取的数据量超过10W时，响应时间已经接近10s，用户体验差。而且单节点实现大规模数据Join处理，内存消耗大，有Full GC风险。</p><p>其次，Druid的Lookup Join了功能不够完善是一个较大的问题，不能完全满足真实业务需求。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="32-选型调研">3.2 选型调研<a href="#32-选型调研" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>于是我们对业界常见的 OLAP 数据库进行了调研，其中最具代表性的为 Apache Doris和 Clickhouse。在进一步的调研中我们发现，Apache Doris在大宽表Join的能力更强。ClickHouse能够支持 Broadcast 基于内存的Join，但是对于大数据量千万级以上大宽表的Join，ClickHouse 的性能表现不好。Doris 和 Clickhouse 都支持明细数据存储，但Clickhouse支持的并发度较低，相反Doris支持高并发低延时的查询服务，单机最高支持上千QPS。在并发增加时，线性扩充FE和BE即可支持。而Clickhouse的数据导入没有事务支持功能，无法实现exactly once语义，对标准sql的支持也是有限的。相比之下，Doris提供了数据导入的事务支持和原子性，Doris 自身能够保证不丢不重的订阅 Kafka 中的消息，即 Exactly-Once 消费语义。ClickHouse使用门槛高、运维成本高和分布式能力弱，需要较多的定制化和较深的技术实力也是另一个难题，Doris则不同，只有FE、BE两个核心组件，外部依赖也比较少，运维快捷简单。我们还发现，由于Doris 更加接近 MySQL协议，比起Clickhouse更加便捷，在迁移时的成本并不大。在横向扩容方面，Doris 的扩缩容也能够做到自平衡，大大优于Clickhouse。</p><p>由此看来Doris可以比较好的提升Join的性能，在迁移成本、横向扩容、并发程度等其他方面也比较优秀。不过在高频Update上，Elasticsearch具有先天的优势。</p><p>通过 Doris 创建 ES 外表的方式来同时应对高频Upate和Join性能问题，会是比较理想的解决方案。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="33-dorisdoris-on-es完美配合">3.3 Doris+Doris on ES完美配合<a href="#33-dorisdoris-on-es完美配合" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Doris on ES 的查询性能究竟如何呢？</p><p>首先，Apache Doris 是一个基于MPP 架构的实时分析型数据库，性能强劲、横向扩展能力能力强。Doris on ES构建在这个能力之上，并且对查询做了大量的优化。其次，在这些之上，融合Elasticsearch的能力之后，我们还对查询功能做出了大量的优化：</p><ul><li>Shard级别并发</li><li>行列扫描自动适配，优先列式扫描</li><li>顺序读取，提前终止</li><li>两阶段查询变为一阶段查询</li><li>Join场景使用Broadcast Join，对于小批量数据Join特别友好</li></ul><p><img loading="lazy" alt="2" src="https://cdnd.selectdb.com/zh-CN/assets/images/2-b0e578721df866bb977d80072c559f32.png" width="864" height="800" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="34-基于doris-on-elasticsearch的架构实现">3.4 基于Doris on Elasticsearch的架构实现<a href="#34-基于doris-on-elasticsearch的架构实现" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="341-数据链路升级">3.4.1 数据链路升级<a href="#341-数据链路升级" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>数据链路的升级适配比较简单。第一步，由Doris构建新的Olap表，配置好物化视图。第二步，基于之前事实数据的kafka topic启动routine load，导入实时数据。第三步，从Hive中通broker load导入离线数据。最后一步，通过Doris创建Es外表。</p><p><img loading="lazy" alt="3" src="https://cdnd.selectdb.com/zh-CN/assets/images/3-1c0a381d13453a0e975d97ffab096981.png" width="864" height="629" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="342-报表引擎适配升级">3.4.2 报表引擎适配升级<a href="#342-报表引擎适配升级" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" alt="4" src="https://cdnd.selectdb.com/zh-CN/assets/images/4-3fca61e78e95bd16fad48de37ee7124f.png" width="864" height="722" class="img_ev3q"></p><p>注：上图关联的mysql维表是基于未来规划，目前主要是ES做维表引擎</p><p>报表引擎适配</p><ul><li>抽象基于Doris的星型模型虚拟cube表</li><li>适配cube表查询解析，智能下推</li><li>支持灰度上线</li></ul><h1>4  线上表现</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="41-查询响应时间">4.1 查询响应时间<a href="#41-查询响应时间" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="411-事实表查询表现对比">4.1.1 事实表查询表现对比<a href="#411-事实表查询表现对比" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Druid</p><p><img loading="lazy" alt="5" src="https://cdnd.selectdb.com/zh-CN/assets/images/5-4ce2b0396e8e14ac9e536befcf11cfd0.png" width="864" height="200" class="img_ev3q"></p><p>Doris</p><p><img loading="lazy" alt="6" src="https://cdnd.selectdb.com/zh-CN/assets/images/6-80fe6a32cf89065b0323afca7038f0ba.png" width="864" height="195" class="img_ev3q"></p><p>99分位耗时Druid大概为270ms，Doris为150ms，延时下降45%</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="412-join场景下cube表查询表现对比">4.1.2 Join场景下cube表查询表现对比<a href="#412-join场景下cube表查询表现对比" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Druid</p><p><img loading="lazy" alt="7" src="https://cdnd.selectdb.com/zh-CN/assets/images/7-30f72edbee75326a65e006652a846e63.png" width="864" height="197" class="img_ev3q"></p><p>Doris</p><p><img loading="lazy" alt="8" src="https://cdnd.selectdb.com/zh-CN/assets/images/8-b9485387d33cb96f36fdcaf09999ce2a.png" width="864" height="193" class="img_ev3q"></p><p>99分位耗时Druid大概为660ms，Doris为440ms，延时下降33%</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="413-收益总结">4.1.3 收益总结<a href="#413-收益总结" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>P99整体耗时下降35%左右</li><li>资源节省50%左右</li><li>去除报表引擎内部Mem Join的复杂逻辑，下沉至Doris通过DOE实现，在大查询场景下(维表结果超过10W，性能提升超过10倍，10s-&gt;1s)</li><li>更丰富的查询语义(原本Mem Join实现比较简单，不支持复杂的查询)</li></ul><h1>5  总结与未来规划</h1><p>在快手商业化业务里面，维度数据与事实数据Join查询是非常普遍的。使用Doris 之后，查询变得简单。我们仅需要按天同步事实表和维表，在查询的同时 Join即可。通过Doris替代Druid、Clickhouse的方案，基本覆盖了我们使用Druid 时的所有场景，大大提高了海量数据的聚合分析能力。在Apache Doris的使用过程中，我们还发现了一些意想不到的收益：例如，Routine Load和 Broker Load的导入方式较为简单，提升了查询速度；数据占用空间大幅降低；Doris支持MySQL协议，方便了数据分析师自助取数绘图等。</p><p>尽管Doris on ES的解决方案比较成功的满足了我们的报表业务，ES外表映射仍然需要手工建表。但Apache Doris于近日完成了最新版本V1.2.0的发布，新版本功能新增了Multi-Catlog，提供了无缝接入Hive、ES、Hudi、Iceberg 等外部数据源的能力。用户可以通过 CREATE CATALOG 命令连接到外部数据源，Doris 会自动映射外部数据源的库、表信息。如此一来，以后我们就不需要再手动创建Es外表完成映射，大大节省了开发的时间成本，提升了研发效率。而全面向量化、Ligt Schema Change、Merge-on-Write、Java UDF等其他新功能的实现，也让我们对Apache Doris有了全新的期待。祝福Apache Doris！</p><h1>联系我们</h1><p>官网：<a href="http://doris.apache.org" target="_blank" rel="noopener noreferrer">http://doris.apache.org</a></p><p>Github：<a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris</a></p><p>dev邮件组：<a href="mailto:dev@doris.apache.org" target="_blank" rel="noopener noreferrer">dev@doris.apache.org</a></p>]]></content>
        <author>
            <name>贺祥</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[最佳实践: Apache Doris 在小米数据场景的应用实践与优化]]></title>
        <id>https://doris.apache.org/zh-CN/blog/xiaomi_vector</id>
        <link href="https://doris.apache.org/zh-CN/blog/xiaomi_vector"/>
        <updated>2022-12-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<blockquote><p>导读：小米集团于 2019 年首次引入了 Apache Doris ，目前 Apache Doris 已经在小米内部数十个业务中得到广泛应用，并且在小米内部已经形成一套以 Apache Doris 为核心的数据生态。本篇文章转录自 Doris 社区线上 Meetup 主题演讲，旨在分享 Apache Doris 在小米数据场景的落地实践与优化实践。</p></blockquote><blockquote><p>作者｜魏祚 小米 OLAP 引擎研发工程师 </p></blockquote><p><img loading="lazy" alt="kv" src="https://cdnd.selectdb.com/zh-CN/assets/images/kv-b27d71e34981d9850785329cea2cb610.png" width="900" height="383" class="img_ev3q"></p><h1>关于小米</h1><p>小米公司（“小米”或“集团”；HKG：1810），一家消费电子和智能制造公司，其智能手机和智能硬件通过物联网 (IoT) 平台连接。 2021年，小米总收入达到人民币3283亿元（4722.3131.62亿美元），同比增长33.5%；调整后净利润为人民币 220 亿元（316,451.08 万美元），同比增长 69.5%。</p><p>因分析业务的增长，小米集团于 2019 年首次引入了 Apache Doris 。经过三年时间的发展，目前 Apache Doris 已经在广告投放、新零售、增长分析、数据看板、用户画像、天星数科、小米有品、等小米内部数十个业务和品牌中得到广泛应用，并且在小米内部已经围绕 Apache Doris 为核心建设了数据生态。</p><p><img loading="lazy" alt="1" src="https://cdnd.selectdb.com/zh-CN/assets/images/1-1ba7f77a03c987c9397cedee505fe819.png" width="1080" height="600" class="img_ev3q"></p><p>当前 Apache Doris 在小米内部已经具有数十个集群、总体达到数百台 BE 节点的规模，其中单集群最大规模达到近百台节点，拥有数十个实时数据同步任务，每日单表最大增量 120 亿、支持 PB 级别存储，单集群每天可以支持 2W 次以上的多维分析查询。</p><h1>架构演进</h1><p>小米引入 Apache Doris 的初衷是为了解决内部的用户行为分析中所遇到的问题。随着小米互联网业务的发展，利用用户行为数据进行增长分析的需求越来越强烈。如果每个业务产品线都自己搭建一套增长分析系统，不仅成本高昂，效率也不高。因此如果能有一款产品能够帮助他们不用关心底层的复杂技术细节，让相关业务人员能够专注于自己的技术工作，可以极大提高工作效率。所以，小米大数据和云平台联合开发了增长分析系统 Growing Analytics（下文中简称 GA)，旨在提供一个灵活的多维实时查询和分析平台，可以统一管理数据接入和查询方案，帮助业务线做好精细化运营。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="历史架构">历史架构<a href="#历史架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>增长分析平台立项于 2018 年年中，当时基于开发时间和成本，技术栈等因素的考虑，小米复用了现有各种大数据基础组件（HDFS, Kudu, SparkSQL 等），搭建了一套基于 Lamda 架构的增长分析查询系统。GA 系统初代版本的架构如下图所示，包含了以下几个方面：</p><ul><li>数据源：数据源是前端的埋点数据以及用户行为数据。</li><li>数据接入层：对埋点数据进行统一的清洗后写入小米内部自研的消息队列中，并通过 Spark Streaming 将数据导入Kudu 中。</li><li>存储层：在存储层中进行冷热数据分离。热数据存放在 Kudu 中，冷数据则会存放在 HDFS 上。同时在存储层中进行分区，当分区单位为天时，每晚会将一部分数据转冷并存储到 HDFS 上。</li><li>计算层/查询层：在查询层中，使用 SparkSQL 对 Kudu 与 HDFS 上数据进行联邦查询，最终把查询结果显示在前端页面。</li></ul><p><img loading="lazy" alt="2" src="https://cdnd.selectdb.com/zh-CN/assets/images/2-f6f2fe0acf61bc2e3aefb9f853931c27.png" width="1080" height="603" class="img_ev3q"></p><p>在当时的历史背景下，初代版本的增长分析平台帮助我们解决了一系列用户运营过程中的问题，但同时在历史架构中也存在了两个问题：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一个问题组件分散">第一个问题：组件分散<a href="#第一个问题组件分散" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>由于历史架构是基于 SparkSQL + Kudu + HDFS 的组合，依赖的组件过多导致运维成本较高。原本的设计是各个组件都使用公共集群的资源，但是实践过程中发现执行查询作业的过程中，查询性能容易受到公共集群其他作业的影响，容易发生查询抖动，尤其在读取 HDFS 公共集群的数据时，有时较为缓慢。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二个问题资源占用高">第二个问题：资源占用高<a href="#第二个问题资源占用高" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过 SparkSQL 进行查询时，延迟相对较高。SparkSQL 是基于批处理系统设计的查询引擎，在每个 Stage 之间交换数据 Shuffle 的过程中依然需要进行落盘，完成 SQL 查询的时延较高。为了保证 SQL 查询不受资源的影响，我们通过添加机器来保证查询性能，但是实践过程中发现，性能提升的空间有限，这套解决方案并不能充分地利用机器资源来达到高效查询的目的，存在一定的资源浪费。</p><p>针对上述两个问题，我们的目标是寻求一款计算、存储一体的 MPP 数据库来替代我们目前的存储计算层的组件，在通过技术选型后，最终我们决定使用 Apache Doris 替换老一代历史架构。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重新选型">重新选型<a href="#重新选型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>MPP架构的查询引擎，如Impala,Presto等能够高效地支持SQL查询，但是仍然需要依赖Kudu, HDFS, Hive Metastore等组件, 运维成本依然比较高。同时，由于计算存储分离，查询引擎不能很好地及时感知存储层的数据变化，就无法做更细致的查询优化。如想在SQL层做缓存就无法保证查询的结果是最新的。</p><p>Doris是Apache基金会顶级项目，主要定位是高性能的、支持实时的分析型数据库， 主要用于解决报表和多维分析。它主要集成了 Google Mesa 和 Cloudera Impala 技术。我们对Doris进行了内部的性能测试并多次和社区沟通交流，确定了用Doris替换原来的计算存储组件的解决方案。我们新的架构如下图所示：</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="基于-apache-doris-的新版架构">基于 Apache Doris 的新版架构<a href="#基于-apache-doris-的新版架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>新版架构从数据源获取埋点数据后，数据接入后写入 Apache Doris 后可以直接查询结果并在前端进行显示。真正实现了通过Doris统一了计算、存储，和资源管理yarn相关工具。</p><p><img loading="lazy" alt="3" src="https://cdnd.selectdb.com/zh-CN/assets/images/3-266579e567d5c09c8931d7044813c707.png" width="1080" height="598" class="img_ev3q"></p><p>我们选择 Doris 原因：</p><ul><li>Doris 具有优秀的查询性能，能够满足业务需求。</li><li>Doris 支持标准 SQL ，用户使用与学习成本较低。</li><li>Doris 不依赖于其他的外部系统，运维简单。</li><li>Doris 社区拥有很高活跃度，版本迭代快。开发者规模大，有利于后续系统的维护升级。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="新旧架构性能对比">新旧架构性能对比<a href="#新旧架构性能对比" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="4" src="https://cdnd.selectdb.com/zh-CN/assets/images/4-c98f04af8754b651217aa474e7178d39.png" width="1061" height="546" class="img_ev3q"></p><p>我们选取了日均数据量大约 10 亿的业务，分别在不同场景下对Doris进行了性能测试，其中包含 6 个事件分析场景，3 个留存分析场景以及 3 个漏斗分析场景。经过与【SparkSQL+Kudu+HDFS】的旧方案对比后，我们发现：</p><ul><li>在事件分析的场景下，平均查询所耗时间降低了 85%。</li><li>在留存分析和漏斗分析场景下，平均查询所耗时间降低了 50%。</li></ul><h1>应用实践</h1><p>下面将介绍我们在Apache Doris应用中数据导入、数据查询、A/B测试的经验。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据导入">数据导入<a href="#数据导入" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="5" src="https://cdnd.selectdb.com/zh-CN/assets/images/5-adfeb633824992e5692635b13cfdfb78.png" width="1080" height="607" class="img_ev3q"></p><p>小米内部主要通过 Stream Load 与 Broker Load 以及少量 Insert 方式来导入数据到Doris。数据一般会先写入到消息队列中，分为实时数据和离线数据两个部分。
实时数据如何写入到Apache Doris 中：一部分实时数据通过 Flink数据处理 后， 并通过 Doris 社区提供的 Flink Doris Connector 组件写入到 Doris 中。另一部分数据通过 Spark Streaming 组件写入。这两种写入方式的底层都依赖的是社区提供的 Stream Load。
离线数据如何写入到Apache Doris 中：离线数据部分写入 Hive 后，通过小米的数据工场将数据导入到 Doris 中。用户可以直接在数据工场提交 Broker Load 任务并将数据直接导入 Doris 中，也可以通过 Spark SQL 将数据导入 。Spark SQL 方式则是依赖了 Doris 社区提供的 Spark Doris Connector 组件，其底层为 Doris 的 Stream Load 的封装。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据查询">数据查询<a href="#数据查询" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="6" src="https://cdnd.selectdb.com/zh-CN/assets/images/6-5ec3ef0ad093ee68dd7297622a064096.png" width="1080" height="596" class="img_ev3q"></p><p>用户通过数据工场将数据导入至 Doris 后即可进行查询。在小米内部，可以通过自研的数鲸平台进行查询的。用户可以通过数鲸平台对 Doris 进行可视化的查询，并展开用户行为分析和用户画像分析。其中，为帮助业务进行事件分析、留存分析、漏斗分析、路径分析等行为分析，我们为 Doris 添加了相应的 UDF （User Defined Function）和 UDAF (User Defined Aggregate Function)。
在即将发布的 1.2 版本中，Doris添加了外表元数据同步的功能，支持 Hive/Hudi/Iceberg 外表并增加了 Multi Catalog。查询外部表提升了性能，接入外表大幅增加了易用性。在未来，我们考虑直接通过 Doris 查询 Hive 与 Iceberg 数据，构建湖仓一体的架构。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ab测试">A/B测试<a href="#ab测试" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>小米的 A/B 实验平台对 Apache Doris 查询性能的提升有着迫切的需求，因此我们选择优先在小米的 A/B 实验平台上线 Apache Doris 向量化版本，也就是 1.1.2 版本。</p><p>小米的 A/B 实验平台是一款通过 A/B 测试的方式，借助实验分组、流量拆分与科学评估等手段来辅助完成科学的业务决策，最终实现业务增长的一款运营工具产品。在实际业务中，为了验证一个新策略的效果，通常需要准备原策略 A 和新策略 B 两种方案。随后在总体用户中取出一小部分，将这部分用户完全随机地分在两个组中，使两组用户在统计角度无差别。将原策略 A 和新策略 B 分别展示给不同的用户组，一段时间后，结合统计方法分析数据，得到两种策略生效后指标的变化结果，并以此来判断新策略 B 是否符合预期。</p><p>小米的 A/B 实验平台有几类典型的查询应用：用户去重、指标求和、实验协方差计算等，查询类型会涉及较多的 Count(distinct)、Bitmap计算、Like语句等。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="上线前验证">上线前验证<a href="#上线前验证" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>我们基于 Apache Doris 1.1.2 版本搭建了一个和小米线上 Apache Doris 0.13 版本在机器配置和机器规模上完全相同的测试集群，用于向量化版本上线前的验证。验证测试分为两个方面：单 SQL 串行查询测试和批量 SQL 并发查询测试。在这两种测试中，我们在保证两个集群数据完全相同的条件下，分别在 Doris 1.1.2 测试集群和小米线上 Doris 0.13 集群执行相同的查询 SQL 来做性能对比。我们的目标是，Doris 1.1.2 版本在小米线上 Doris 0.13 版本的基础上有 1 倍的查询性能提升。
两个集群配置完全相同，具体配置信息如下：</p><ul><li>集群规模：3 FE + 89 BE</li><li>BE节点CPU:  Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz 16核 32线程 × 2</li><li>BE节点内存：256GB</li><li>BE节点磁盘：7.3TB × 12 HDD</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="单-sql-串行查询测试">单 SQL 串行查询测试<a href="#单-sql-串行查询测试" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>在该测试场景中，我们选取了小米A/B 实验场景中 7 个典型的查询 Case，针对每一个查询 Case，我们将扫描的数据时间范围分别限制为 1 天、7 天和 20 天进行查询测试，其中单日分区数据量级大约为 31 亿（数据量大约 2 TB），测试结果如图所示：</p><p><img loading="lazy" alt="7" src="https://cdnd.selectdb.com/zh-CN/assets/images/7-8f6f2d02c9688f713ef48c8221c25158.png" width="750" height="450" class="img_ev3q"></p><p><img loading="lazy" alt="8" src="https://cdnd.selectdb.com/zh-CN/assets/images/8-0ee361fa5acabc282382a20b61f5baaa.png" width="749" height="450" class="img_ev3q"></p><p><img loading="lazy" alt="9" src="https://cdnd.selectdb.com/zh-CN/assets/images/9-f28d9b3dc18ad2f8314faaf514c5dc69.png" width="750" height="450" class="img_ev3q"></p><p>根据以上小米 A/B 实验场景下的单 SQL 串行查询测试结果所示，Doris 1.1.2 版本相比小米线上 Doris 0.13 版本至少有 3~5 倍的性能提升，效果显著。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="调优测试结果">调优测试结果<a href="#调优测试结果" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>我们基于小米的 A/B实验场景对 Apache Doris 1.1.2 版本进行了一系列调优，并将调优后的 Doris 1.1.2 版本与小米线上 Doris 0.13 版本分别进行了并发查询测试。测试情况如下：</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="测试-1">测试 1<a href="#测试-1" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>我们选择了 A/B 实验场景中一批典型的用户去重、指标求和以及协方差计算的查询 Case（SQL 总数量为 3245）对两个版本进行并发查询测试，测试表的单日分区数据大约为 31 亿（数据量大约 2 TB），查询的数据范围会覆盖最近一周的分区。测试结果如图所示，Doris 1.1.2 版本相比 Doris0.13版本，总体的平均延迟降低了大约 48%，P95 延迟降低了大约 49%。在该测试中，Doris 1.1.2 版本相比 Doris0.13 版本的查询性能提升了接近 1 倍。</p><p><img loading="lazy" alt="10" src="https://cdnd.selectdb.com/zh-CN/assets/images/10-c9499045fecce0f0eae927ba3e0ac883.png" width="1080" height="338" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="测试-2">测试 2<a href="#测试-2" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>我们选择了 A/B实验场景下的 7 份 A/B 实验报告对两个版本进行测试，每份 A/B 实验报告对应小米 A/B实验平台页面的两个模块，每个模块对应数百或数千条查询 SQL。每一份实验报告都以相同的并发向两个版本所在的集群提交查询任务。测试结果如图所示，Doris 1.1.2 版本相比 Doris 0.13 版本，总体的平均延迟降低了大约 52%。在该测试中，Doris 1.1.2 版本相比 Doris 0.13 版本的查询性能提升了超过 1 倍。</p><p><img loading="lazy" alt="11" src="https://cdnd.selectdb.com/zh-CN/assets/images/11-164d7e9bca3b81ccb6bae88a0048be41.png" width="750" height="450" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="测试-3">测试 3<a href="#测试-3" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>为了验证调优后的 Apache Doris 1.1.2 版本在小米 A/B 实验场景之外的性能表现，我们选取了小米用户行为分析场景进行了 Doris 1.1.2 版本和 Doris 0.13 版本的并发查询性能测试。我们选取了 2022年10月24日、25日、26日和 27日这 4 天的小米线上真实的行为分析查询 Case 进行对比查询，测试结果如图所示，Doris 1.1.2 版本相比 Doris 0.13 版本，总体的平均延迟降低了大约7 7%，P95 延迟降低了大约 83%。在该测试中，Doris 1.1.2 版本相比 Doris 0.13 版本的查询性能有 4~6 倍的提升。</p><p><img loading="lazy" alt="12" src="https://cdnd.selectdb.com/zh-CN/assets/images/12-125f05fc3d7544d5f15edf2ab41184e8.png" width="1080" height="338" class="img_ev3q"></p><h1>总结</h1><p>自从 Apache Doris 从 2019 年上线第一个业务至今，目前 Apache Doris 已经在小米内部服务了数十个业务及子品牌、集群数量达到数十个、节点规模达到数百台。每天完成数万次用户在线分析查询，承担了包括增长分析和报表查询等绝大多数在线分析的需求。</p><p>经过一个多月的性能调优和测试，Apache Doris 1.1.2 版本在查询性能和稳定性方面已经达到了小米 A/B实验平台的上线要求，在某些场景下的查询性能甚至超过了我们的预期，希望本次分享可以给有需要的朋友一些可借鉴的经验参考。</p><p>与此同时，在以上小米的实践中，已有部分功能在 Apache Doris 1.0 或 1.1 版本中发布，部分 PR 已经合入社区 Master，将在不久后发布的 1.2 新版本中与大家见面。随着社区的快速发展，有越来越多小伙伴参与到社区建设中，社区活跃度有了极大的提升。Apache Doris 已经变得越来越成熟，并开始从单一计算存储一体的分析型 MPP 数据库走向湖仓一体的道路，相信在未来，还会有更多的数据分析场景被探索和实现。</p><h1>联系我们</h1><p>官网：<a href="http://doris.apache.org" target="_blank" rel="noopener noreferrer">http://doris.apache.org</a></p><p>Github：<a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris</a></p><p>dev邮件组：<a href="mailto:dev@doris.apache.org" target="_blank" rel="noopener noreferrer">dev@doris.apache.org</a></p>]]></content>
        <author>
            <name>魏祚</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris 1.2.0 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-1.2.0</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-1.2.0"/>
        <updated>2022-12-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>亲爱的社区小伙伴们，再一次经历数月的等候后，我们很高兴地宣布，Apache Doris 于 2022 年 12 月 7 日迎来 1.2.0 Release 版本的正式发布！有近 118 位 Contributor 为 Apache Doris 提交了超 2400 项优化和修复，感谢每一位让 Apache Doris 更好的你！</p><p>自从社区正式确立 LTS 版本管理机制后，在 1.1.x 系列版本中不再合入大的功能，仅提供问题修复和稳定性改进，力求满足更多社区用户在稳定性方面的高要求。而在综合考虑版本迭代节奏和用户需求后，我们决定将众多新特性在 1.2 版本中发布，这无疑承载了众多社区用户和开发者的深切期盼，同时这也是一场厚积而薄发后的全面进化！</p><p>在 1.2 版本中，我们实现了全面的向量化、<strong>实现多场景查询性能 3-11 倍的提升</strong>，在 Unique Key 模型上实现了 Merge-on-Write 的数据更新模式、<strong>数据高频更新时查询性能提升达 3-6 倍</strong>，增加了 Multi-Catalog 多源数据目录、<strong>提供了无缝接入 Hive、ES、Hudi、Iceberg 等外部数据源的能力</strong>，引入了 Light Schema Change 轻量表结构变更、<strong>实现毫秒级的 Schema Change 操作并可以借助 Flink CDC 自动同步上游数据库的 DML 和 DDL 操作</strong>，以 JDBC 外部表替换了过去的 ODBC 外部表，支持了 Java UDF 和 Romote UDF 以及 Array 数组类型和 JSONB 类型，修复了诸多之前版本的性能和稳定性问题，推荐大家下载和使用！</p><h1>下载安装</h1><p>GitHub下载：<a href="https://github.com/apache/doris/releases" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/releases</a></p><p>官网下载页：<a href="https://doris.apache.org/download" target="_blank" rel="noopener noreferrer">https://doris.apache.org/download</a></p><p>源码地址：<a href="https://github.com/apache/doris/releases/tag/1.2.0-rc04" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/releases/tag/1.2.0-rc04</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="下载说明">下载说明：<a href="#下载说明" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>由于 Apache 服务器文件大小限制，官网下载页的 1.2.0 版本的二进制程序分为三个包：</p><ol><li><p>apache-doris-fe</p></li><li><p>apache-doris-be</p></li><li><p>apache-doris-java-udf-jar-with-dependencies</p></li></ol><p>其中新增的 <code>apache-doris-java-udf-jar-with-dependencies</code> 包用于支持 1.2.0 版本中的 JDBC 外表和 JAVA UDF 。下载后，需要将其中的 <code>java-udf-jar-with-dependencies.jar</code> 文件放到 <code>be/lib</code> 目录下，方可启动 BE，否则无法启动成功。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="部署说明">部署说明：<a href="#部署说明" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>从历史版本升级到 1.2.0 版本，需完整更新 fe、be 下的 bin 和 lib 目录。</p><p>其他升级注意事项，请完整阅读本发版通告最后一节“升级注意事项”以及安装部署文档 <a href="https://doris.apache.org/zh-CN/docs/dev/install/install-deploy" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/install/install-deploy</a>  和集群升级文档 <a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/cluster-management/upgrade" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/admin-manual/cluster-management/upgrade</a></p><h1>重要更新</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-全面向量化支持性能大幅提升">1. 全面向量化支持，性能大幅提升<a href="#1-全面向量化支持性能大幅提升" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 Apache Doris 1.2.0 版本中，系统所有模块都实现了向量化，包括数据导入、Schema Change、Compaction、数据导出、UDF 等。新版向量化执行引擎具备了完整替换原有非向量化引擎的能力，后续我们也将考虑在未来版本中去除原有非向量化引擎的代码。</p><p>与此同时，在全面向量化的基础上，我们对数据扫描、谓词计算、Aggregation 算子、HashJoin 算子、算子之间 Shuffle 效率等进行了全链路的优化，使得查询性能有了大幅提升。</p><p>我们对 Apache Doris 1.2.0 新版本进行了多个标准测试集的测试，同时选择了 1.1.3 版本和 0.15.0 版本作为对比参照项。经测，1.2.0 <strong>在 SSB-Flat 宽表场景上相对 1.1.3 版本整体性能提升了近 4 倍、相对于 0.15.0 版本性能提升了近 10 倍，在 TPC-H 多表关联场景上较 1.1.3 版本上有近 3 倍的提升、较 0.15.0 版本性能至少提升了 11 倍。</strong></p><p><img loading="lazy" alt="ssb_flat" src="https://cdnd.selectdb.com/zh-CN/assets/images/ssb_flat-a8cfebbc53e6f2db116876e3d53e19c7.png" width="1522" height="674" class="img_ev3q"></p><p><img loading="lazy" alt="tpch" src="https://cdnd.selectdb.com/zh-CN/assets/images/tpch-2048da37571ef8b1d4b0a49c3fba44ca.png" width="1526" height="726" class="img_ev3q"></p><p>同时，我们将 1.2.0 版本的测试数据提交到了全球知名的数据库测试排行榜 ClickBench，在最新的排行榜中，Apache Doris 1.2.0 新版本取得了通用机型（c6a.4xlarge, 500gb gp2）下<strong>查询性能 Cold Run 第二和 Hot Run 第三的醒目成绩，共有 8 个 SQL 刷新榜单最佳成绩、成为新的性能标杆</strong>。导入性能方面，1.2.0 新版本数据写入效率在同机型所有产品中位列第一，压缩前 70G 数据写入仅耗时 415s、单节点写入速度超过 170 MB/s，在实现极致查询性能的同时也保证了高效的写入效率！</p><p><img loading="lazy" alt="coldrun" src="https://cdnd.selectdb.com/zh-CN/assets/images/coldrun-14421295f1be41b3c07f50cbf6ca22da.png" width="1080" height="789" class="img_ev3q"></p><p><img loading="lazy" alt="hotrun" src="https://cdnd.selectdb.com/zh-CN/assets/images/hotrun-775474e22c7de74f0763c3cbca13e377.png" width="1080" height="786" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-在-unique-key-模型上实现了-merge-on-write-的数据更新模式">2. 在 Unique Key 模型上实现了 Merge-on-Write 的数据更新模式<a href="#2-在-unique-key-模型上实现了-merge-on-write-的数据更新模式" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在过去版本中， Apache Doris 主要是通过 Unique Key 数据模型来实现数据实时更新的。但由于采用的是 Merge-on-Read 的实现方式，查询存在着效率瓶颈，有大量非必要的 CPU 计算资源消耗和 IO 开销，且可能将出现查询性能抖动等问题。</p><p>在 1.2.0 版本中，我们在原有的 Unique Key 数据模型上，增加了 Merge-on-Write 的数据更新模式。该模式在数据写入时即对需要删除或更新的数据进行标记，始终保证有效的主键只出现在一个文件中（即在写入的时候保证了主键的唯一性），不需要在读取的时候通过归并排序来对主键进行去重，这对于高频写入的场景来说，大大减少了查询执行时的额外消耗。此外还能够支持谓词下推，并能够很好利用 Doris 丰富的索引，在数据  IO 层面就能够进行充分的数据裁剪，大大减少数据的读取量和计算量，因此在很多场景的查询中都有非常明显的性能提升。</p><p>在比较有代表性的 SSB-Flat 数据集上，通过模拟多个持续导入场景，<strong>新版本的大部分查询取得了 3-6 倍的性能提升</strong>。</p><p><img loading="lazy" alt="mergeonwrite_ssb" src="https://cdnd.selectdb.com/zh-CN/assets/images/mergeonwrite_ssb-f76d6e3636efd5bbf53d0d05fdc7d90d.png" width="1280" height="889" class="img_ev3q"></p><p>使用场景：所有对主键唯一性有需求，需要频繁进行实时 Upsert 更新的用户建议打开。</p><p>使用说明：作为新的 Feature 默认关闭，用户可以通过在建表时添加下面的 Property 来开启：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">“enable_unique_key_merge_on_write” = “true”</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>另外新版本 Merge-on-Write 数据更新模式与旧版本 Merge-on-Read 实现方式存在差异，因此已经创建的 Unique Key 表无法直接通过 Alter Table 添加 Property 来支持，只能在新建表的时候指定。如果用户需要将旧表转换到新表，可以使用 <code>insert into new_table select * from old_table</code> 的方式来实现。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-multi-catalog-多源数据目录">3. Multi Catalog 多源数据目录<a href="#3-multi-catalog-多源数据目录" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Multi-Catalog 多源数据目录功能的目标在于能够帮助用户更方便对接外部数据目录，以增强 Apache Doris 的数据湖分析和联邦数据查询能力。</p><p>在过去版本中，当我们需要对接外部数据源时，只能在 Database 或 Table 层级对接。当外部数据目录 Schema 发生变化、或者外部数据目录的 Database 或 Table 非常多时，需要用户手工进行一一映射，维护量非常大。1.2.0 版本新增的多源数据目录功能为 Apache Doris 提供了快速接入外部数据源进行访问的能力，用户可以通过 <code>CREATE CATALOG</code> 命令连接到外部数据源，Doris 会自动映射外部数据源的库、表信息。之后，用户就可以像访问普通表一样，对这些外部数据源中的数据进行访问，避免了之前用户需要对每张表手动建立外表映射的复杂操作。</p><p>目前能支持以下数据源：</p><ol><li><p>Hive Metastore：可以访问包括 Hive、Iceberg、Hudi 在内的数据表，也可对接兼容 Hive Metastore 的数据源，如阿里云的 DataLake Formation，同时支持 HDFS 和对象存储上的数据访问。</p></li><li><p>Elasticsearch：访问 ES 数据源。</p></li><li><p>JDBC：支持通过 JDBC 访问 MySQL 数据源。</p></li></ol><p>注：相应的权限层级也会自动变更，详见“升级注意事项”部分</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/ecosystem/external-table/multi-catalog" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/ecosystem/external-table/multi-catalog</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-轻量表结构变更-light-schema-change">4. 轻量表结构变更 Light Schema Change<a href="#4-轻量表结构变更-light-schema-change" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在过去版本中，Schema Change 是一项相对消耗比较大的工作，需要对数据文件进行修改，在集群规模和表数据量较大时执行效率会明显降低。同时由于是异步作业，当上游 Schema 发生变更时，需要停止数据同步任务并手动执行 Schema Change，增加开发和运维成本的同时还可能造成消费数据的挤压。</p><p>在 1.2.0 新版本中，对数据表的加减列操作，不再需要同步更改数据文件，仅需在 FE 中更新元数据即可，从而实现毫秒级的 Schema Change 操作，且存在导入任务时效率的提升更为显著。与此同时，使得 Apache Doris 在面对上游数据表维度变化时，可以更加快速稳定实现表结构同步，保证系统的高效且平稳运转。如用户可以通过 Flink CDC，可实现上游数据库到 Doris 的 DML 和 DDL 同步，进一步提升了实时数仓数据处理和分析链路的时效性与便捷性。</p><p><img loading="lazy" alt="lightschemachange_compare.png" src="https://cdnd.selectdb.com/zh-CN/assets/images/lightschemachange_compare-07aee86928ef33271351a31bec3ed9cf.png" width="1280" height="393" class="img_ev3q"></p><p>使用说明：作为新的 Feature 默认关闭，用户可以通过在建表时添加下面的 Property 来开启：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"light_schema_change" = "true"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-TABLE" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-TABLE</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-jdbc-外部表">5. JDBC 外部表<a href="#5-jdbc-外部表" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在过去版本中，Apache Doris 提供了 ODBC 外部表的方式来访问 MySQL、Oracle、SQL Server、PostgreSQL 等数据源，但由于 ODBC 驱动版本问题可能造成系统的不稳定。相对于 ODBC，JDBC 接口更为统一且支持数据库众多，因此在 1.2.0 版本中我们实现了 JDBC 外部表以替换原有的 ODBC 外部表。在新版本中，用户可以通过 JDBC 连接支持 JDBC 协议的外部数据源，</p><p>当前已适配的数据源包括：</p><ul><li>MySQL</li><li>PostgreSQL</li><li>Oracle</li><li>SQLServer</li><li>ClickHouse</li></ul><p>更多数据源的适配已经在规划之中，原则上任何支持 JDBC 协议访问的数据库均能通过 JDBC 外部表的方式来访问。而之前的 ODBC 外部表功能将会在后续的某个版本中移除，还请尽量切换到 JDBC 外表功能。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/ecosystem/external-table/jdbc-of-doris/" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/ecosystem/external-table/jdbc-of-doris/</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-java-udf">6. JAVA UDF<a href="#6-java-udf" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在过去版本中，Apache Doris 提供了 C++ 语言的原生 UDF，便于用户通过自己编写自定义函数来满足特定场景的分析需求。但由于原生 UDF 与 Doris 代码耦合度高、当 UDF 出现错误时可能会影响集群稳定性，且只支持 C++ 语言，对于熟悉 Hive、Spark 等大数据技术栈的用户而言存在较高门槛，因此在 1.2.0 新版本我们增加了 Java 语言的自定义函数，支持通过 Java 编写 UDF/UDAF，方便用户在 Java 生态中使用。同时，通过堆外内存、Zero Copy 等技术，使得跨语言的数据访问效率大幅提升。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/ecosystem/udf/java-user-defined-function" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/ecosystem/udf/java-user-defined-function</a></p><p>示例：<a href="https://github.com/apache/doris/tree/master/samples/doris-demo" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/tree/master/samples/doris-demo</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="7-remote-udf">7. Remote UDF<a href="#7-remote-udf" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>远程 UDF 支持通过 RPC 的方式访问远程用户自定义函数服务，从而彻底消除用户编写 UDF 的语言限制，用户可以使用任意编程语言实现自定义函数，完成复杂的数据分析工作。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/ecosystem/udf/remote-user-defined-function" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/ecosystem/udf/remote-user-defined-function</a></p><p>示例：<a href="https://github.com/apache/doris/tree/master/samples/doris-demo" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/tree/master/samples/doris-demo</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="8-arrayjsonb-复合数据类型">8. Array/JSONB 复合数据类型<a href="#8-arrayjsonb-复合数据类型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>Array 类型</li></ul><p>支持了数组类型，同时也支持多级嵌套的数组类型。在一些用户画像，标签等场景，可以利用 Array 类型更好的适配业务场景。同时在新版本中，我们也实现了大量数组相关的函数，以更好的支持该数据类型在实际场景中的应用。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/ARRAY" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/ARRAY</a></p><p>相关函数：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-functions/array-functions/array" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-functions/array-functions/array</a></p><ul><li>JSONB 类型</li></ul><p>支持二进制的 JSON 数据类型 JSONB。该类型提供更紧凑的 JSONB 编码格式，同时提供在编码格式上的数据访问，相比于使用字符串存储的 JSON 数据，有数倍的性能提升。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/JSONB" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/JSONB</a></p><p>相关函数：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-functions/json-functions/jsonb_parse" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-functions/json-functions/jsonb_parse</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="9-datev2datatimev2-新版日期日期时间数据类型">9. DateV2/DatatimeV2 新版日期/日期时间数据类型<a href="#9-datev2datatimev2-新版日期日期时间数据类型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>支持 DataV2 日期类型和 DatatimeV2 日期时间类型，相较于原有的 Data 和 Datatime 效率更高且支持最多到微秒的时间精度，建议使用新版日期类型。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/DATETIMEV2/" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/DATETIMEV2/</a></p><p>  <a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/DATEV2" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Types/DATEV2</a></p><p>影响范围：</p><ol><li>用户需要在建表时指定 DateV2 和 DatetimeV2，原有表的 Date 以及 Datetime 不受影响。</li><li>Datev2 和 Datetimev2 在与原来的 Date 和 Datetime 做计算时（例如等值连接），原有类型会被cast 成新类型做计算</li><li>Example 参考文档中说明</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="10-全新内存管理框架">10. 全新内存管理框架<a href="#10-全新内存管理框架" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 Apache Doris 1.2.0 版本中我们增加了全新的内存跟踪器（Memory Tracker），用以记录 Doris BE 进程内存使用，包括查询、导入、Compaction、Schema Change 等任务生命周期中使用的内存以及各项缓存。通过 Memory Tracker 实现了更加精细的内存监控和控制，大大减少了因内存超限导致的 OOM 问题，使系统稳定性进一步得到提升。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/maint-monitor/memory-management/memory-tracker" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/admin-manual/maint-monitor/memory-management/memory-tracker</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="11-table-valued-function-表函数">11. Table Valued Function 表函数<a href="#11-table-valued-function-表函数" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>增加了 Table Valued Function（TVF，表函数），TVF 可以视作一张普通的表，可以出现在 SQL 中所有“表”可以出现的位置，让用户像访问关系表格式数据一样，读取或访问来自 HDFS 或 S3 上的文件内容，</p><p>例如使用 S3 TVF 实现对象存储上的数据导入：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">insert into tbl select * from s3("s3://bucket/file.*", "ak" = "xx", "sk" = "xxx") where c1 &gt; 2;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>或者直接查询 HDFS 上的数据文件：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">insert into tbl select * from hdfs("hdfs://bucket/file.*") where c1 &gt; 2;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>TVF 可以帮助用户充分利用 SQL 丰富的表达能力，灵活处理各类数据。</p><p>文档：
<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-functions/table-functions/s3" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-functions/table-functions/s3</a></p><p><a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-functions/table-functions/hdfs" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-functions/table-functions/hdfs</a></p><h1>更多功能</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-更便捷的分区创建方式">1. 更便捷的分区创建方式<a href="#1-更便捷的分区创建方式" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>支持通过 <code>FROM TO</code> 命令创建一个时间范围内的多个分区。</p><p>文档搜索“MULTI RANGE”：
<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-TABLE" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-TABLE</a></p><p>示例：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 根据时间date 创建分区，支持多个批量逻辑和单独创建分区的混合使用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PARTITION BY RANGE(event_day)(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FROM ("2000-11-14") TO ("2021-11-14") INTERVAL 1 YEAR,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FROM ("2021-11-14") TO ("2022-11-14") INTERVAL 1 MONTH,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FROM ("2022-11-14") TO ("2023-01-03") INTERVAL 1 WEEK,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FROM ("2023-01-03") TO ("2023-01-14") INTERVAL 1 DAY,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PARTITION p_20230114 VALUES [('2023-01-14'), ('2023-01-15'))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 根据时间datetime 创建分区</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PARTITION BY RANGE(event_time)(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FROM ("2023-01-03 12") TO ("2023-01-14 22") INTERVAL 1 HOUR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-列重命名">2. 列重命名<a href="#2-列重命名" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>对于开启了 Light Schema Change 的表，支持对列进行重命名。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Alter/ALTER-TABLE-RENAME" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Alter/ALTER-TABLE-RENAME  </a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-更丰富权限管理">3. 更丰富权限管理<a href="#3-更丰富权限管理" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持行级权限</li></ul><p>可以通过 <code>CREATE ROW POLICY</code> 命令创建行级权限。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-POLICY" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-POLICY</a></p><ul><li><p>支持指定密码强度、过期时间等。</p></li><li><p>支持在多次失败登录后锁定账户。</p></li></ul><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Account-Management-Statements/ALTER-USER" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Account-Management-Statements/ALTER-USER</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-导入相关">4. 导入相关<a href="#4-导入相关" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>CSV 导入支持带 header 的 CSV 文件。</li></ul><p>在文档中搜索 <code>csv_with_names</code>：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Load/STREAM-LOAD/" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Load/STREAM-LOAD/</a></p><ul><li>Stream Load 新增 <code>hidden_columns</code>，可以显式指定 delete flag 列和 sequence 列。</li></ul><p>在文档中搜索 <code>hidden_columns</code>：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Load/STREAM-LOAD" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Load/STREAM-LOAD</a></p><ul><li><p>Spark Load 支持 Parquet 和 ORC 文件导入。</p></li><li><p>支持清理已完成的导入的 Label
文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Load/CLEAN-LABEL" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Load/CLEAN-LABEL</a></p></li><li><p>支持通过状态批量取消导入作业
文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Load/CANCEL-LOAD" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Load/CANCEL-LOAD</a></p></li><li><p>Broker Load 新增支持阿里云 OSS，腾讯 CHDFS 和华为云 OBS。</p></li></ul><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/advanced/broker" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/advanced/broker</a></p><ul><li>支持通过 hive-site.xml 文件配置访问 HDFS。</li></ul><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/config/config-dir" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/admin-manual/config/config-dir</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-支持通过-show-catalog-recycle-bin-功能查看回收站中的内容">5. 支持通过 <code>SHOW CATALOG RECYCLE BIN</code> 功能查看回收站中的内容。<a href="#5-支持通过-show-catalog-recycle-bin-功能查看回收站中的内容" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Show-Statements/SHOW-CATALOG-RECYCLE-BIN" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Show-Statements/SHOW-CATALOG-RECYCLE-BIN</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-支持-select--except-语法">6. 支持 <code>SELECT * EXCEPT</code> 语法。<a href="#6-支持-select--except-语法" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/data-table/basic-usage" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/data-table/basic-usage</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="7-outfile-支持-orc-格式导出并且支持多字节分隔符">7. OUTFILE 支持 ORC 格式导出，并且支持多字节分隔符。<a href="#7-outfile-支持-orc-格式导出并且支持多字节分隔符" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/OUTFILE" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/OUTFILE</a></p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/OUTFILE" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/OUTFILE</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="8-支持通过配置修改可保存的-query-profile-的数量">8. 支持通过配置修改可保存的 Query Profile 的数量。<a href="#8-支持通过配置修改可保存的-query-profile-的数量" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>文档搜索 FE 配置项：<code>max_query_profile_num</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="9-delete-语句支持-in-谓词条件并且支持分区裁剪">9. DELETE 语句支持 IN 谓词条件。并且支持分区裁剪。<a href="#9-delete-语句支持-in-谓词条件并且支持分区裁剪" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Manipulation/DELETE" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Manipulation-Statements/Manipulation/DELETE</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="10-时间列的默认值支持使用-current_timestamp">10. 时间列的默认值支持使用 <code>CURRENT_TIMESTAMP</code><a href="#10-时间列的默认值支持使用-current_timestamp" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>文档中搜索 "CURRENT_TIMESTAMP"：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-TABLE" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-TABLE</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="11-添加两张系统表backendsrowsets">11. 添加两张系统表：backends、rowsets<a href="#11-添加两张系统表backendsrowsets" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>backends 是 Doris 中内置系统表，存放在 information_schema 数据库下，通过该系统表可以查看当前 Doris 集群中的 BE 节点信息。</p><p>rowsets 是 Doris 中内置系统表，存放在 information_schema 数据库下，通过该系统表可以查看 Doris 集群中各个 BE 节点当前 rowsets 情况。</p><p>文档：</p><p><a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/system-table/backends" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/admin-manual/system-table/backends</a></p><p><a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/system-table/rowsets" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/admin-manual/system-table/rowsets</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="12-备份恢复">12. 备份恢复<a href="#12-备份恢复" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>Restore作业支持 <code>reserve_replica</code> 参数，使得恢复后的表的副本数和备份时一致。</p></li><li><p>Restore 作业支持 <code>reserve_dynamic_partition_enable</code> 参数，使得恢复后的表保持动态分区开启状态。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Backup-and-Restore/RESTORE" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Backup-and-Restore/RESTORE</a></p></li><li><p>支持通过内置的 libhdfs 进行备份恢复操作，不再依赖 broker。</p><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Backup-and-Restore/CREATE-REPOSITORY" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Backup-and-Restore/CREATE-REPOSITORY</a></p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="13-支持同机多磁盘之间的数据均衡">13. 支持同机多磁盘之间的数据均衡<a href="#13-支持同机多磁盘之间的数据均衡" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>文档：</p><p><a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Database-Administration-Statements/ADMIN-REBALANCE-DISK" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Database-Administration-Statements/ADMIN-REBALANCE-DISK</a></p><p><a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Database-Administration-Statements/ADMIN-CANCEL-REBALANCE-DISK" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Database-Administration-Statements/ADMIN-CANCEL-REBALANCE-DISK</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="14-routine-load-支持订阅-kerberos-认证的-kafka-服务">14. Routine Load 支持订阅 Kerberos 认证的 Kafka 服务。<a href="#14-routine-load-支持订阅-kerberos-认证的-kafka-服务" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>文档中搜索 kerberos：<a href="https://doris.apache.org/zh-CN/docs/dev/data-operate/import/import-way/routine-load-manual" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/data-operate/import/import-way/routine-load-manual</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="15-new-built-in-function-新增内置函数">15. New built-in-function 新增内置函数<a href="#15-new-built-in-function-新增内置函数" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>  新增以下内置函数:</p><ul><li>cbrt</li><li>sequence_match/sequence_count </li><li>mask/mask_first_n/mask_last_n</li><li>elt</li><li>any/any_value</li><li>group_bitmap_xor</li><li>ntile</li><li>nvl</li><li>uuid</li><li>initcap</li><li>regexp_replace_one/regexp_extract_all</li><li>multi_search_all_positions/multi_match_any</li><li>domain/domain_without_www/protocol</li><li>running_difference</li><li>bitmap_hash64</li><li>murmur_hash3_64</li><li>to_monday</li><li>not_null_or_empty</li><li>window_funnel</li><li>outer combine
以及所有 Array 函数</li></ul><h1>升级注意事项</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="fe-元数据版本变更-重要">FE 元数据版本变更 【重要】<a href="#fe-元数据版本变更-重要" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>FE Meta Version 由 107 变更为 114，因此从 1.1.x 以及更早版本升级至 1.2.0 版本后，不可回滚到之前版本。
升级过程中，建议通过灰度升级的方式，先升级部分节点并观察业务运行情况，以降低升级风险，若执行非法的回滚操作将可能导致数据丢失与损坏。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="行为改变">行为改变<a href="#行为改变" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>权限层级变更。</p><p>因为引入了 Catalog 层级，所以相应的用户权限层级也会自动变更。规则如下：</p><ul><li>GlobalPrivs 和 ResourcePrivs 保持不变</li><li>新增 CatalogPrivs 层级。</li><li>原 DatabasePrivs 层级增加 internal 前缀（表示 internal catalog 中的 db）</li><li>原 TablePrivs 层级增加 internal 前缀（表示internal catalog中的 tbl）</li></ul></li><li><p>GroupBy 和 Having 子句中，优先使用列名而不是别名进行匹配。</p></li><li><p>不再支持创建以 "mv<em>" 开头的列。"mv</em>" 是物化视图中的保留关键词</p></li><li><p>移除了 order by 语句默认添加的 65535 行的 Limit 限制，并增加 Session 变量 <code>default_order_by_limit</code> 可以自定配置这个限制。</p></li><li><p>"Create Table As Select" 生成的表，所有字符串列统一使用 String类型，不再区分 varchar/char/string </p></li><li><p>audit log 中，移除 db 和 user 名称前的 <code>default_cluster</code> 字样。</p></li><li><p>audit log 中增加 sql digest 字段</p></li><li><p>union 子句总 order by 逻辑变动。新版本中，order by 子句将在 union 执行完成后执行，除非通过括号进行显式的关联。</p></li><li><p>进行 decommission 操作时，会忽略回收站中的 tablet，确保 decomission 能够完成。</p></li><li><p>Decimal 的返回结果将按照原始列中声明的精度进行显示 ，或者按照显式指定的 cast 函数中的精度进行展示。</p></li><li><p>列名的长度限制由 64 变更为 256</p></li><li><p>FE 配置项变动</p><ul><li>默认开启 <code>enable_vectorized_load</code> 参数。</li><li>增大了 <code>create_table_timeout</code> 值。建表操作的默认超时时间将增大。 </li><li>修改 <code>stream_load_default_timeout_second</code> 默认值为 3天。</li><li>修改<code>alter_table_timeout_second</code> 的默认值为 一个月。</li><li>增加参数 <code>max_replica_count_when_schema_change</code> 用于限制 alter 作业中涉及的 replica数量，默认为100000。</li><li>添加 <code>disable_iceberg_hudi_table</code>。默认禁用了 iceberg 和 hudi 外表，推荐使用 multi catalog功能。</li></ul></li><li><p>BE 配置项变动</p><ul><li>移除了 <code>disable_stream_load_2pc</code> 参数。2PC的stream load可直接使用。</li><li>修改<code>tablet_rowset_stale_sweep_time_sec</code> ，从1800秒修改为 300 秒。</li></ul></li><li><p>Session变量变动</p><ul><li>修改变量 <code>enable_insert_strict</code> 默认为 true。这会导致一些之前可以执行，但是插入了非法值的insert操作，不再能够执行。</li><li>修改变量 <code>enable_local_exchange</code> 默认为 true </li><li>默认通过 lz4 压缩进行数据传输，通过变量 <code>fragment_transmission_compression_codec</code> 控制 </li><li>增加 <code>skip_storage_engine_merge</code> 变量，用于调试 unique 或 agg 模型的数据
文档：<a href="https://doris.apache.org/zh-CN/docs/dev/advanced/variables" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/advanced/variables</a></li></ul></li><li><p>BE 启动脚本会通过 <code>/proc/sys/vm/max_map_count</code> 检查数值是否大于200W，否则启动失败。</p></li><li><p>移除了 mini load 接口</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="升级过程中需注意">升级过程中需注意<a href="#升级过程中需注意" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ol><li>升级准备</li></ol><ul><li>需替换：lib, bin 目录（start/stop 脚本均有修改）</li><li>BE 也需要配置 JAVA_HOME，已支持 JDBC Table 和 Java UDF。</li><li>fe.conf 中默认 JVM Xmx 参数修改为 8GB。</li></ul><ol start="2"><li>升级过程中可能的错误</li></ol><ul><li>repeat 函数不可使用并报错：<code>vectorized repeat function cannot be executed</code>，可以在升级前先关闭向量化执行引擎。</li><li>schema change 失败并报错：<code>desc_tbl is not set. Maybe the FE version is not equal to the BE</code></li><li>向量化 hash join 不可使用并报错。<code>vectorized hash join cannot be executed</code>。可以在升级前先关闭向量化执行引擎。</li></ul><p>以上错误在完全升级后会恢复正常。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="性能影响">性能影响<a href="#性能影响" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>默认使用 JeMalloc 作为新版本 BE 的内存分配器，替换 TcMalloc 。</li></ul><p>JeMalloc 相比 TcMalloc 使用的内存更少、高并发场景性能更高，但在内存充足的性能测试时，TcMalloc 比 JeMalloc 性能高5%-10%，详细测试见: <a href="https://github.com/apache/doris/pull/12496" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/pull/12496</a></p><ul><li>tablet sink 中的 batch size 修改为至少 8K。</li><li>默认关闭 Page Cache 和 减少 Chunk Allocator 预留内存大小</li></ul><p>Page Cache 和 Chunk Allocator 分别缓存用户数据块和内存预分配，这两个功能会占用一定比例的内存并且不会释放。由于这部分内存占用无法灵活调配，导致在某些场景下可能因这部分内存占用而导致其他任务内存不足，影响系统稳定性和可用性，因此新版本中默认关闭了这两个功能。</p><p>但在某些延迟敏感的报表场景下，关闭该功能可能会导致查询延迟增加。如用户担心升级后该功能对业务造成影响，可以通过在 be.conf 中增加以下参数以保持和之前版本行为一致。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">disable_storage_page_cache=false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chunk_reserved_bytes_limit=10%</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="api-变化">API 变化<a href="#api-变化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>BE 的 http api 错误返回信息，由 <code>{"status": "Fail", "msg": "xxx"}</code> 变更为更具体的 <code>{"status": "Not found", "msg": "Tablet not found. tablet_id=1202"}</code></p></li><li><p><code>SHOW CREATE TABLE</code> 中， comment的内容由双引号包裹变为单引号包裹</p></li><li><p>支持普通用户通过 http 命令获取 query profile。</p></li></ul><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/http-actions/fe/manager/query-profile-action" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/admin-manual/http-actions/fe/manager/query-profile-action</a></p><ul><li>优化了 sequence 列的指定方式，可以直接指定列名。</li></ul><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/data-operate/update-delete/sequence-column-manual" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/data-operate/update-delete/sequence-column-manual</a></p><ul><li><code>show backends</code> 和 <code>show tablets</code> 返回结果中，增加远端存储的空间使用情况 (#11450)</li><li>移除了 Num-Based Compaction 相关代码(#13409)</li><li>重构了BE的错误码机制，部分返回的错误信息会发生变化(#8855)</li></ul><h1>其他</h1><ul><li>支持Docker 官方镜像。</li><li>支持在 MacOS(x86/M1) 和 ubuntu-22.04 上编译 Doris</li><li>支持进行image 文件的校验。</li></ul><p>文档搜索“--image”：<a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/maint-monitor/metadata-operation" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/admin-manual/maint-monitor/metadata-operation</a></p><ul><li>脚本相关<ul><li>FE、BE 的 stop 脚本支持通过 <code>--grace</code> 参数退出FE、BE（使用 kill -15 信号代替 kill -9）</li><li>FE start 脚本支持通过 --version 查看当前FE 版本(#11563)</li></ul></li><li>支持通过 <code>ADMIN COPY TABLET</code> 命令获取某个 tablet 的数据和相关建表语句，用于本地问题调试 </li></ul><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Database-Administration-Statements/ADMIN-COPY-TABLET" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Database-Administration-Statements/ADMIN-COPY-TABLET</a></p><ul><li>支持通过 http api，获取一个SQL语句相关的 建表语句，用于本地问题复现</li></ul><p>文档：<a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/http-actions/fe/query-schema-action" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/admin-manual/http-actions/fe/query-schema-action</a></p><ul><li>支持建表时关闭这个表的 compaction 功能，用于测试 </li></ul><p>文档中搜索 "disble_auto_compaction"：<a href="https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-TABLE" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/sql-manual/sql-reference/Data-Definition-Statements/Create/CREATE-TABLE</a></p><h1>致谢</h1><p>Apache Doris 1.2.0 版本的发布离不开所有社区用户的支持，在此向所有参与版本设计、开发、测试、讨论的社区贡献者们表示感谢，他们分别是（首字母排序）：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@924060929</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@a19920714liou</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@adonis0147</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Aiden-Dong</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@aiwenmo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@AshinGau</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@b19mud</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@BePPPower</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@BiteTheDDDDt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@bridgeDream</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ByteYue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@caiconghui</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@CalvinKirs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@cambyzju</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@caoliang-web</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@carlvinhust2012</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@catpineapple</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ccoffline</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@chenlinzhong</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@chovy-3012</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@coderjiang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@cxzl25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dataalive</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dataroaring</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dependabot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dinggege1024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@DongLiang-0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Doris-Extras</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@eldenmoon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@EmmyMiao87</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@englefly</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@FreeOnePlus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Gabriel39</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@gaodayue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@geniusjoe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@gj-zhang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@gnehil</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@GoGoWen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@HappenLee</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@hello-stephen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Henry2SS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@hf200012</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@huyuanfeng2018</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@jacktengg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@jackwener</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@jeffreys-cat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Jibing-Li</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@JNSimba</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Kikyou1997</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Lchangliang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@LemonLiTree</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@lexoning</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@liaoxin01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@lide-reed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@link3280</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@liutang123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@liuyaolin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@LOVEGISER</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@lsy3993</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@luozenglin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@luzhijing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@madongz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@morningman</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@morningman-cmy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@morrySnow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@mrhhsg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Myasuka</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@myfjdthink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@nextdreamblue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@pan3793</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@pangzhili</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@pengxiangyu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@platoneko</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@qidaye</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@qzsee</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SaintBacchus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SeekingYang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@smallhibiscus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@sohardforaname</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@song7788q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@spaces-X</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ssusieee</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@stalary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@starocean999</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SWJTU-ZhangLei</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@TaoZex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@timelxy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Wahno</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wangbo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wangshuo128</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wangyf0555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@weizhengte</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@weizuo93</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wsjz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wunan1210</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xhmz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xiaokang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xiaokangguo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xinyiZzz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xy720</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yangzhg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Yankee24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yeyudefeng</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yiguolei</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yinzhijian</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yixiutt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yuanyuan8983</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zbtzbtzbt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zenoyang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhangboya1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhangstar333</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhannngchen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ZHbamboo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhengshiJ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhenhb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhqu1148980644</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zuochunwei</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zy-kkk</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 在京东搜索实时 OLAP 探索与实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/JD_OLAP</id>
        <link href="https://doris.apache.org/zh-CN/blog/JD_OLAP"/>
        <updated>2022-12-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>京东搜索实时 OLAP 探索与实践</h1><p><img loading="lazy" alt="kv" src="https://cdnd.selectdb.com/zh-CN/assets/images/kv-e94fd46c1522a3383d161daec2249d18.png" width="900" height="383" class="img_ev3q"></p><blockquote><p>前言
本文讨论了京东搜索在实时流量数据分析方面，利用Apache Flink和Apache Doris进行的探索和实践。流式计算在近些年的热度与日俱增：从Google Dataflow论文的发表，到Apache Flink计算引擎逐渐站到舞台中央，再到Apache Druid等实时分析型数据库的广泛应用，流式计算引擎百花齐放。但不同的业务场景，面临着不同的问题，没有哪一种引擎是万能的。我们希望京东搜索业务在流计算的应用实践，能够给到大家一些启发，也欢迎大家多多交流，给我们提出宝贵的建议。</p></blockquote><blockquote><p>作者：李哲，京东搜推数据开发工程师，曾就职于美团点评，主要从事离线数据开发、流计算开发以及OLAP多维查询引擎的应用开发。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="京东与京东搜索">京东与京东搜索<a href="#京东与京东搜索" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>京东集团（NASDAQ：JD）中国领先的电商企业，2021年全年净收入达到9516亿元人民币。京东集团旗下设有京东零售、京东国际、京东科技、京东物流、京东云等。 京东集团于2014年5月在美国纳斯达克证券交易所正式挂牌上市。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="搜索业务对实时数据分析的需求">搜索业务对实时数据分析的需求<a href="#搜索业务对实时数据分析的需求" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>京东搜索作为电商平台的入口，为众多商家与用户提供连接的纽带。京东搜索发挥着导流的作用，给用户提供表达需求的入口；为了正确理解用户意图，将用户的需求进行高效的转化，线上同时运行着多个AB实验算法，遍及POP形态与自营形态的多个商品。而这些商品所属的品类、所在的组织架构以及品牌店铺等属性，都需要在线进行监控，以衡量转化的效果和承接的能力。目前搜索上层应用业务对实时数据的需求，主要包含三部分内容：
1、 搜索整体数据的实时分析。
2、 AB实验效果的实时监控。
3、 热搜词的Top榜单以反映舆情的变化。
这三部分数据需求，都需要进行深度的下钻，维度细化需要到SKU粒度。同时我们也承担着搜索实时数据平台的建设任务，为下游用户输出不同层次的实时流数据。
我们的用户包括搜索的运营、产品、算法以及采销人员。虽然不同用户关心的数据粒度不同、时间频率不同、维度也不同，但是我们希望能够建立统一的实时OLAP数据仓库，并提供一套安全、可靠的、灵活的实时数据服务。
目前每日新增的曝光日志达到几亿条记录，而拆分到SKU粒度的日志则要翻10倍，再细拆到AB实验的SKU粒度时，数据量则多达上百亿记录，多维数据组合下的聚合查询要求秒级响应时间，这样的数据量也给团队带来了不小的挑战。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实时技术架构演进">实时技术架构演进<a href="#实时技术架构演进" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>我们之前的方案是以Apache Storm引擎进行点对点的数据处理，这种方式在业务需求快速增长的阶段，可以快速的满足实时报表的需求。但是随着业务的不断发展、数据量逐渐增加以及需求逐渐多样化，弊端随之产生。例如灵活性差、数据一致性无法满足、开发效率较低、资源成本增加等。</p><p><img loading="lazy" alt="page_2-zh" src="https://cdnd.selectdb.com/zh-CN/assets/images/page_2-zh-3261d16224daf63c18e91b2644108848.png" width="1684" height="801" class="img_ev3q"></p><p>为解决之前架构出现的问题，我们首先进行了架构升级，将storm引擎替换为Apache Flink，用以实现高吞吐、exactly once的处理语义。同时根据搜索数据的特点，将实时数据进行分层处理，构建出PV流明细层、SKU流明细层和AB实验流明细层，期望基于不同明细层的实时流，构建上层的实时OLAP层。
OLAP层的在技术选型时，需要满足以下几点：
1：数据延迟在分钟级，查询响应时间在秒级
2：标准SQL交互引擎，降低使用成本
3：支持join操作，方便以维度级别增加属性信息
4：流量数据可以近似去重，但订单行要精准去重
5：高吞吐，每分钟数据量在千万级记录，每天数百亿条新增记录
6：前端业务较多，查询并发度不能太低
通过对比目前业界广泛使用的支持实时导入的OLAP引擎，我们在druid、ES、clickhouse和doris之间做了横向比较：</p><p><img loading="lazy" alt="page_3-zh" src="https://cdnd.selectdb.com/zh-CN/assets/images/page_3-zh-bb25c0ea2faa03912dea231b8b207d3e.png" width="2315" height="758" class="img_ev3q"></p><p>通过对比开源的几款实时OLAP引擎，我们发现doris和clickhouse能够满足我们的需求，但是clickhouse的并发度太低是个潜在的风险，而且clickhouse的数据导入没有事务支持，无法实现exactly once语义，对标准sql的支持也是有限的。
最终，我们选定doris作为聚合层，用于实时OLAP分析。对于流量数据，使用聚合模型建表；对于订单行，我们使用Uniq模型，保证同一个订单最终只会存储一条记录，从而达到订单行精准去重的目的。在flink处理时，我们也将之前的任务拆解，将反复加工的逻辑封装，每一次处理都生成新的topic流，明细层细分了不同粒度的实时流。新方案如下：</p><p><img loading="lazy" alt="page_4-zh" src="https://cdnd.selectdb.com/zh-CN/assets/images/page_4-zh-87f0c1b0fea8992d98b23ad9a02b3d1e.png" width="3004" height="1571" class="img_ev3q"></p><p>目前的技术架构中，flink的任务是非常轻的。基于生产的数据明细层，我们直接使用了doris来充当聚合层的功能，将原本可以在flink中实现的窗口计算，下沉到doris中完成。利用doris的routine load消费实时数据，虽然数据在导入前是明细粒度，但是基于聚合模型，导入后自动进行异步聚合。而聚合度的高低，完全根据维度的个数与维度的基数决定。通过在base表上建立rollup，在导入时双写或多写并进行预聚合操作，这有点类似于物化视图的功能，可以将数据进行高度的汇总，以提升查询性能。
在明细层采用kafka直接对接到doris，还有一个好处就是这种方式天然的支持数据回溯。数据回溯简单说就是当遇到实时数据的乱序问题时，可以将“迟到”的数据进行重新计算，更新之前的结果。这是因为我们导入的是明细数据，延迟的数据无论何时到达都可以被写入到表中，而查询接口只需要再次进行查询即可获得最新的计算结果。最终方案的数据流图如下：</p><p><img loading="lazy" alt="page_5-zh" src="https://cdnd.selectdb.com/zh-CN/assets/images/page_5-zh-248c2ca88f12afd922abf431162b289c.png" width="1137" height="729" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="doris在大促期间的优化">Doris在大促期间的优化<a href="#doris在大促期间的优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>上文提到我们在doris中建立了不同粒度的聚合模型，包括PV粒度、SKU粒度以及AB实验粒度。我们这里以每日生产数据量最大的曝光AB实验模型为例，阐述在doris中如何支持大促期间每日新增百亿条记录的查询的。
AB实验的效果监控，业务上需要10分钟、30分钟、60分钟以及全天累计等四个时间段，同时需要根据渠道、平台和一二三级品类等维度进行下钻分析，观测的指标则包含曝光PV、UV、曝光SKU件次、点击PV、点击UV等基础指标，以及CTR等衍生指标。
在数据建模阶段，我们将曝光实时数据建立聚合模型，其中K空间包含日期字段、分钟粒度的时间字段、渠道、平台、一二三级品类等，V空间则包含上述的指标列，其中UV和PV进行HLL近似计算，而SKU件次则采用SUM函数，每到来一条新记录则加1。由于AB实验数据都是以AB实验位作为过滤条件，因此将实验位字段设置为分桶字段，查询时能够快速定位tablet分片。值得注意的是，HLL的近似度在目前PV和UV的基数下，实际情况误差在0.8%左右，符合预期。
目前doris的集群共30+台BE，存储采用的是支持NVMe协议的SSD硬盘。AB实验曝光topic的分区数为40+，每日新增百亿条数据。在数据导入阶段，我们主要针对导入任务的三个参数进行优化：最大时间间隔、最大数据量以及最大记录数。当这3个指标中任何一个达到设置的阈值时，任务都会触发导入操作。为了更好的了解任务每次触发的条件，达到10分钟消费6亿条记录的压测目标，我们通过间隔采样的方法，每隔3分钟采样一次任务的情况，获取Statistic信息中的receivedBytes、cimmittedTaskNum、loadedRows以及taskExecuteTimeMs数值。通过对上述数值在前后2个时间段的差值计算，确定每个任务触发的条件，并调整参数，以在吞吐和延迟之间进行平衡，最终达到压测的要求。
为了实现快速的多维数据查询，基于base表建立了不同的rollup，同时每个rollup的字段顺序，也要遵循过滤的字段尽可能放到前面的原则，充分利用前缀索引的特性。这里并不是rollup越多越好，因为每个rollup都会有相应的物理存储，每增加一个rollup，在写入时就会增加一份IO。最终我们在此表上建立了2个rollup，在要求的响应时间内尽可能多的满足查询需求。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结与展望">总结与展望<a href="#总结与展望" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>京东搜索是在2020年5月份引入doris的，规模是30+台BE，线上同时运行着10+个routine load任务，每日新增数据条数在200亿+，已经成为京东体量最大的doris用户。从结果看，用doris替换flink的窗口计算，既可以提高开发效率，适应维度的变化，同时也可以降低计算资源，用doris充当实时数据仓库的聚合层，并提供统一的接口服务，保证了数据的一致性和安全性。
我们在使用中也遇到了查询相关的、任务调度相关的bug，也在推动京东OLAP平台升级到最新版本。接下来待版本升级后，我们计划使用bitmap功能来支持UV等指标的精准去重操作，并将推荐实时业务应用doris实现。除此之外，为了完善实时数仓的分层结构，为更多业务提供数据输入，我们也计划使用适当的flink窗口开发聚合层的实时流，增加数据的丰富度和完整度。</p>]]></content>
        <author>
            <name>李哲</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 助力网易严选打造精细化运营 DMP 标签系统]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Netease</id>
        <link href="https://doris.apache.org/zh-CN/blog/Netease"/>
        <updated>2022-11-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>应用实践｜Apache Doris 助力网易严选打造精细化运营 DMP 标签系统</h1><p><img loading="lazy" alt="1280X1280" src="https://cdnd.selectdb.com/zh-CN/assets/images/kv-a63c2e8908df91d10704f971aa636fa6.png" width="900" height="383" class="img_ev3q"></p><p><strong>导读</strong>:如果说互联网的上半场是粗狂运营，那么在下半场，精细化运营将是长久的主题，有数据分析能力才能让用户得到更好的体验。当下比较典型的分析方式是构建用户标签系统，本文将由网易严选分享 DMP 标签系统的建设以及 Apache Doris 在其中的应用实践。</p><p>作者<strong>｜</strong>刘晓东 网易严选资深开发工程师</p><p>如果说互联网的上半场是粗狂运营，因为有流量红利不需要考虑细节。那么在下半场，精细化运营将是长久的主题，有数据分析能力才能让用户得到更好的体验。当下比较典型的分析方式是构建用户标签系统，从而精准地生成用户画像，提升用户体验。今天分享的主题是网易严选 DMP 标签系统建设实践，<strong>主要围绕下面五点展开：</strong></p><ul><li>平台总览</li><li>标签生产 ：标签圈选&amp;生产链路</li><li>标签存储：存储方式&amp;存储架构演进</li><li>高性能查询</li><li>未来规划</li></ul><h1>平台总览</h1><p>DMP 作为网易严选的数据中台，向下连接数据，向上赋能业务，承担着非常重要的基石角色。</p><p><strong>DMP 的数据来源主要包括三大部分：</strong></p><ul><li>自营平台的 APP、小程序、PC 端等各端的业务日志</li><li>网易集团内部共建的一些基础数据</li><li>京东、淘宝、抖音等第三方渠道店铺的数据</li></ul><p>通过收集、清洗，将以上数据形成数据资产沉淀下来。DMP 在数据资产基础上形成了一套自己的标签产出、人群圈选和用户画像分析体系，从而为业务提供支撑，包括：智能化的选品、精准触达以及用户洞察等。总的来说，<strong>DMP 系统就是构建以数据为核心的标签体系和画像体系，从而辅助业务做一系列精细化的运营。</strong></p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/c4/c4213e903762cfadc42e038e5de71d1a.png" alt="img" class="img_ev3q"></p><p>了解 DMP 系统，先从以下几个概念开始。</p><ul><li><strong>标签</strong>: 对于实体（用户、设备、手机号等）特征的描述，是一种面向业务的数据组织形式，比如使用：年龄段、地址、偏好类目等对用户实体进行刻画。</li><li><strong>人群圈选</strong>: 通过条件组合从全体用户中圈选出一部分用户，具体就是指定一组用户标签和其对应的标签值，得到符合条件的用户人群。</li><li><strong>画像分析</strong>: 对于人群圈选结果，查看该人群的行为情况、标签分布。例如查看【城市为杭州，且性别为女性】的用户在严选 APP 上的行为路径、消费模型等。</li></ul><p><img loading="lazy" src="https://static001.geekbang.org/infoq/77/7727372da8b4d2e591a2563bd061425d.png" alt="img" class="img_ev3q"></p><p>严选标签系统对外主要提供两大核心能力：</p><ol><li><p>标签查询：查询特定实体指定标签的能力，常用于基本信息的展示。</p></li><li><p>人群圈选：分为实时和离线圈选。<strong>圈选结果主要用于：</strong></p></li></ol><ul><li>分组判断：判读用户是否在指定的一个或多个分组，资源投放、触点营销等场景使用较多。</li><li>结果集拉取：拉取指定的人群数据到业务方系统中，进行定制化开发。</li><li>画像分析：分析特定人群的行为数据，消费模型等，进行更精细的运营。</li></ul><p><strong>整体的业务流程如下：</strong></p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/fe/fe5591eaeb384e52cad6c3940ffa8ff2.png" alt="img" class="img_ev3q"></p><ul><li>首先定义标签和人群圈选的规则；</li><li>定义出描述业务的 DSL 之后，便可以将任务提交到 Spark 进行计算；</li><li>计算完成之后，<strong>将计算结果存储到 Hive 和 Doris</strong>；</li><li>之后业务方便可以根据实际业务需求<strong>从 Hive 或</strong> <strong>Doris</strong> <strong>中查询使用数据</strong>。</li></ul><p><img loading="lazy" src="https://static001.geekbang.org/infoq/1a/1ad0a3fa4efc6cc4dee9603a7c0f73aa.png" alt="img" class="img_ev3q"></p><p><strong>DMP 平台整体分为计算存储层、调度层、服务层、和元数据管理四大模块。</strong></p><p>所有的标签元信息存储在源数据表中；调度层对业务的整个流程进行任务调度：数据处理、聚合转化为基础标签，基础标签和源表中的数据通过 DSL 规则转化为可用于数据查询的 SQL 语义，由调度层将任务调度到计算存储层的 Spark 进行计算，<strong>并将计算结果存储到 Hive 和 Doris 中。</strong>服务层由标签服务、实体分组服务、基础标签数据服务、画像分析服务四部分组成。</p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/f8/f8bfd13ee1135cfad025022a2e48ae2a.png" alt="img" class="img_ev3q"></p><p><strong>标签的生命周期包含5个阶段：</strong></p><ul><li><strong>标签需求</strong>: 在此阶段，运营提出标签的需求和价值预期，产品评估需求合理性以及紧迫性。</li><li><strong>排期生产</strong>: 此阶段需要数据开发梳理数据，从 ods 到 dwd 到 dm 层整个链路，根据数据建立模型，同时数据开发需要做好质量监控。 </li><li><strong>人群圈选</strong>: 标签生产出来之后进行应用，圈选出标签对应的人群。</li><li><strong>精准营销</strong>: 对圈选出来的人群进行精准化营销。</li><li><strong>效果评估</strong>: 最后产品、数据开发和运营对标签使用率、使用效果进行效果评估来决定后续对标签进行改进或降级。</li></ul><p>总的来说，就是以业务增长为目标，围绕标签的生命周期，投入合理的资源，最大化运营效果。</p><h1>标签生产</h1><p><strong>接下来介绍标签生产的整个过程。</strong></p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/c5/c50e3d5747bf300b9ffb708b0a7c8cb8.png" alt="img" class="img_ev3q"></p><p><strong>标签的数据分层：</strong></p><ul><li>最下层是 ods 层，包括用户登录日志、埋点记录日志、交易数据以及各种数据库的 Binlog 数据。</li><li>对 ods 层处理后的数据到达 dwd 明细层，包括用户登录表、用户活动表、订单信息表等。</li><li>dwd 层数据聚合后到 dm 层，标签全部基于 dm 层数据实现。</li></ul><p>目前我们从原始数据库到 ods 层数据产出已经完全自动化，从 ods 层到 dwd 层实现了部分自动化，从 dwd 到 dm 层有一部分自动化操作，但自动化程度还不高，这部分的自动化操作是我们接下来的工作重点。</p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/00/007eea83ec5ab995bf6ed52b9720508f.png" alt="img" class="img_ev3q"></p><p><strong>标签根据时效性分为</strong>：离线标签、近实时标签和实时标签。</p><p><strong>根据聚合粒度分为</strong>：聚合标签和明细标签。</p><p>通过类别维度可将标签分为：账号属性标签、消费行为标签、活跃行为标签、用户偏好标签、资产信息标签等。</p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/45/450809e28afcf4bf76f3ad6f0eb89415.png" alt="img" class="img_ev3q"></p><p><strong>直接将 dm 层的数据不太方便拿来用，原因在于：</strong></p><p>基础数据比较原始，抽象层次有所欠缺、使用相对繁琐。通过对基础数据进行与、或、非的组合，形成业务标签供业务方使用，可以降低运营的理解成本，降低使用难度。</p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/45/4551dbb64f0412ab305028ef42ebb730.png" alt="img" class="img_ev3q"></p><p>标签组合之后需要对标签进行具体业务场景应用，如人群圈选。配置如上图左侧所示，支持离线人群包和实时行为（需要分开配置）。</p><p>配置完后，生成上图右侧所示的 DSL 规则，以 Json 格式表达，对前端比较友好，也可以转成存储引擎的查询语句。</p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/68/686c29c2c6929e626d0707efe8e40d1a.png" alt="img" class="img_ev3q"></p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/c5/c58e6ea678716a50d60df23144247833.png" alt="img" class="img_ev3q"></p><p>标签有一部分实现了自动化。在人群圈选部分自动化程度比较高。比如分组刷新，每天定时刷新；高级计算，如分组与分组间的交/并/差集；数据清理，及时清理过期失效的实体集。</p><h1>标签存储</h1><p><strong>下面介绍一下我们在标签存储方面的实践。</strong></p><p>严选 DMP 标签系统需要承载比较大的 C端流量，对实时性要求也比较高。</p><p>我们对存储的要求包括：</p><ul><li>支持高性能查询，以应对大规模 C端流量</li><li>支持 SQL，便于应对数据分析场景</li><li>支持数据更新机制</li><li>可存储大数据量</li><li>支持扩展函数，以便处理自定义数据结构</li><li>和大数据生态结合紧密</li></ul><p>目前还没有一款存储能够完全满足要求。</p><p><strong>我们第一版的存储架构如下图所示：</strong></p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/8c/8cc165d0cc9a119540f72b642f63172e.png" alt="img" class="img_ev3q"></p><p>离线数据大部分存储在 Hive 中，小部分存储在 Hbase（主要用于基础标签的查询）。实时数据一部分存储在 Hbase 中用于基础标签的查询，部分双写到 KUDU 和 ES 中，用于实时分组圈选和数据查询。离线圈选的数据通过 impala 计算出来缓存在 Redis 中。</p><p><strong>这一版本的缺点包括：</strong></p><ul><li>存储引擎过多。</li><li>双写有数据质量隐患，可能一方成功一方失败，导致数据不一致。</li><li>项目复杂，可维护性较差。</li></ul><p>为了减少引擎和存储的使用量，提高项目可维护性，在版本一的基础上改进实现了版本二。</p><p><strong>我们第二版的存储架构如下图所示：</strong></p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/dd/dd013f1d6d64cb258edfcd1fd9e826c5.png" alt="img" class="img_ev3q"></p><p><strong>存储架构版本二引入了 Apache Doris</strong>，离线数据主要存储在 Hive 中，同时将基础标签导入到 Doris，实时数据也存储在 Doris，基于 Spark 做 Hive 加 Doris 的联合查询，并将计算出来的结果存储在 Redis 中。经过此版改进后，实时离线引擎存储得到了统一，性能损失在可容忍范围内（Hbase 的查询性能比 Doris 好一些，能控制在 10ms 以内，Doris 目前是 1.0 版本，p99，查询性能能控制在 20ms 以内，p999，能控制在 50ms 以内）；<strong>项目简化，降低了运维成本。</strong></p><p><strong>在大数据领域，各种存储计算引擎有各自的适用场景，如下表所示：</strong></p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/71/71be41d6c04b28ae16b11db0796719f0.png" alt="img" class="img_ev3q"></p><h1>高性能查询</h1><p><img loading="lazy" src="https://static001.geekbang.org/infoq/23/23f6cb52a12b10335f07a6e57e4b207c.png" alt="img" class="img_ev3q"></p><p>分组存在性判断：判断用户是否在指定的一个分组或者多个分组。包括两大部分：</p><ul><li>第一部分为静态人群包，提前进行预计算，存入 Redis 中（Key 为实体的 ID，Value 为结果集 ID），采用 Lua 脚本进行批量判断，提升性能；</li><li>第二部分为实时行为人群，需要从上下文、API 和 Apache Doris 中提取数据进行规则判断。性能提升方案包括，异步化查询、快速短路、查询语句优化、控制 Join表数量等。</li></ul><p><img loading="lazy" src="https://static001.geekbang.org/infoq/c8/c8e6312891a1e4a3255debbebdd53f5a.png" alt="img" class="img_ev3q"></p><p>还有一个场景是人群分析：人群分析需要将人群包数据同多个表进行联合查询，分析行为路径。目前 Doris 还不支持路径分析函数，因此我们开发了 DorisUDF 来支持此业务。<strong>Doris 的计算模型对自定义函数的开发还是很友好的，能够比较好地满足我们的性能需要。</strong></p><p><img loading="lazy" src="https://static001.geekbang.org/infoq/12/123ca7535e6fb03b1337060f20d2fe6d.png" alt="img" class="img_ev3q"></p><p><strong>Apache Doris 在网易严选中已应用于点查、批量查询、路径分析、人群圈选等场景。在实践中具备以下优势：</strong></p><ul><li>在点查和少量表的联合查询性能 QPS 超过万级，RT99&lt;50MS。</li><li>水平扩展能力很强，运维成本相对比较低。</li><li>离线数据和实时数据相统一，降低标签模型复杂度。</li></ul><p>不足之处在于大量小数据量的导入任务资源占用较多，待 Doris 1.1.2 版本正式发布后我们也会及时同步升级。不过此问题已经在 Doris 1.1 版本中进行了优化，<strong>Doris 在 1.1 中大幅增强了数据 Compaction 能力，对于新增数据能够快速完成聚合，避免分片数据中的版本过多导致的 -235 错误以及带来的查询效率问题。</strong></p><p><strong>具体可以参考：</strong><a href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==&amp;mid=2247500848&amp;idx=1&amp;sn=a667665ed4ccf4cf807a47be7c264f69&amp;chksm=cf2fca37f85843219e2f74d856478d4aa24d381c1d6e7f9f6a64b65f3344ce8451ad91c5af97&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">Apache Doris 1.1 特性揭秘：Flink 实时写入如何兼顾高吞吐和低延时</a></p><h1>未来规划</h1><p><img loading="lazy" src="https://static001.geekbang.org/infoq/1c/1c9088b38860dddf5f794a71a2b62023.png" alt="img" class="img_ev3q"></p><p><strong>提升存储&amp;计算性能</strong>: Hive 和 Spark 逐渐全部转向 Apache Doris。</p><p><strong>优化标签体系：</strong></p><ul><li>建立丰富准确的标签评价体系</li><li>提升标签质量和产出速度</li><li>提升标签覆盖率</li></ul><p><strong>更精准的运营</strong></p><ul><li>建立丰富的用户分析模型</li><li>从使用频次和用户价值两个方面提升用户洞察模型评价体系</li><li>建立通用化画像分析能力，辅助运营智能化决策</li></ul><h1>资料下载</h1><p>关注公众号「<strong>SelectDB</strong>」，后台回复【<strong>网易严选</strong>】获取本次演讲 <strong>PPT 资料</strong>！</p><p><strong>相关链接：</strong></p><p>Apache Doris 官方网站：</p><p><a href="http://doris.apache.org" target="_blank" rel="noopener noreferrer">http://doris.apache.org</a></p><p>Apache Doris Github：</p><p><a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris</a></p><p>Apache Doris 开发者邮件组：</p><p><a href="mailto:dev@doris.apache.org" target="_blank" rel="noopener noreferrer">dev@doris.apache.org</a></p>]]></content>
        <author>
            <name>刘晓东</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 在蔚来汽车的应用]]></title>
        <id>https://doris.apache.org/zh-CN/blog/NIO</id>
        <link href="https://doris.apache.org/zh-CN/blog/NIO"/>
        <updated>2022-11-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>Apache Doris 在蔚来汽车的应用</h1><p><img loading="lazy" alt="NIO" src="https://cdnd.selectdb.com/zh-CN/assets/images/NIO_kv-7601d71a49c7ecd7fb42f03de600ae6c.png" width="900" height="383" class="img_ev3q"></p><blockquote><p>导读：本次分享的题目是Apache Doris在蔚来汽车的应用，主要包括以下几大部分：</p><ol><li>蔚来</li><li>OLAP在蔚来的发展</li><li>Doris作为统一OLAP数仓</li><li>Doris在运营平台上的实践</li><li>经验总结</li></ol></blockquote><p>作者：唐怀东，蔚来汽车 数据团队负责人</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="蔚来">蔚来<a href="#蔚来" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>蔚来（纽约证券交易所代码：NIO）是设计高端智能电动汽车市场的领先公司。 NIO 成立于 2014 年 11 月，设计、开发、联合制造和销售高端智能电动汽车，并不断推动自动驾驶、数字技术、电动动力总成和电池领域的创新。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="olap在蔚来的发展">OLAP在蔚来的发展<a href="#olap在蔚来的发展" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>首先，让我们来一起回顾OLAP在蔚来汽车的发展。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-2017年引入apache-druid">1. 2017年引入Apache Druid<a href="#1-2017年引入apache-druid" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在当时可选择的OLAP存储和查询引擎并不多，比较常见的有Apache Druid、Apache Kylin。我们优先引入Druid的原因是以前有使用经验，而Kylin预计算虽然具有极高的查询效率优势，但是：</p><ul><li><p>Kylin底层最合适和最优的存储是HBase，之前公司并未引入，会额外增加运维的工作。</p></li><li><p>Kylin对各种维度和指标进行预计算，如果维度和维度取值非常多，会有维度爆炸的问题，对存储造成非常大的压力。</p></li></ul><p>Druid的优势很明显，支持实时和离线数据接入，列式存储，高并发，查询效率非常高。其缺点也比较明显：</p><ul><li>未使用标准协议例如JDBC，使用门槛高</li><li>Join的支持较弱</li><li>精确去重的效率低，性能会随之下降。整体性能要分场景去考虑，这也是我们后期去选型其他OLAP的原因</li><li>运维成本高，不同的组件有不同的安装方式和不同的依赖；数据导入还要考虑和Hadoop集成以及JAR包的依赖</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-2019年引入tidb">2. 2019年引入TiDB<a href="#2-2019年引入tidb" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><strong>TiDB是一个OLTP+OLAP的成熟引擎，同样是优点、缺点分明：</strong></p><p>优势：</p><ul><li>OLTP数据库，更新友好。</li><li>支持明细和聚合，有指标计算和数据看板展示，还支持明细数据查询</li><li>支持标准SQL，使用成本低</li><li>运维成本低</li></ul><p>劣势：</p><ul><li>它不是一个独立的OLAP。TiFlash依赖于OLTP，会增加存储。其OLAP能力稍显不足</li><li>整体性能要分场景去衡量</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-2021年引入doris">3. 2021年引入Doris<a href="#3-2021年引入doris" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>自2021年起，我们正式引入了Apache Doris。在系统选型过程中，产品的性能、SQL语法、系统兼容性、学习以及运维成本等多方面因素是我们最为关心的部分。经过深入调研、层层对比以下几个系统后，我们得出了如下结论：</p><p><strong>我们重点关注的Doris，其优点完全满足我们的诉求：</strong></p><ul><li>支持高并发查询（我们最关心的一点）</li><li>同时支持实时和离线数据</li><li>支持明细和聚合</li><li>Uniq模型支持更新</li><li>物化视图的能力能极大的加速查询效率</li><li>兼容MySQL协议，所以开发和使用成本比较低</li><li>性能完全满足我们的要求</li><li>运维成本比较低</li></ul><p><strong>Clickhouse，我们之前也调研过，也尝试想去使用它。其单机性能极强，但是缺点明显:</strong></p><ul><li>我们明确需要的场景下，它的多表join支持的稍微差一些</li><li>并发度比较低</li><li>运维成本极高</li></ul><p>凭借多种性能优势，Apache Doris比较理想地替代了Druid和TiDB。而Clickhouse在我们的业务上并不能很好的适配，让我们最终走向了Apache Doris。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="doris作为统一olap数仓">Doris作为统一OLAP数仓<a href="#doris作为统一olap数仓" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="NIO" src="https://cdnd.selectdb.com/zh-CN/assets/images/olap-96ad3bb86cebd92a200a0581f0418d3c.png" width="1018" height="669" class="img_ev3q"></p><p>这张图基本上就是从数据源到数据接入、数据计算、数据仓库、数据服务以及应用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-数据源">1. 数据源<a href="#1-数据源" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>蔚来的场景下，数据源不仅仅指业务系统的数据，还有埋点数据、设备数据、车辆数据等等。数据会通过一种接入方式接入到大数据平台。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-数据接入">2. 数据接入<a href="#2-数据接入" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>对于一些业务系统的数据，可以开启CDC捕捉变化的数据，然后转换成一个数据流存储到Kafka，接续再进行流式的计算。某些只能通过批量的方式的数据会直接进入到我们的分布式存储。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-数据计算">3. 数据计算<a href="#3-数据计算" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>我们没有采用流批一体，采用的是Lambda架构。
我们本身的业务决定了我们的Lambda架构是离线和实时分成了两条路径：</p><ul><li>部分数据是流式的。</li><li>部分数据能够存储到数据流里，一些历史数据不会存储到Kafka。</li><li>有些场景数据要求高精准度。为了保证数据的准确性，一个离线的pipeline将会把整个数据重新计算和刷新。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-数据仓库">4. 数据仓库<a href="#4-数据仓库" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>数据计算到数仓，这两条线路我们没有采用Flink或Spark Doris Connector。我们用Routine Load来连接Apache Doris和Flink，用Broker Load连接Doris和Spark。 由Spark批量生成的数据，会备份到Hive供其他场景使用。这样每计算一次，就同时供多个场景去使用，大大提升了效率。Flink的情况也诸如此类。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-数据服务">5. 数据服务<a href="#5-数据服务" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Doris后面是One Service。通过注册数据源或灵活配置的方式，自动生成API，对API进行流量的控制和权限的控制，灵活性大大提高。并借助于k8s serverless方案，整个服务非常灵活和丰富。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-数据应用">6. 数据应用<a href="#6-数据应用" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>应用层中我们主要是部署一些报表应用和其他的一些服务。</p><p>我们主要有两类使用场景：</p><ul><li>面向用户，类似于互联网，我们有很多用户的场景，包括看板和指标</li><li>面向车，车的数据通过这种方式进入到Doris，通过一定的聚合之后，Doris数据体量在几十亿级别。但总体性能仍然可以满足我们的要求。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="doris在运营平台上的实践">Doris在运营平台上的实践<a href="#doris在运营平台上的实践" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-cdp-architecture">1. CDP Architecture<a href="#1-cdp-architecture" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" alt="NIO" src="https://cdnd.selectdb.com/zh-CN/assets/images/cdp-3d65926e741a2837759b07514e914bbf.png" width="1471" height="422" class="img_ev3q"></p><p>接下来我来介绍Doris在运营平台上的实践。这是我们的真实使用场景。如今互联网公司普遍会做自己的CDP，它一般包括几个模块：</p><ul><li>标签，是最基础的部分。</li><li>圈人，基于标签，按照一定逻辑将人圈选出来。</li><li>洞察，针对圈定的人群，了解人群分布、特点。</li><li>触达，利用例如短信、电话、声音、APP通知、IM等方式触达到用户，并配合流量控制。</li><li>效果分析，提升运营平台的完整性，有动作、有效果、有反馈。</li></ul><p>Doris在这里面起到了最重要的作用，包括：标签存储、人群存储、效果分析。
标签分为基础标签和用户行为的基础数据，在此基础之上，我们可以灵活自定义其他标签。从实效性来看，标签还分为实时的标签和离线的标签。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-cdp存储选型的考量点">2. CDP存储选型的考量点<a href="#2-cdp存储选型的考量点" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>我们从5个维度去考量CDP存储的选型。</p><p>**(1) 离线和实时统一
如前所述标签有离线标签，有实时标签。目前我们是准实时的场景。对于有些数据，准实时已足够满足我们的需求，大量的标签还是离线的标签，采用的方式就是Doris的Routine Load和Broker Load。</p><table><thead><tr><th><strong>场景</strong></th><th><strong>需求</strong></th><th><strong>Apache Doris功能点</strong></th></tr></thead><tbody><tr><td>实时标签</td><td>数据实时更新</td><td>Routine Load</td></tr><tr><td>离线标签</td><td>高效大批量导入</td><td>Broker Load</td></tr><tr><td>流批统一</td><td>实时历险数据存储统一</td><td>Routine Load 和 Broker Load 更新同一张表的不同列</td></tr></tbody></table><p>另外同一张表上，不同列更新的频率也是不一样的。例如用户的基础标签，我们对用户的身份需要实时的更新，因为用户的身份是时刻变化的。T+1的更新不能满足我们的需求。有些标签离线，例如用户的性别、年龄等基础标签，T+1更新足以满足我们的标准。基础用户的原子标签放在一张表中带来的维护成本很低。当后期自定义标签时，表的数量会大大减少，这样对于整体性能的提升有极大好处。</p><p><strong>(2) 高效圈选</strong></p><p>用户运营有了标签，第二步就是圈人，圈选就是根据标签的不同组合，把符合标签条件的所有人筛选出来，这时会有不同标签条件组合的查询、这个查询在Doris引入向量化之后有比较明显的提升。</p><table><thead><tr><th><strong>场景</strong></th><th><strong>需求</strong></th><th><strong>Apache Doris功能点</strong></th></tr></thead><tbody><tr><td>复杂条件圈选</td><td>高效的支持多条件圈选</td><td>SIMD的优化</td></tr></tbody></table><p><strong>(3) 高效聚合</strong></p><p>前面提到的用户洞察或群体洞察以及效果分析统计，需要对数据做统计分析，并不是单一的按用户ID获取标签的这种简单场景。其读取的数据量和查询效率，对我们这个标签的分布、群体的分布、效果分析的统计都有很大的影响。在这里，体现到的Doris的功能特点是：</p><ul><li>第一是数据分片，我们按时间把数据分片，分析统计就会极大的减少数据量，可以极大的加速查询和分析的效率。</li><li>第二是节点聚合，然后再收集做统一的聚合。</li><li>第三是向量化加速，向量化引擎对性能提升非常显著。</li></ul><table><thead><tr><th><strong>场景</strong></th><th><strong>需求</strong></th><th><strong>Apache Doris功能点</strong></th></tr></thead><tbody><tr><td>标签值的分布</td><td>每天都需要更新所有标签，需要快速高效统计</td><td>数据分片，减少数据传输和计算</td></tr><tr><td>群体的分布</td><td>同上</td><td>存算统一，每个节点先聚合</td></tr><tr><td>效果分析的统计值</td><td>同上</td><td>SIMD提速</td></tr></tbody></table><p><strong>(4) 多表关联</strong></p><p>我们的CDP可能和业内常见的CDP场景不太一样，因为有些场景的CDP标签是提前预估完成的，不存在自定义标签。只做原子标签，或者说用户基础行为数据的统计，这样可以把灵活性留给使用CDP的用户，根据自己的业务场景去自定义标签。底层的数据是分散在不同的数据库表里，如果做自定义的标签的建设，势必需要做表的关联。
我们选择Doris一个非常重要的原因，就是多表关联的能力。通过性能测试，Doris目前能够满足我们的要求。而且Doris为用户提供了非常强大的能力。因为标签是动态的。</p><table><thead><tr><th><strong>场景</strong></th><th><strong>需求</strong></th><th><strong>Apache Doris功能点</strong></th></tr></thead><tbody><tr><td>群体的特征分布</td><td>统计群体在某个特征下的分布</td><td>多表关联</td></tr><tr><td>Single Tag</td><td>Display tags</td><td></td></tr></tbody></table><p><strong>(5) 联邦查询</strong></p><p>用户触达成功与否我们会记录到TiDB。用户运营中的通知，可能只影响用户体验，如果涉及到钱例如发放积分或优惠券，任务执行就要做到不重不漏，这种OLTP场景用TiDB比较合适。
做效果分析，需要了解运营计划执行到什么程度，是否达成目标，其分布情况等等。需要把任务执行情况和人群圈选相结合才能进行分析，就会用到Doris和TiDB的关联，外表关联进行查询。
我们设想标签体量比较小，保存到es可能比较合适，然而ES不能满足我们的需求，后面会解释其原因。</p><table><thead><tr><th><strong>场景</strong></th><th><strong>需求</strong></th><th><strong>Apache Doris功能点</strong></th></tr></thead><tbody><tr><td>效果分析关联任务执行明细</td><td>Doris数据关联TiDB数据</td><td>关联外表进行查询</td></tr><tr><td>人群标签关联行为聚合数据</td><td>Doris数据关联Elasticsearch数据</td><td></td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="经验和总结">经验和总结<a href="#经验和总结" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ol><li><p><strong>bitmap</strong>. 我们的体量无法充分发挥其效率。如果体量达到一定程度，用bitmap会有很好的性能提升。例如计算UV场景，Id全集大于5000万，可以考虑bitmap聚合。</p></li><li><p><strong>ES外表。单表查询下效率比较理想。</strong> </p></li><li><p><strong>分批更新列</strong>. 为了减少表的数量和提升join表的性能，设计表尽量精简尽量聚合，相同类型的事实都放在一起。但相同类型的字段可能更新频率不同，有些字段需要天级更新，有些字段可能需要小时级更新，单独更新某一列就是一个明显的诉求。Doris聚合模型单独更新某些列的解决方案是使用REPLACE_IF_NOT_NULL。注意:用null替换原来的非null值是做不到的,可以把所有的null替换成有意义的默认值，例如unknown。</p></li><li><p><strong>在线服务</strong>. Doris同一份数据同时服务在线离线场景，对资源隔离的要求比较高，目前还存在进一步优化的空间。</p></li></ol>]]></content>
        <author>
            <name>唐怀东</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 1.2 Star-Schema-Benchmark 性能测试报告]]></title>
        <id>https://doris.apache.org/zh-CN/blog/ssb</id>
        <link href="https://doris.apache.org/zh-CN/blog/ssb"/>
        <updated>2022-11-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>Star Schema Benchmark</h1><p><a href="https://www.cs.umb.edu/~poneil/StarSchemaB.PDF" target="_blank" rel="noopener noreferrer">Star Schema Benchmark(SSB)</a> 是一个轻量级的数仓场景下的性能测试集。SSB 基于 <a href="http://www.tpc.org/tpch/" target="_blank" rel="noopener noreferrer">TPC-H</a> 提供了一个简化版的星型模型数据集，主要用于测试在星型模型下，多表关联查询的性能表现。另外，业界内通常也会将 SSB 打平为宽表模型（以下简称：SSB flat），来测试查询引擎的性能，参考<a href="https://clickhouse.com/docs/zh/getting-started/example-datasets/star-schema" target="_blank" rel="noopener noreferrer">Clickhouse</a>。</p><p>本文档主要介绍Apache Doris 在 SSB 100G 测试集上的性能表现。</p><blockquote><p>注 1：包括 SSB 在内的标准测试集通常和实际业务场景差距较大，并且部分测试会针对测试集进行参数调优。所以标准测试集的测试结果仅能反映数据库在特定场景下的性能表现。建议用户使用实际业务数据进行进一步的测试。</p><p>注 2：本文档涉及的操作都在 Ubuntu Server 20.04 环境进行，CentOS 7 也可测试。</p></blockquote><p>在 SSB 标准测试数据集上的 13 个查询上，我们基于 Apache Doris 1.2.0-rc01， Apache Doris 1.1.3 及 Apache Doris 0.15.0 RC04 版本进行了对别测试。</p><p>在 SSB FlAT 宽表上， Apache Doris 1.2.0-rc01上相对 Apache Doris 1.1.3 整体性能提升了将近4倍，相对于 Apache Doris 0.15.0 RC04 ,性能提升了将近10倍 。</p><p><img loading="lazy" alt="ssb_v11_v015_compare" src="https://cdnd.selectdb.com/zh-CN/assets/images/ssb_flat-a8cfebbc53e6f2db116876e3d53e19c7.png" width="1522" height="674" class="img_ev3q"></p><p>在标准的 SSB 测试SQL上， Apache Doris 1.2.0-rc01 上相对 Apache Doris 1.1.3 整体性能提升了将近2倍，相对于 Apache Doris 0.15.0 RC04 ,性能提升了将近 31 倍 。</p><p><img loading="lazy" alt="ssb_12_11_015" src="https://cdnd.selectdb.com/zh-CN/assets/images/ssb-6f7fc8825356019f61622f6fcb9fa1d0.png" width="1354" height="728" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-硬件环境">1. 硬件环境<a href="#1-硬件环境" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><table><thead><tr><th>机器数量</th><th>4 台腾讯云主机（1个FE，3个BE）</th></tr></thead><tbody><tr><td>CPU</td><td>AMD EPYC™ Milan(2.55GHz/3.5GHz) 16核</td></tr><tr><td>内存</td><td>64G</td></tr><tr><td>网络带宽</td><td>7Gbps</td></tr><tr><td>磁盘</td><td>高性能云硬盘</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-软件环境">2. 软件环境<a href="#2-软件环境" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ul><li>Doris 部署 3BE 1FE；</li><li>内核版本：Linux version 5.4.0-96-generic (buildd@lgw01-amd64-051)</li><li>操作系统版本：Ubuntu Server 20.04 LTS 64位</li><li>Doris 软件版本： Apache Doris 1.2.0-rc01、Apache Doris 1.1.3 及 Apache Doris 0.15.0 RC04</li><li>JDK：openjdk version "11.0.14" 2022-01-18</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-测试数据量">3. 测试数据量<a href="#3-测试数据量" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><table><thead><tr><th align="left">SSB表名</th><th align="left">行数</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">lineorder</td><td align="left">600,037,902</td><td align="left">商品订单明细表表</td></tr><tr><td align="left">customer</td><td align="left">3,000,000</td><td align="left">客户信息表</td></tr><tr><td align="left">part</td><td align="left">1,400,000</td><td align="left">零件信息表</td></tr><tr><td align="left">supplier</td><td align="left">200,000</td><td align="left">供应商信息表</td></tr><tr><td align="left">date</td><td align="left">2,556</td><td align="left">日期表</td></tr><tr><td align="left">lineorder_flat</td><td align="left">600,037,902</td><td align="left">数据展平后的宽表</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-ssb-宽表测试结果">4. SSB 宽表测试结果<a href="#4-ssb-宽表测试结果" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>这里我们使用 Apache Doris 1.2.0-rc01、 Apache Doris 1.1.3 及 Apache Doris 0.15.0 RC04 版本进行对比测试，测试结果如下：</p><table><thead><tr><th>Query</th><th>Apache Doris 1.2.0-rc01(ms)</th><th>Apache Doris 1.1.3(ms)</th><th>Apache Doris 0.15.0 RC04(ms)</th></tr></thead><tbody><tr><td>Q1.1</td><td>20</td><td>90</td><td>250</td></tr><tr><td>Q1.2</td><td>10</td><td>10</td><td>30</td></tr><tr><td>Q1.3</td><td>30</td><td>70</td><td>120</td></tr><tr><td>Q2.1</td><td>90</td><td>360</td><td>900</td></tr><tr><td>Q2.2</td><td>90</td><td>340</td><td>1020</td></tr><tr><td>Q2.3</td><td>60</td><td>260</td><td>770</td></tr><tr><td>Q3.1</td><td>160</td><td>550</td><td>1710</td></tr><tr><td>Q3.2</td><td>80</td><td>290</td><td>670</td></tr><tr><td>Q3.3</td><td>90</td><td>240</td><td>550</td></tr><tr><td>Q3.4</td><td>20</td><td>20</td><td>30</td></tr><tr><td>Q4.1</td><td>140</td><td>480</td><td>1250</td></tr><tr><td>Q4.2</td><td>50</td><td>240</td><td>400</td></tr><tr><td>Q4.3</td><td>30</td><td>200</td><td>330</td></tr><tr><td>合计</td><td>880</td><td>3150</td><td>8030</td></tr></tbody></table><p><strong>结果说明</strong></p><ul><li>测试结果对应的数据集为 scale 100, 约 6 亿条。</li><li>测试环境配置为用户常用配置，云服务器 4 台，16 核 64G SSD，1 FE 3 BE 部署。</li><li>选用用户常见配置测试以降低用户选型评估成本，但整个测试过程中不会消耗如此多的硬件资源。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-标准-ssb-测试结果">5. 标准 SSB 测试结果<a href="#5-标准-ssb-测试结果" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>这里我们使用 Apache Doris 1.2.0-rc01、Apache Doris 1.1.3 及 Apache Doris 0.15.0 RC04 版本进行对比测试，测试结果如下：</p><table><thead><tr><th>Query</th><th>Apache Doris 1.2.0-rc01(ms)</th><th>Apache Doris 1.1.3 (ms)</th><th>Apache Doris 0.15.0 RC04(ms)</th></tr></thead><tbody><tr><td>Q1.1</td><td>40</td><td>18</td><td>350</td></tr><tr><td>Q1.2</td><td>30</td><td>100</td><td>80</td></tr><tr><td>Q1.3</td><td>20</td><td>70</td><td>80</td></tr><tr><td>Q2.1</td><td>350</td><td>940</td><td>20680</td></tr><tr><td>Q2.2</td><td>320</td><td>750</td><td>18250</td></tr><tr><td>Q2.3</td><td>300</td><td>720</td><td>14760</td></tr><tr><td>Q3.1</td><td>650</td><td>2150</td><td>22190</td></tr><tr><td>Q3.2</td><td>260</td><td>510</td><td>8360</td></tr><tr><td>Q3.3</td><td>220</td><td>450</td><td>6200</td></tr><tr><td>Q3.4</td><td>60</td><td>70</td><td>160</td></tr><tr><td>Q4.1</td><td>840</td><td>1480</td><td>24320</td></tr><tr><td>Q4.2</td><td>460</td><td>560</td><td>6310</td></tr><tr><td>Q4.3</td><td>610</td><td>660</td><td>10170</td></tr><tr><td>合计</td><td>4160</td><td>8478</td><td>131910</td></tr></tbody></table><p><strong>结果说明</strong></p><ul><li>测试结果对应的数据集为scale 100, 约6亿条。</li><li>测试环境配置为用户常用配置，云服务器4台，16核 64G SSD，1 FE 3 BE 部署。</li><li>选用用户常见配置测试以降低用户选型评估成本，但整个测试过程中不会消耗如此多的硬件资源。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-环境准备">6. 环境准备<a href="#6-环境准备" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>请先参照 <a href="/zh-CN/install/install-deploy.md">官方文档</a> 进行 Apache Doris 的安装部署，以获得一个正常运行中的 Doris 集群（至少包含 1 FE 1 BE，推荐 1 FE 3 BE）。</p><p>以下文档中涉及的脚本都存放在 Apache Doris 代码库：<a href="https://github.com/apache/doris/tree/master/tools/ssb-tools" target="_blank" rel="noopener noreferrer">ssb-tools</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-数据准备">7. 数据准备<a href="#7-数据准备" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="71-下载安装-ssb-数据生成工具">7.1 下载安装 SSB 数据生成工具。<a href="#71-下载安装-ssb-数据生成工具" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>执行以下脚本下载并编译 <a href="https://github.com/electrum/ssb-dbgen.git" target="_blank" rel="noopener noreferrer">ssb-dbgen</a> 工具。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sh</span><span class="token plain"> build-ssb-dbgen.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>安装成功后，将在 <code>ssb-dbgen/</code> 目录下生成 <code>dbgen</code> 二进制文件。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="72-生成-ssb-测试集">7.2 生成 SSB 测试集<a href="#72-生成-ssb-测试集" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>执行以下脚本生成 SSB 数据集：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sh</span><span class="token plain"> gen-ssb-data.sh -s </span><span class="token number" style="color:#36acaa">100</span><span class="token plain"> -c </span><span class="token number" style="color:#36acaa">100</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>注1：通过 <code>sh gen-ssb-data.sh -h</code> 查看脚本帮助。</p><p>注2：数据会以 <code>.tbl</code> 为后缀生成在  <code>ssb-data/</code> 目录下。文件总大小约60GB。生成时间可能在数分钟到1小时不等。</p><p>注3：<code>-s 100</code> 表示测试集大小系数为 100，<code>-c 100</code> 表示并发100个线程生成 lineorder 表的数据。<code>-c</code> 参数也决定了最终 lineorder 表的文件数量。参数越大，文件数越多，每个文件越小。</p></blockquote><p>在 <code>-s 100</code> 参数下，生成的数据集大小为：</p><table><thead><tr><th>Table</th><th>Rows</th><th>Size</th><th>File Number</th></tr></thead><tbody><tr><td>lineorder</td><td>6亿（600037902）</td><td>60GB</td><td>100</td></tr><tr><td>customer</td><td>300万（3000000）</td><td>277M</td><td>1</td></tr><tr><td>part</td><td>140万（1400000）</td><td>116M</td><td>1</td></tr><tr><td>supplier</td><td>20万（200000）</td><td>17M</td><td>1</td></tr><tr><td>date</td><td>2556</td><td>228K</td><td>1</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="73-建表">7.3 建表<a href="#73-建表" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="731-准备-doris-clusterconf-文件">7.3.1 准备 <code>doris-cluster.conf</code> 文件。<a href="#731-准备-doris-clusterconf-文件" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>在调用导入脚本前，需要将 FE 的 ip 端口等信息写在 <code>doris-cluster.conf</code> 文件中。</p><p>文件位置和 <code>load-ssb-dimension-data.sh</code> 平级。</p><p>文件内容包括 FE 的 ip，HTTP 端口，用户名，密码以及待导入数据的 DB 名称：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">FE_HOST</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"xxx"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">FE_HTTP_PORT</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"8030"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">FE_QUERY_PORT</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"9030"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable environment constant" style="color:#36acaa">USER</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"root"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">PASSWORD</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'xxx'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">DB</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"ssb"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="732-执行以下脚本生成创建-ssb-表">7.3.2 执行以下脚本生成创建 SSB 表：<a href="#732-执行以下脚本生成创建-ssb-表" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sh</span><span class="token plain"> create-ssb-tables.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>或者复制 <a href="https://github.com/apache/incubator-doris/tree/master/tools/ssb-tools/ddl/create-ssb-tables.sql" target="_blank" rel="noopener noreferrer">create-ssb-tables.sql</a>  和 <a href="https://github.com/apache/incubator-doris/tree/master/tools/ssb-tools/ddl/create-ssb-flat-table.sql" target="_blank" rel="noopener noreferrer">create-ssb-flat-table.sql</a>  中的建表语句，在 MySQL 客户端中执行。</p><p>下面是 <code>lineorder_flat</code> 表建表语句。在上面的 <code>create-ssb-flat-table.sh</code>  脚本中创建 <code>lineorder_flat</code> 表，并进行了默认分桶数（48个桶)。您可以删除该表，根据您的集群规模节点配置对这个分桶数进行调整，这样可以获取到更好的一个测试效果。</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">lineorder_flat</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_ORDERDATE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_ORDERKEY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_LINENUMBER</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tinyint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_CUSTKEY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_PARTKEY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_SUPPKEY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_ORDERPRIORITY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_SHIPPRIORITY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tinyint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_QUANTITY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tinyint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_EXTENDEDPRICE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_ORDTOTALPRICE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_DISCOUNT</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tinyint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_REVENUE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_SUPPLYCOST</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_TAX</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tinyint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_COMMITDATE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_SHIPMODE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">C_NAME</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">C_ADDRESS</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">C_CITY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">C_NATION</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">C_REGION</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">C_PHONE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">C_MKTSEGMENT</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">S_NAME</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">S_ADDRESS</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">S_CITY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">S_NATION</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">S_REGION</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">S_PHONE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">P_NAME</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">P_MFGR</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">P_CATEGORY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">P_BRAND</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">P_COLOR</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">P_TYPE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">P_SIZE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">tinyint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">P_CONTAINER</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">varchar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ENGINE</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">OLAP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">DUPLICATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">KEY</span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_ORDERDATE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_ORDERKEY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">COMMENT</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"OLAP"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">PARTITION</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> RANGE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_ORDERDATE</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">PARTITION</span><span class="token plain"> p1 </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'0000-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1993-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">PARTITION</span><span class="token plain"> p2 </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1993-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">PARTITION</span><span class="token plain"> p3 </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1995-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">PARTITION</span><span class="token plain"> p4 </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1995-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1996-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">PARTITION</span><span class="token plain"> p5 </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1996-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1997-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">PARTITION</span><span class="token plain"> p6 </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1997-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1998-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">PARTITION</span><span class="token plain"> p7 </span><span class="token keyword" style="color:#00009f">VALUES</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1998-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'1999-01-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">DISTRIBUTED</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">HASH</span><span class="token punctuation" style="color:#393A34">(</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token identifier">LO_ORDERKEY</span><span class="token identifier punctuation" style="color:#393A34">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> BUCKETS </span><span class="token number" style="color:#36acaa">48</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PROPERTIES </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"replication_num"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"colocate_with"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"groupxx1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"in_memory"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"false"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"storage_format"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"DEFAULT"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="74-导入数据">7.4 导入数据<a href="#74-导入数据" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>我们使用以下命令完成 SSB 测试集所有数据导入及 SSB FLAT 宽表数据合成并导入到表里。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sh</span><span class="token plain"> bin/load-ssb-data.sh -c </span><span class="token number" style="color:#36acaa">10</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>-c 5</code> 表示启动 10 个并发线程导入（默认为 5）。在单 BE 节点情况下，由 <code>sh gen-ssb-data.sh -s 100 -c 100</code> 生成的 lineorder 数据，同时会在最后生成ssb-flat表的数据，如果开启更多线程，可以加快导入速度，但会增加额外的内存开销。</p><blockquote><p>注：</p><ol><li><p>为获得更快的导入速度，你可以在 be.conf 中添加 <code>flush_thread_num_per_store=5</code> 后重启BE。该配置表示每个数据目录的写盘线程数，默认为2。较大的数据可以提升写数据吞吐，但可能会增加 IO Util。（参考值：1块机械磁盘，在默认为2的情况下，导入过程中的 IO Util 约为12%，设置为5时，IO Util 约为26%。如果是 SSD 盘，则几乎为 0）。</p></li><li><p>flat 表数据采用 'INSERT INTO ... SELECT ... ' 的方式导入。</p></li></ol></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="75-检查导入数据">7.5 检查导入数据<a href="#75-检查导入数据" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> lineorder_flat</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>数据量应和生成数据的行数一致。</p><table><thead><tr><th>Table</th><th>Rows</th><th>Origin Size</th><th>Compacted Size(1 Replica)</th></tr></thead><tbody><tr><td>lineorder_flat</td><td>6亿（600037902）</td><td></td><td>59.709 GB</td></tr><tr><td>lineorder</td><td>6亿（600037902）</td><td>60 GB</td><td>14.514 GB</td></tr><tr><td>customer</td><td>300万（3000000）</td><td>277 MB</td><td>138.247 MB</td></tr><tr><td>part</td><td>140万（1400000）</td><td>116 MB</td><td>12.759 MB</td></tr><tr><td>supplier</td><td>20万（200000）</td><td>17 MB</td><td>9.143 MB</td></tr><tr><td>date</td><td>2556</td><td>228 KB</td><td>34.276 KB</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="76-查询测试">7.6 查询测试<a href="#76-查询测试" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>SSB-FlAT 查询语句 ：<a href="https://github.com/apache/doris/tree/master/tools/ssb-tools/ssb-flat-queries" target="_blank" rel="noopener noreferrer">ssb-flat-queries</a></p><p>标准 SSB 查询语句 ：<a href="https://github.com/apache/doris/tree/master/tools/ssb-tools/ssb-queries" target="_blank" rel="noopener noreferrer">ssb-queries</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="761-ssb-flat-测试-sql">7.6.1 SSB FLAT 测试 SQL<a href="#761-ssb-flat-测试-sql" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">--Q1.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_EXTENDEDPRICE </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> LO_DISCOUNT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain">  LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19930101</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19931231</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_DISCOUNT </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_QUANTITY </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">25</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q1.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_EXTENDEDPRICE </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> LO_DISCOUNT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19940101</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19940131</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_DISCOUNT </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_QUANTITY </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">35</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q1.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_EXTENDEDPRICE </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> LO_DISCOUNT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain">  weekofyear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19940101</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19941231</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_DISCOUNT </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_QUANTITY </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">35</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q2.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat </span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> P_CATEGORY </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#12'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q2.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain">  </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> P_BRAND </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2221'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> P_BRAND </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2228'</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ASIA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q2.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> P_BRAND </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2239'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'EUROPE'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> C_NATION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_NATION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> C_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ASIA'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ASIA'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19920101</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19971231</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> C_NATION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_NATION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> revenue </span><span class="token keyword" style="color:#00009f">DESC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> C_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> C_NATION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED STATES'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_NATION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED STATES'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19920101</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19971231</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> C_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> revenue </span><span class="token keyword" style="color:#00009f">DESC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> C_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> C_CITY </span><span class="token operator" style="color:#393A34">IN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'UNITED KI1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI5'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_CITY </span><span class="token operator" style="color:#393A34">IN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'UNITED KI1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI5'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19920101</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19971231</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> C_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> revenue </span><span class="token keyword" style="color:#00009f">DESC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3.4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> C_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> C_CITY </span><span class="token operator" style="color:#393A34">IN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'UNITED KI1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI5'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_CITY </span><span class="token operator" style="color:#393A34">IN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'UNITED KI1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI5'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19971201</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19971231</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> C_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> revenue </span><span class="token keyword" style="color:#00009f">DESC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q4.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> C_NATION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> LO_SUPPLYCOST</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> profit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> C_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> P_MFGR </span><span class="token operator" style="color:#393A34">IN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MFGR#1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> C_NATION</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> C_NATION </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q4.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">S_NATION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_CATEGORY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> LO_SUPPLYCOST</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> profit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> C_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> S_REGION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19970101</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19981231</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> P_MFGR </span><span class="token operator" style="color:#393A34">IN</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MFGR#1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_NATION</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_CATEGORY</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_NATION </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_CATEGORY </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q4.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_ORDERDATE </span><span class="token operator" style="color:#393A34">DIV</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LO_REVENUE </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> LO_SUPPLYCOST</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> profit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder_flat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> S_NATION </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED STATES'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19970101</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> LO_ORDERDATE </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19981231</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> P_CATEGORY </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#14'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">YEAR</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> S_CITY </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P_BRAND </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="762-ssb-标准测试-sql"><strong>7.6.2 SSB 标准测试 SQL</strong><a href="#762-ssb-标准测试-sql" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">--Q1.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> lo_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> REVENUE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1993</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_discount </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_quantity </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">25</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q1.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> lo_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> REVENUE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_yearmonth </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Jan1994'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_discount </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_quantity </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">35</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q1.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> lo_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> REVENUE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_weeknuminyear </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1994</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_discount </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_quantity </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">35</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q2.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> p_category </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#12'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> s_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> p_brand</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q2.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> p_brand </span><span class="token operator" style="color:#393A34">BETWEEN</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2221'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2228'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> s_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ASIA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q2.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> p_brand </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2239'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> s_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'EUROPE'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> REVENUE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> c_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ASIA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> s_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ASIA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1992</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1997</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> c_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> d_year</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> REVENUE </span><span class="token keyword" style="color:#00009f">DESC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> REVENUE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> c_nation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED STATES'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> s_nation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED STATES'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1992</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1997</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> c_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> d_year</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> REVENUE </span><span class="token keyword" style="color:#00009f">DESC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> REVENUE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        c_city </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">OR</span><span class="token plain"> c_city </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI5'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        s_city </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">OR</span><span class="token plain"> s_city </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI5'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1992</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1997</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> c_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> d_year</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> REVENUE </span><span class="token keyword" style="color:#00009f">DESC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3.4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> REVENUE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lineorder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dates</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        c_city </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">OR</span><span class="token plain"> c_city </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI5'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        s_city </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">OR</span><span class="token plain"> s_city </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED KI5'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> d_yearmonth </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Dec1997'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> c_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> d_year</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year </span><span class="token keyword" style="color:#00009f">ASC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> REVENUE </span><span class="token keyword" style="color:#00009f">DESC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q4.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lo_supplycost</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> PROFIT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> dates</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lineorder</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> c_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> s_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p_mfgr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">OR</span><span class="token plain"> p_mfgr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> c_nation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> c_nation</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q4.2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_category</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lo_supplycost</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> PROFIT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> dates</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lineorder</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> c_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> s_region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        d_year </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1997</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">OR</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1998</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p_mfgr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">OR</span><span class="token plain"> p_mfgr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#2'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_category</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_category</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q4.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_brand</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SUM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_revenue </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lo_supplycost</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> PROFIT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> dates</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lineorder</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> lo_orderdate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> d_datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> s_nation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'UNITED STATES'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        d_year </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1997</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">OR</span><span class="token plain"> d_year </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1998</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">AND</span><span class="token plain"> p_category </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MFGR#14'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> d_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p_brand</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 1.2 TPC-H 性能测试报告]]></title>
        <id>https://doris.apache.org/zh-CN/blog/tpch</id>
        <link href="https://doris.apache.org/zh-CN/blog/tpch"/>
        <updated>2022-11-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>TPC-H Benchmark</h1><p>TPC-H是一个决策支持基准（Decision Support Benchmark），它由一套面向业务的特别查询和并发数据修改组成。查询和填充数据库的数据具有广泛的行业相关性。这个基准测试演示了检查大量数据、执行高度复杂的查询并回答关键业务问题的决策支持系统。TPC-H报告的性能指标称为TPC-H每小时复合查询性能指标(QphH@Size)，反映了系统处理查询能力的多个方面。这些方面包括执行查询时所选择的数据库大小，由单个流提交查询时的查询处理能力，以及由多个并发用户提交查询时的查询吞吐量。</p><p>本文档主要介绍 Doris 在 TPC-H 100G 测试集上的性能表现。</p><blockquote><p>注1：包括 TPC-H 在内的标准测试集通常和实际业务场景差距较大，并且部分测试会针对测试集进行参数调优。所以标准测试集的测试结果仅能反映数据库在特定场景下的性能表现。建议用户使用实际业务数据进行进一步的测试。</p><p>注2：本文档涉及的操作都在 CentOS 7.x 上进行测试。</p></blockquote><p>在 TPC-H 标准测试数据集上的 22 个查询上，我们基于 Apache Doris 1.2.0-rc01， Apache Doris 1.1.3 及 Apache Doris 0.15.0 RC04 版本进行了对别测试， Apache Doris 1.2.0-rc01上相对 Apache Doris 1.1.3 整体性能提升了将近 3 倍，相对于 Apache Doris 0.15.0 RC04 ,性能提升了将近 11 倍 。</p><p><img loading="lazy" alt="image-20220614114351241" src="https://cdnd.selectdb.com/zh-CN/assets/images/tpch-2048da37571ef8b1d4b0a49c3fba44ca.png" width="1526" height="726" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-硬件环境">1. 硬件环境<a href="#1-硬件环境" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><table><thead><tr><th>硬件</th><th>配置说明</th></tr></thead><tbody><tr><td>机器数量</td><td>4 台腾讯云主机（1个FE，3个BE）</td></tr><tr><td>CPU</td><td>Intel Xeon(Cascade Lake) Platinum 8269CY  16核  (2.5 GHz/3.2 GHz)</td></tr><tr><td>内存</td><td>64G</td></tr><tr><td>网络带宽</td><td>5Gbps</td></tr><tr><td>磁盘</td><td>ESSD云硬盘</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-软件环境">2. 软件环境<a href="#2-软件环境" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><ul><li>Doris部署 3BE 1FE；</li><li>内核版本：Linux version 5.4.0-96-generic (buildd@lgw01-amd64-051)</li><li>操作系统版本：CentOS 7.8</li><li>Doris 软件版本： Apache Doris 1.2.0-rc01、 Apache Doris 1.1.3 、 Apache Doris 0.15.0 RC04</li><li>JDK：openjdk version "11.0.14" 2022-01-18</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-测试数据量">3. 测试数据量<a href="#3-测试数据量" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>整个测试模拟生成 TPCH 100G 的数据分别导入到 Apache Doris 1.2.0-rc01， Apache Doris 1.1.3 及 Apache Doris 0.15.0 RC04  版本进行测试，下面是表的相关说明及数据量。</p><table><thead><tr><th align="left">TPC-H表名</th><th align="left">行数</th><th>导入后大小</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">REGION</td><td align="left">5</td><td>400KB</td><td align="left">区域表</td></tr><tr><td align="left">NATION</td><td align="left">25</td><td>7.714 KB</td><td align="left">国家表</td></tr><tr><td align="left">SUPPLIER</td><td align="left">100万</td><td>85.528 MB</td><td align="left">供应商表</td></tr><tr><td align="left">PART</td><td align="left">2000万</td><td>752.330 MB</td><td align="left">零部件表</td></tr><tr><td align="left">PARTSUPP</td><td align="left">8000万</td><td>4.375 GB</td><td align="left">零部件供应表</td></tr><tr><td align="left">CUSTOMER</td><td align="left">1500万</td><td>1.317 GB</td><td align="left">客户表</td></tr><tr><td align="left">ORDERS</td><td align="left">1.5亿</td><td>6.301 GB</td><td align="left">订单表</td></tr><tr><td align="left">LINEITEM</td><td align="left">6亿</td><td>20.882 GB</td><td align="left">订单明细表</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-测试sql">4. 测试SQL<a href="#4-测试sql" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>TPCH 22 个测试查询语句 ： <a href="https://github.com/apache/incubator-doris/tree/master/tools/tpch-tools/queries" target="_blank" rel="noopener noreferrer">TPCH-Query-SQL</a></p><p><strong>注意：</strong></p><p>以上 SQL 中的以下四个参数在 Apache Doris 0.15.0 RC04 中不存在，在执行的时候，去掉：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">1. enable_vectorized_engine=true,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2. batch_size=4096,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3. disable_join_reorder=false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4. enable_projection=true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-测试结果">5. 测试结果<a href="#5-测试结果" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>这里我们使用 Apache Doris 1.2.0-rc01， Apache Doris 1.1.3 及 Apache Doris 0.15.0 RC04 版本进行对比测试，测试结果如下：</p><table><thead><tr><th>Query</th><th>Apache Doris 1.2.0-rc01 (s)</th><th>Apache Doris 1.1.3 (s)</th><th>Apache Doris 0.15.0 RC04 (s)</th></tr></thead><tbody><tr><td>Q1</td><td>2.12</td><td>3.75</td><td>28.63</td></tr><tr><td>Q2</td><td>0.20</td><td>4.22</td><td>7.88</td></tr><tr><td>Q3</td><td>0.62</td><td>2.64</td><td>9.39</td></tr><tr><td>Q4</td><td>0.61</td><td>1.5</td><td>9.3</td></tr><tr><td>Q5</td><td>1.05</td><td>2.15</td><td>4.11</td></tr><tr><td>Q6</td><td>0.08</td><td>0.19</td><td>0.43</td></tr><tr><td>Q7</td><td>0.58</td><td>1.04</td><td>1.61</td></tr><tr><td>Q8</td><td>0.72</td><td>1.75</td><td>50.35</td></tr><tr><td>Q9</td><td>3.61</td><td>7.94</td><td>16.34</td></tr><tr><td>Q10</td><td>1.26</td><td>1.41</td><td>5.21</td></tr><tr><td>Q11</td><td>0.15</td><td>0.35</td><td>1.72</td></tr><tr><td>Q12</td><td>0.21</td><td>0.57</td><td>5.39</td></tr><tr><td>Q13</td><td>2.62</td><td>8.15</td><td>20.88</td></tr><tr><td>Q14</td><td>0.16</td><td>0.3</td><td></td></tr><tr><td>Q15</td><td>0.30</td><td>0.66</td><td>1.86</td></tr><tr><td>Q16</td><td>0.38</td><td>0.79</td><td>1.32</td></tr><tr><td>Q17</td><td>0.65</td><td>1.51</td><td>26.67</td></tr><tr><td>Q18</td><td>2.28</td><td>3.364</td><td>11.77</td></tr><tr><td>Q19</td><td>0.20</td><td>0.829</td><td>1.71</td></tr><tr><td>Q20</td><td>0.21</td><td>2.77</td><td>5.2</td></tr><tr><td>Q21</td><td>1.17</td><td>4.47</td><td>10.34</td></tr><tr><td>Q22</td><td>0.46</td><td>0.9</td><td>3.22</td></tr><tr><td><strong>合计</strong></td><td><strong>19.64</strong></td><td><strong>51.253</strong></td><td><strong>223.33</strong></td></tr></tbody></table><p><strong>结果说明</strong></p><ul><li>测试结果对应的数据集为scale 100, 约6亿条。</li><li>测试环境配置为用户常用配置，云服务器4台，16核 64G SSD，1 FE 3 BE 部署。</li><li>选用用户常见配置测试以降低用户选型评估成本，但整个测试过程中不会消耗如此多的硬件资源。</li><li>Apache Doris 0.15 RC04 在 TPC-H 测试中 Q14 执行失败，无法完成查询。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-环境准备">6. 环境准备<a href="#6-环境准备" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>请先参照 <a href="/zh-CN/install/install-deploy.md">官方文档</a> 进行 Doris 的安装部署，以获得一个正常运行中的 Doris 集群（至少包含 1 FE 1 BE，推荐 1 FE 3 BE）。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-数据准备">7. 数据准备<a href="#7-数据准备" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="71-下载安装-tpc-h-数据生成工具">7.1 下载安装 TPC-H 数据生成工具<a href="#71-下载安装-tpc-h-数据生成工具" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>执行以下脚本下载并编译  <a href="https://github.com/apache/incubator-doris/tree/master/tools/tpch-tools" target="_blank" rel="noopener noreferrer">tpch-tools</a>  工具。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sh</span><span class="token plain"> build-tpch-dbgen.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>安装成功后，将在 <code>TPC-H_Tools_v3.0.0/</code> 目录下生成 <code>dbgen</code> 二进制文件。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="72-生成-tpc-h-测试集">7.2 生成 TPC-H 测试集<a href="#72-生成-tpc-h-测试集" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>执行以下脚本生成 TPC-H 数据集：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sh</span><span class="token plain"> gen-tpch-data.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>注1：通过 <code>sh gen-tpch-data.sh -h</code> 查看脚本帮助。</p><p>注2：数据会以 <code>.tbl</code> 为后缀生成在  <code>tpch-data/</code> 目录下。文件总大小约100GB。生成时间可能在数分钟到1小时不等。</p><p>注3：默认生成 100G 的标准测试数据集</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="73-建表">7.3 建表<a href="#73-建表" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="731-准备-doris-clusterconf-文件">7.3.1 准备 <code>doris-cluster.conf</code> 文件<a href="#731-准备-doris-clusterconf-文件" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><p>在调用导入脚本前，需要将 FE 的 ip 端口等信息写在 <code>doris-cluster.conf</code> 文件中。</p><p>文件位置和 <code>load-tpch-data.sh</code> 平级。</p><p>文件内容包括 FE 的 ip，HTTP 端口，用户名，密码以及待导入数据的 DB 名称：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># Any of FE host</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">FE_HOST</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'127.0.0.1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># http_port in fe.conf</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">FE_HTTP_PORT</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8030</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># query_port in fe.conf</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">FE_QUERY_PORT</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">9030</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Doris username</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable environment constant" style="color:#36acaa">USER</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'root'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Doris password</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">PASSWORD</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">''</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># The database where TPC-H tables located</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">DB</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'tpch1'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="732-执行以下脚本生成创建-tpc-h-表">7.3.2 执行以下脚本生成创建 TPC-H 表<a href="#732-执行以下脚本生成创建-tpc-h-表" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h4><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sh</span><span class="token plain"> create-tpch-tables.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>或者复制 <a href="https://github.com/apache/incubator-doris/blob/master/tools/tpch-tools/create-tpch-tables.sql" target="_blank" rel="noopener noreferrer">create-tpch-tables.sql</a> 中的建表语句，在 Doris 中执行。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="74-导入数据">7.4 导入数据<a href="#74-导入数据" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过下面的命令执行数据导入：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sh</span><span class="token plain"> ./load-tpch-data.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="75-检查导入数据">7.5 检查导入数据<a href="#75-检查导入数据" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>执行下面的 SQL 语句检查导入的数据与上面的数据量是一致。</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  lineitem</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  orders</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  partsupp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  part</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  customer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  supplier</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  nation</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  region</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain">  revenue0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="76-查询测试">7.6 查询测试<a href="#76-查询测试" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h2 class="anchor anchorWithStickyNavbar_LWe7" id="761-执行查询脚本">7.6.1 执行查询脚本<a href="#761-执行查询脚本" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>执行上面的测试 SQL 或者 执行下面的命令</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./run-tpch-queries.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>注意：</p><ol><li><p>目前Doris的查询优化器和统计信息功能还不完善，所以我们在TPC-H中重写了一些查询以适应Doris的执行框架，但不影响结果的正确性</p></li><li><p>Doris 新的查询优化器将在后续的版本中发布</p></li><li><p>执行查询之前设置 <code>set mem_exec_limit=8G</code></p></li></ol></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="762-单个-sql-执行">7.6.2 单个 SQL 执行<a href="#762-单个-sql-执行" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>下面是测试时使用的 SQL 语句，你也可以从代码库里获取最新的 SQL 。最新测试查询语句地址：<a href="https://github.com/apache/doris/tree/master/tools/tpch-tools/queries" target="_blank" rel="noopener noreferrer">TPC-H 测试查询语句</a></p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">--Q1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=false) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_returnflag</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_linestatus</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> sum_qty</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> sum_base_price</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> sum_disc_price</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> l_tax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> sum_charge</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">avg</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> avg_qty</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">avg</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> avg_price</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">avg</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> avg_disc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> count_order</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lineitem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_shipdate </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1998-12-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'90'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">day</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_returnflag</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_linestatus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_returnflag</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_linestatus</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=1, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_acctbal</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    n_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_partkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_mfgr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_phone</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_comment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    partsupp </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ps_partkey </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> a_partkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">min</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ps_supplycost</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> a_min</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            partsupp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            region</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ps_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> s_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ps_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n_regionkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> r_regionkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> r_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'EUROPE'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_type </span><span class="token operator" style="color:#393A34">like</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'%BRASS'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> a_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> A </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> ps_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a_partkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> ps_supplycost</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">a_min </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    region</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ps_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> s_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ps_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_type </span><span class="token operator" style="color:#393A34">like</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'%BRASS'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n_regionkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> r_regionkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> r_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'EUROPE'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_acctbal </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    n_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">limit</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true, runtime_filter_wait_time_ms=10000) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_orderkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> revenue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_orderdate</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_shippriority</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> l_orderkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> l_extendedprice</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> o_orderdate</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> o_shippriority</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> o_custkey </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lineitem </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> orders</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> l_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1995-03-15'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipdate </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1995-03-15'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t1 </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> customer c </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> c_mktsegment </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'BUILDING'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_orderkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_orderdate</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_shippriority</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    revenue </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_orderdate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">limit</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_orderpriority</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> order_count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lineitem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> l_commitdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> l_receiptdate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> semi </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> orders</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_orderdate </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1993-07-01'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1993-07-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'3'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">month</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_orderpriority</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_orderpriority</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    n_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    orders</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lineitem</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    region</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> c_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n_regionkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> r_regionkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> r_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ASIA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderdate </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">year</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    n_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    revenue </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=1, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lineitem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_shipdate </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">year</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_discount </span><span class="token operator" style="color:#393A34">between</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">.06</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.01</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">.06</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.01</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_quantity </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">24</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q7</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=458589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    supp_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cust_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">volume</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            n1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_name </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> supp_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            n2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_name </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> cust_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            extract</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">year</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> l_shipdate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> l_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> volume</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lineitem</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            orders</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nation n1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nation n2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            s_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> c_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> c_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'FRANCE'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'GERMANY'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token operator" style="color:#393A34">or</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'GERMANY'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'FRANCE'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipdate </span><span class="token operator" style="color:#393A34">between</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1995-01-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1996-12-31'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> shipping</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    supp_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cust_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_year</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    supp_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cust_nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_year</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">when</span><span class="token plain"> nation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'BRAZIL'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"> volume</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">volume</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> mkt_share</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            extract</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">year</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> o_orderdate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> o_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> volume</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            n2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_name </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> nation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lineitem</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            orders</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nation n1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nation n2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            region</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> s_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> c_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_regionkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> r_regionkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> r_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AMERICA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderdate </span><span class="token operator" style="color:#393A34">between</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1995-01-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1996-12-31'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ECONOMY ANODIZED STEEL'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> all_nations</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_year</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_year</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q9</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=37179869184, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true, enable_remove_no_conjuncts_runtime_filter_policy=true, runtime_filter_wait_time_ms=100000) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> sum_profit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            n_name </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            extract</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">year</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> o_orderdate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> o_year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> ps_supplycost </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> l_quantity </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> amount</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lineitem </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> orders </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> o_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">join</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">shuffle</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> part </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">join</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">shuffle</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> partsupp </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> ps_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">join</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">shuffle</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> supplier </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> s_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">join</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">broadcast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> nation </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ps_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_suppkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            p_name </span><span class="token operator" style="color:#393A34">like</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'%green%'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> profit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_year</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nation</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_year </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=false, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_custkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> revenue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_acctbal</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    n_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_phone</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_comment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> o_custkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">l_extendedprice</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">l_discount </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> lineitem</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> orders</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> l_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderdate </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1993-10-01'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1993-10-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'3'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">month</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_returnflag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'R'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> c_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_custkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_acctbal</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_phone</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    n_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_comment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    revenue </span><span class="token keyword" style="color:#00009f">desc</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">limit</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q11</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ps_partkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ps_supplycost </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ps_availqty</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    partsupp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'GERMANY'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ps_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> B</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ps_partkey </span><span class="token keyword" style="color:#00009f">having</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ps_supplycost </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ps_availqty</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ps_supplycost </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ps_availqty</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.000002</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                partsupp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'GERMANY'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ps_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> A</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">value</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q12</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_shipmode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">when</span><span class="token plain"> o_orderpriority </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1-URGENT'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">or</span><span class="token plain"> o_orderpriority </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2-HIGH'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> high_line_count</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">when</span><span class="token plain"> o_orderpriority </span><span class="token operator" style="color:#393A34">&lt;&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1-URGENT'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderpriority </span><span class="token operator" style="color:#393A34">&lt;&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2-HIGH'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> low_line_count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    orders</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lineitem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    o_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipmode </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MAIL'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'SHIP'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_commitdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> l_receiptdate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> l_commitdate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_receiptdate </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_receiptdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">year</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_shipmode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_shipmode</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q13</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=45899345920, parallel_fragment_exec_instance_num=16, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_count</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> custdist</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            c_custkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">o_orderkey</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> c_count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            orders </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">outer</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> customer </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                c_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_comment </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">like</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'%special%requests%'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            c_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> c_orders</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    custdist </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_count </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q14</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true, runtime_filter_mode=OFF) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token number" style="color:#36acaa">100.00</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">when</span><span class="token plain"> p_type </span><span class="token operator" style="color:#393A34">like</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'PROMO%'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"> l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> promo_revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    part</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lineitem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipdate </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1995-09-01'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1995-09-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">month</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q15</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_suppkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_phone</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    total_revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    supplier</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    revenue0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> supplier_no</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> total_revenue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">total_revenue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            revenue0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s_suppkey</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q16</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=8, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_brand</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_type</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">distinct</span><span class="token plain"> ps_suppkey</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> supplier_cnt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    partsupp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    part</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ps_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_brand </span><span class="token operator" style="color:#393A34">&lt;&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Brand#45'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_type </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">like</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MEDIUM POLISHED%'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_size </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">49</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">23</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">45</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">19</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">36</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> ps_suppkey </span><span class="token operator" style="color:#393A34">not</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            s_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            supplier</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            s_comment </span><span class="token operator" style="color:#393A34">like</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'%Customer%Complaints%'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_brand</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_type</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_size</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    supplier_cnt </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_brand</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_type</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q17</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=1, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7.0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> avg_yearly</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lineitem </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">broadcast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    part p1 </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> p1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">p_brand </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Brand#23'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">p_container </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MED BOX'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_quantity </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0.2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">avg</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lineitem </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">broadcast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            part p2 </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> p2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            l_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">p_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">p_brand </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Brand#23'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">p_container </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MED BOX'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q18</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=45899345920, parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_custkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_orderkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_orderdate</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_totalprice</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">customer </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lineitem </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    orders </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> semi </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          l_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          lineitem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          l_orderkey </span><span class="token keyword" style="color:#00009f">having</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">300</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> o_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_orderkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> c_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_custkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c_custkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_orderkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_orderdate</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_totalprice</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_totalprice </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o_orderdate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">limit</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q19</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=false, enable_cost_based_join_reorder=false, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_extendedprice</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> l_discount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> revenue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lineitem</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    part</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_brand </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Brand#12'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_container </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'SM CASE'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'SM BOX'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'SM PACK'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'SM PKG'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_quantity </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_size </span><span class="token operator" style="color:#393A34">between</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipmode </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'AIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AIR REG'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipinstruct </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'DELIVER IN PERSON'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">or</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_brand </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Brand#23'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_container </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MED BAG'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MED BOX'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MED PKG'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MED PACK'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_quantity </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_size </span><span class="token operator" style="color:#393A34">between</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipmode </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'AIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AIR REG'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipinstruct </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'DELIVER IN PERSON'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">or</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l_partkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_brand </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Brand#34'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_container </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'LG CASE'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'LG BOX'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'LG PACK'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'LG PKG'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_quantity </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_quantity </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_size </span><span class="token operator" style="color:#393A34">between</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipmode </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'AIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'AIR REG'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipinstruct </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'DELIVER IN PERSON'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q20</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=2, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true, runtime_bloom_filter_size=551943) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">s_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s_address </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">supplier </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> semi </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> l_partkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">l_suppkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.5</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l_quantity</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> l_q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> lineitem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> l_shipdate </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l_shipdate </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">date</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1994-01-01'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interval</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">year</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> l_partkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">l_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t2 </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> ps_partkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ps_suppkey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ps_availqty</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> partsupp </span><span class="token keyword" style="color:#00009f">left</span><span class="token plain"> semi </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> part</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> ps_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p_partkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> p_name </span><span class="token operator" style="color:#393A34">like</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'forest%'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_partkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ps_partkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ps_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ps_availqty </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> s_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ps_suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> nation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'CANADA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"> s_name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q21</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=4, enable_vectorized_engine=true, batch_size=4096, disable_join_reorder=true, enable_cost_based_join_reorder=true, enable_projection=true) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">s_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> numwait</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lineitem l2 </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> semi </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lineitem l3 </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> anti </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      orders </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> lineitem l1 </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> l1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> o_orderkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> o_orderstatus </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'F'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        supplier </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> nation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> s_nationkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n_nationkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> n_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'SAUDI ARABIA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"> t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">s_suppkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_suppkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_receiptdate </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> l1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_commitdate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> l3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_orderkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_suppkey </span><span class="token operator" style="color:#393A34">&lt;&gt;</span><span class="token plain"> t2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_suppkey  </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_receiptdate </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> l3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_commitdate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> t3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> l2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_orderkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_orderkey </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> l2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_suppkey </span><span class="token operator" style="color:#393A34">&lt;&gt;</span><span class="token plain"> t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l_suppkey </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">s_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    numwait </span><span class="token keyword" style="color:#00009f">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">s_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">limit</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">--Q22</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> tmp </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token function" style="color:#d73a49">avg</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c_acctbal</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> av</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    customer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    c_acctbal </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.00</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">and</span><span class="token plain"> substring</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c_phone</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'13'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'31'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'23'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'29'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'30'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'18'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'17'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*+SET_VAR(exec_mem_limit=8589934592, parallel_fragment_exec_instance_num=4,runtime_bloom_filter_size=4194304) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cntrycode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> numcust</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c_acctbal</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> totacctbal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            substring</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c_phone</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> cntrycode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            c_acctbal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             orders </span><span class="token keyword" style="color:#00009f">right</span><span class="token plain"> anti </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> customer c </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain">  o_custkey </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c_custkey </span><span class="token keyword" style="color:#00009f">join</span><span class="token plain"> tmp </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c_acctbal </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">av</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            substring</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c_phone</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'13'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'31'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'23'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'29'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'30'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'18'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'17'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> custsale</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">group</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cntrycode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">order</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">by</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cntrycode</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris 1.1.4 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-1.1.4</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-1.1.4"/>
        <updated>2022-11-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>作为 1.1 LTS（Long-term Support，长周期支持）版本基础之上的 Bugfix 版本，在 Apache Doris 1.1.4 版本中，Doris 团队修复了自 1.1.3 版本以来的约 60 个 Issue 或性能优化项。改进了 Spark Load 的使用体验，优化了诸多内存以及 BE 异常宕机的问题，系统稳定性和性能得以进一步加强，推荐所有用户下载和使用。</p><h1>新增功能</h1><ul><li><p>Broker Load 支持 华为云 OBS 对象存储。<a href="https://github.com/apache/doris/pull/13523" target="_blank" rel="noopener noreferrer">#13523</a></p></li><li><p>Spark Load 支持 Parquet 和 Orc 文件。<a href="https://github.com/apache/doris/pull/13438" target="_blank" rel="noopener noreferrer">#13438</a></p></li></ul><h1>优化改进</h1><ul><li>禁用 Metric Hook 中的互斥量，其将影响数据导入过程中的查询性能。 <a href="https://github.com/apache/doris/pull/10941" target="_blank" rel="noopener noreferrer">#10941</a></li></ul><h1>Bug 修复</h1><ul><li><p>修复了当 Spark Load 加载文件时 Where 条件不生效的问题。 <a href="https://github.com/apache/doris/pull/13804" target="_blank" rel="noopener noreferrer">#13804</a></p></li><li><p>修复了 If 函数存在 Nullable 列时开启向量化返回错误结果的问题。 <a href="https://github.com/apache/doris/pull/13779" target="_blank" rel="noopener noreferrer">#13779</a></p></li><li><p>修复了在使用 Anti Join 和其他 Join 谓词时产生错误结果的问题。 <a href="https://github.com/apache/doris/pull/13743" target="_blank" rel="noopener noreferrer">#13743</a></p></li><li><p>修复了当调用函数 concat(ifnull)时 BE 宕机的问题。 <a href="https://github.com/apache/doris/pull/13693" target="_blank" rel="noopener noreferrer">#13693</a></p></li><li><p>修复了 group by 语句中存在函数时 planner 错误的问题。 <a href="https://github.com/apache/doris/pull/13613" target="_blank" rel="noopener noreferrer">#13613</a></p></li><li><p>修复了 lateral view 语句不能正确识别表名和列名的问题。 <a href="https://github.com/apache/doris/pull/13600" target="_blank" rel="noopener noreferrer">#13600</a></p></li><li><p>修复了使用物化视图和表别名时出现未知列的问题。 <a href="https://github.com/apache/doris/pull/13605" target="_blank" rel="noopener noreferrer">#13605</a></p></li><li><p>修复了 JSONReader 无法释放值和解析 allocator 内存的问题。 <a href="https://github.com/apache/doris/pull/13513" target="_blank" rel="noopener noreferrer">#13513</a></p></li><li><p>修复了当 enable_vectorized_alter_table 为 true 时允许使用 to_bitmap() 对负值列创建物化视图的问题。 <a href="https://github.com/apache/doris/pull/13448" target="_blank" rel="noopener noreferrer">#13448</a></p></li><li><p>修复了函数 from_date_format_str 中微秒数丢失的问题。 <a href="https://github.com/apache/doris/pull/13446" target="_blank" rel="noopener noreferrer">#13446</a></p></li><li><p>修复了排序 exprs 的 nullability 属性在使用子 smap 信息进行替换后可能不正确的问题。 <a href="https://github.com/apache/doris/pull/13328" target="_blank" rel="noopener noreferrer">#13328</a></p></li><li><p>修复了 case when 有 1000 个条件时出现 Core 的问题。 <a href="https://github.com/apache/doris/pull/13315" target="_blank" rel="noopener noreferrer">#13315</a></p></li><li><p>修复了 Stream Load 导入数据时最后一行数据丢失的问题。 <a href="https://github.com/apache/doris/pull/13066" target="_blank" rel="noopener noreferrer">#13066</a></p></li><li><p>恢复表或分区的副本数与备份前相同。 <a href="https://github.com/apache/doris/pull/11942" target="_blank" rel="noopener noreferrer">#11942</a></p></li></ul>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris 1.1.3 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-1.1.3</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-1.1.3"/>
        <updated>2022-10-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>作为 1.1.2 LTS（Long-term Support，长周期支持）版本基础之上的 Bugfix 版本，在 Apache Doris 1.1.3 版本中，有超过 80 个 Issue 或性能优化项被合入，优化了在导入或查询过程中的内存控制，修复了许多导致 BE Core 以及产生错误查询结果的问题，系统稳定性和性能得以进一步加强，推荐所有用户下载和使用。</p><h1>新增功能</h1><ul><li><p>在 ODBC 表中支持 SQLServer 和 PostgreSQL 的转义标识符。</p></li><li><p>支持使用 Parquet 作为导出文件格式。</p></li></ul><h1>优化改进</h1><ul><li><p>优化了 Flush 策略以及避免过多 Segment 小文件。 <a href="https://github.com/apache/doris/pull/12706" target="_blank" rel="noopener noreferrer">#12706</a> <a href="https://github.com/apache/doris/pull/12716" target="_blank" rel="noopener noreferrer">#12716</a></p></li><li><p>重构 Runtime Filter 以减少初始准备时间。 <a href="https://github.com/apache/doris/pull/13127" target="_blank" rel="noopener noreferrer">#13127</a></p></li><li><p>修复了若干个在查询或导入过程中的内存控制问题。 <a href="https://github.com/apache/doris/pull/12682" target="_blank" rel="noopener noreferrer">#12682</a> <a href="https://github.com/apache/doris/pull/12688" target="_blank" rel="noopener noreferrer">#12688</a> <a href="https://github.com/apache/doris/pull/12708" target="_blank" rel="noopener noreferrer">#12708</a> <a href="https://github.com/apache/doris/pull/12776" target="_blank" rel="noopener noreferrer">#12776</a> <a href="https://github.com/apache/doris/pull/12782" target="_blank" rel="noopener noreferrer">#12782</a> <a href="https://github.com/apache/doris/pull/12791" target="_blank" rel="noopener noreferrer">#12791</a> <a href="https://github.com/apache/doris/pull/12794" target="_blank" rel="noopener noreferrer">#12794</a> <a href="https://github.com/apache/doris/pull/12820" target="_blank" rel="noopener noreferrer">#12820</a> <a href="https://github.com/apache/doris/pull/12932" target="_blank" rel="noopener noreferrer">#12932</a> <a href="https://github.com/apache/doris/pull/12954" target="_blank" rel="noopener noreferrer">#12954</a> <a href="https://github.com/apache/doris/pull/12951" target="_blank" rel="noopener noreferrer">#12951</a></p></li></ul><h1>Bug 修复</h1><ul><li><p>修复了 largeint 类型在 Compaction 过程中导致 Core 的问题。 <a href="https://github.com/apache/doris/pull/10094" target="_blank" rel="noopener noreferrer">#10094</a></p></li><li><p>修复了 Grouping set 导致 BE Core 或者返回错误结果的问题。 <a href="https://github.com/apache/doris/pull/12313" target="_blank" rel="noopener noreferrer">#12313</a></p></li><li><p>修复了使用 orthogonal_bitmap_union_count 函数时执行计划 PREAGGREGATION 显示错误的问题。 <a href="https://github.com/apache/doris/pull/12581" target="_blank" rel="noopener noreferrer">#12581</a></p></li><li><p>修复了 Level1Iterator 未被释放导致的内存泄漏问题。 <a href="https://github.com/apache/doris/pull/12592" target="_blank" rel="noopener noreferrer">#12592</a></p></li><li><p>修复了当 2 BE 且存在 Colocation 表时通过 Decommission 下线节点失败的问题。 <a href="https://github.com/apache/doris/pull/12644" target="_blank" rel="noopener noreferrer">#12644</a></p></li><li><p>修复了 TBrokerOpenReaderResponse 过大时导致堆栈缓冲区溢出而导致的 BE Core 问题。 <a href="https://github.com/apache/doris/pull/12658" target="_blank" rel="noopener noreferrer">#12658</a></p></li><li><p>修复了出现 -238错误时 BE 节点可能 OOM 的问题。 <a href="https://github.com/apache/doris/pull/12666" target="_blank" rel="noopener noreferrer">#12666</a></p></li><li><p>修复了 LEAD() 函数错误子表达式的问题。 <a href="https://github.com/apache/doris/pull/12587" target="_blank" rel="noopener noreferrer">#12587</a></p></li><li><p>修复了行存代码中相关查询失败的问题。 <a href="https://github.com/apache/doris/pull/12712" target="_blank" rel="noopener noreferrer">#12712</a></p></li><li><p>修复了 curdate()/current_date() 函数产生错误结果的问题。 <a href="https://github.com/apache/doris/pull/12720" target="_blank" rel="noopener noreferrer">#12720</a></p></li><li><p>修复了 lateral View explode_split 函数出现错误结果的问题。 <a href="https://github.com/apache/doris/pull/13643" target="_blank" rel="noopener noreferrer">#13643</a></p></li><li><p>修复了两张相同表中 Bucket Shuffle Join 计划错误的问题。 <a href="https://github.com/apache/doris/pull/12930" target="_blank" rel="noopener noreferrer">#12930</a></p></li><li><p>修复了更新或导入过程中 Tablet 版本可能错误的问题。 <a href="https://github.com/apache/doris/pull/13070" target="_blank" rel="noopener noreferrer">#13070</a></p></li><li><p>修复了在加密函数下使用 Broker 导入数据时 BE 可能发生 Core 的问题。 <a href="https://github.com/apache/doris/pull/13009" target="_blank" rel="noopener noreferrer">#13009</a></p></li></ul><h1>升级说明</h1><p>默认情况下禁用 PageCache 和 ChunkAllocator 以减少内存使用，用户可以通过修改配置项 <code>disable_storage_page_cache</code> 和 <code>chunk_reserved_bytes_limit</code> 来重新启用。</p><p>Storage Page Cache 和 Chunk Allocator 分别缓存用户数据块和内存预分配。</p><p>这两个功能会占用一定比例的内存，并且不会释放。 这部分内存占用无法灵活调配，导致在某些场景下，因这部分内存占用而导致其他任务内存不足，影响系统稳定性和可用性。因此我们在 1.1.3 版本中默认关闭了这两个功能。</p><p>但在某些延迟敏感的报表场景下，关闭该功能可能会导致查询延迟增加。如用户担心升级后该功能对业务造成影响，可以通过在 be.conf 中增加以下参数以保持和之前版本行为一致。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">disable_storage_page_cache=false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chunk_reserved_bytes_limit=10%</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>disable_storage_page_cache</code>：是否关闭 Storage Page Cache。 1.1.2（含）之前的版本，默认是false，即打开。1.1.3 版本默认为 true，即关闭。</li><li><code>chunk_reserved_bytes_limit</code>：Chunk allocator 预留内存大小。1.1.2（含）之前的版本，默认是整体内存的 10%。1.1.3 版本默认为 209715200（200MB）。</li></ul>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris 1.1.2 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-1.1.2</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-1.1.2"/>
        <updated>2022-09-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>在 Apache Doris 1.1.2 版本中，我们引入了新的 Memtracker、极大程度上避免 OOM 类问题的发生，提升了向量化执行引擎在多数查询场景的性能表现，修复了诸多导致 BE 和 FE 发生异常的问题，优化了在湖仓联邦查询场景的部分体验问题并提升访问外部数据的性能。</p><p>相较于 1.1.1 版本，在 1.1.2 版本中有超过 170 个 Issue 和性能优化项被合入，系统稳定性和性能都得到进一步加强。与此同时，1.1.2 版本还将作为 Apache Doris 首个 LTS （Long-term Support）长周期支持版本，后续长期维护和支持，推荐所有用户下载和升级。</p><h1>新增功能</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="memtracker">MemTracker<a href="#memtracker" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>MemTracker 是一个用于分析内存使用情况的统计工具，在 1.1.1 版本中我们引入了简易版 Memtracker 用以控制 BE 侧内存。在 1.1.2 版本中，我们引入了新的 MemTracker，在向量化执行引擎和非向量化执行引擎中都更为准确。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增加展示和取消正在执行-query-的-api">增加展示和取消正在执行 Query 的 API<a href="#增加展示和取消正在执行-query-的-api" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><code>GET /rest/v2/manager/query/current_queries</code></p><p><code>GET /rest/v2/manager/query/kill/{query_id}</code></p><p>具体使用参考文档 <a href="https://doris.apache.org/zh-CN/docs/dev/admin-manual/http-actions/fe/manager/query-profile-action?_highlight=current&amp;_highlight=query#request" target="_blank" rel="noopener noreferrer">Query Profile Action</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持读写-emoji-表情通过-odbc-外表">支持读写 Emoji 表情通过 ODBC 外表<a href="#支持读写-emoji-表情通过-odbc-外表" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h1>优化改进</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据湖相关改进">数据湖相关改进<a href="#数据湖相关改进" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>扫描 HDFS ORC 文件时性能提升约 300%。<a href="https://github.com/apache/doris/pull/11501" target="_blank" rel="noopener noreferrer">#11501</a></p></li><li><p>查询 Iceberg 表支持 HDFS 的 HA 模式。</p></li><li><p>支持查询由 <a href="https://tez.apache.org/" target="_blank" rel="noopener noreferrer">Apache Tez</a> 创建的 Hive 数据</p></li><li><p>添加阿里云 OSS 作为 Hive 外部支持</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="在-spark-load-中增加对-string-字符串类型和-text-文本类型的支持">在 Spark Load 中增加对 String 字符串类型和 Text 文本类型的支持<a href="#在-spark-load-中增加对-string-字符串类型和-text-文本类型的支持" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="在非向量化引擎支持复用-block在某些场景中有-50性能提升11392">在非向量化引擎支持复用 Block，在某些场景中有 50%性能提升。<a href="https://github.com/apache/doris/pull/11392" target="_blank" rel="noopener noreferrer">#11392</a><a href="#在非向量化引擎支持复用-block在某些场景中有-50性能提升11392" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="提升-like-和正则表达式的性能">提升 Like 和正则表达式的性能<a href="#提升-like-和正则表达式的性能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="禁用-tcmalloc-的-aggressive_memory_decommit">禁用 TCMalloc 的 aggressive_memory_decommit。<a href="#禁用-tcmalloc-的-aggressive_memory_decommit" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在查询或导入时将会有 40% 性能提升，也可以在配置文件中通过 <code>tc_enable_aggressive_memory_decommit</code>来修改</p><h1>Bug Fix</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复部分可能导致-fe-失败或者数据损坏的问题">修复部分可能导致 FE 失败或者数据损坏的问题<a href="#修复部分可能导致-fe-失败或者数据损坏的问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>在 HA 环境中，BDBJE 将保留尽可能多的文件，通过增加配置 <code>bdbje_reserved_disk_bytes </code>以避免产生太多的 BDBJE 文件，BDBJE 日志只有在接近磁盘限制时才会删除。</p></li><li><p>修复了 BDBJE 中的重要错误，该错误将导致 FE 副本无法正确启动或数据损坏。</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复-fe-在查询过程中会在-waitfor_rpc-上-hang-住以及-be-在高并发情况下会-hang-住的问题">修复 FE 在查询过程中会在 waitFor_rpc 上 Hang 住以及 BE 在高并发情况下会 Hang 住的问题。<a href="#修复-fe-在查询过程中会在-waitfor_rpc-上-hang-住以及-be-在高并发情况下会-hang-住的问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><a href="https://github.com/apache/doris/pull/12459" target="_blank" rel="noopener noreferrer">#12459</a> <a href="https://github.com/apache/doris/pull/12458" target="_blank" rel="noopener noreferrer">#12458</a> <a href="https://github.com/apache/doris/pull/12392" target="_blank" rel="noopener noreferrer">#12392</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复向量化执行引擎查询时得到错误结果的问题">修复向量化执行引擎查询时得到错误结果的问题。<a href="#修复向量化执行引擎查询时得到错误结果的问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><a href="https://github.com/apache/doris/pull/11754" target="_blank" rel="noopener noreferrer">#11754</a> <a href="https://github.com/apache/doris/pull/11694" target="_blank" rel="noopener noreferrer">#11694</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复许多-planner-导致-be-core-或者处于不正常状态的问题">修复许多 Planner 导致 BE Core 或者处于不正常状态的问题。<a href="#修复许多-planner-导致-be-core-或者处于不正常状态的问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><a href="https://github.com/apache/doris/pull/12080" target="_blank" rel="noopener noreferrer">#12080</a> <a href="https://github.com/apache/doris/pull/12075" target="_blank" rel="noopener noreferrer">#12075</a> <a href="https://github.com/apache/doris/pull/12040" target="_blank" rel="noopener noreferrer">#12040</a> <a href="https://github.com/apache/doris/pull/12003" target="_blank" rel="noopener noreferrer">#12003</a> <a href="https://github.com/apache/doris/pull/12007" target="_blank" rel="noopener noreferrer">#12007</a> <a href="https://github.com/apache/doris/pull/11971" target="_blank" rel="noopener noreferrer">#11971</a> <a href="https://github.com/apache/doris/pull/11933" target="_blank" rel="noopener noreferrer">#11933</a> <a href="https://github.com/apache/doris/pull/11861" target="_blank" rel="noopener noreferrer">#11861</a> <a href="https://github.com/apache/doris/pull/11859" target="_blank" rel="noopener noreferrer">#11859</a> <a href="https://github.com/apache/doris/pull/11855" target="_blank" rel="noopener noreferrer">#11855</a> <a href="https://github.com/apache/doris/pull/11837" target="_blank" rel="noopener noreferrer">#11837</a> <a href="https://github.com/apache/doris/pull/11834" target="_blank" rel="noopener noreferrer">#11834</a> <a href="https://github.com/apache/doris/pull/11821" target="_blank" rel="noopener noreferrer">#11821</a> <a href="https://github.com/apache/doris/pull/11782" target="_blank" rel="noopener noreferrer">#11782</a> <a href="https://github.com/apache/doris/pull/11723" target="_blank" rel="noopener noreferrer">#11723</a> <a href="https://github.com/apache/doris/pull/11569" target="_blank" rel="noopener noreferrer">#11569</a></p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Doris Stream Load原理解析]]></title>
        <id>https://doris.apache.org/zh-CN/blog/principle-of-Doris-Stream-Load</id>
        <link href="https://doris.apache.org/zh-CN/blog/principle-of-Doris-Stream-Load"/>
        <updated>2022-09-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读：</strong></p><p>Stream Load是Doris用户最常用的数据导入方式之一，它是一种同步的导入方式, 允许用户通过Http访问的方式批量地将数据导入Doris，并返回数据导入的结果。用户可以直接通过Http请求的返回体判断数据导入是否成功，也可以通过在客户端执行查询SQL来查询历史任务的结果。</p><h1><strong>Stream Load简介</strong></h1><p>Doris的导入（Load）功能就是将用户的原始数据导入到 Doris表中。Doris底层实现了统一的流式导入框架，在这个框架之上，Doris提供了非常丰富的导入方式以适应不同的数据源和数据导入需求。Stream Load是Doris用户最常用的数据导入方式之一，它是一种同步的导入方式, 允许用户通过Http访问的方式批量地将CSV格式或JSON格式的数据导入Doris，并返回数据导入的结果。用户可以直接通过Http请求的返回体判断数据导入是否成功，也可以通过在客户端执行查询SQL来查询历史任务的结果。另外，Doris还为Stream Load提供了操作审计功能，可以通过审计日志对历史的Stream Load任务信息进行审计。本文将从Stream Load的执行流程、事务管理、导入计划的执行、数据写入以及操作审计等方面对Stream Load的实现原理进行深入地解析。</p><h1>1 <strong>执行流程</strong></h1><p>用户将Stream Load的Http请求提交给FE，FE会通过 Http 重定向（Redirect）将数据导入请求转发给某一个BE节点，该BE节点将作为本次Stream Load任务的Coordinator。在这个过程中，接收请求的FE节点仅仅提供转发服务，由作为 Coordinator的BE节点实际负责整个导入作业，比如负责向Master FE发送事务请求、从FE获取导入执行计划、接收实时数据、分发数据到其他Executor BE节点以及数据导入结束后返回结果给用户。用户也可以将Stream Load的Http请求直接提交给某一个指定的BE节点，并由该节点作为本次Stream Load任务的Coordinator。在Stream Load过程中，Executor BE节点负责将数据写入存储层。</p><p>在Coordinator BE中，通过一个线程池来处理所有的Http请求，其中包括Stream Load请求。一次Stream Load任务通过导入的Label唯一标识。Stream Load的原理框图如图1所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_1_en-b2fe685555585338cf6207b8d24a878e.png" width="1080" height="1044" class="img_ev3q"></p><p>Stream Load完整执行流程如图2所示：</p><p>(1)用户提交Stream Load的Http请求到FE（用户也可以直接提交Stream Load的Http请求到Coordinator BE）。</p><p>(2)FE接收到用户提交的Stream Load请求后，会进行Http的Header解析（其中包括解析数据导入的库、表、Label等信息），然后进行用户鉴权。如果Http的Header解析成功并且用户鉴权通过，FE会将Stream Load的Http请求转发到一台BE节点，该BE节点将作为本次Stream Load的Coordinator；否则，FE会直接向用户返回Stream Load的失败信息。</p><p>(3)Coordinator BE接收到Stream Load的Http请求后，会首先进行Http的Header解析和数据校验，其中包括解析数据的文件格式、数据body的大小、Http超时时间、进行用户鉴权等。如果Header数据校验失败，会直接向用户返回Stream Load的失败信息。</p><p>(4)Http Header数据校验通过之后，Coordinator BE会通过Thrift RPC向FE发送Begin Transaction的请求。</p><p>(5)FE收到Coordinator BE发送的Begin Transaction的请求之后，会开启一个事务，并向Coordinator BE返回Transaction Id。</p><p>(6)Coordinator BE收到Begin Transaction成功信息之后，会通过Thrift RPC向 FE发送获取导入计划的请求。</p><p>(7)FE收到Coordinator BE发送的获取导入计划的请求之后，会为Stream Load任务生成导入计划，并返回给Coordinator BE。</p><p>(8)Coordinator BE接收到导入计划之后，开始执行导入计划，其中包括接收Http传来的实时数据以及将实时数据通过BRPC分发到其他Executor BE。</p><p>(9)Executor BE接收到Coordinator BE分发的实时数据之后，负责将数据写入存储层。</p><p>(10)Executor BE完成数据写入之后，Coordinator BE通过Thrift RPC 向FE发送Commit Transaction的请求。</p><p>(11)FE收到Coordinator BE发送的Commit Transaction的请求之后，会对事务进行提交， 并向Executor BE发送 Publish Version的任务，同时等待Executor BE执行Publish Version完成。</p><p>(12)Executor BE异步执行Publish Version，将数据导入生成的Rowset变为可见数据版本。</p><p>(13)Publish Version正常完成或执行超时之后，FE向Coordinator BE返回Commit Transaction和Publish Version的结果。</p><p>(14)Coordinator BE向用户返回Stream Load的最终结果。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_2_en-c2ea39e56fb64fa30ef649c281ee5e67.png" width="1068" height="1461" class="img_ev3q"></p><h1>2 事务管理</h1><p>Doris通过事务（Transaction）来保证数据导入的原子性，一次Stream Load任务对应一个事务。Stream Load的事务管理由FE负责，FE通过FrontendService接收Coordinator BE节点发送来的Thrift RPC事务请求，事务请求类型包括Begin Transaction、Commit Transaction和Rollback Transaction。Doris的事务状态包括：PREPARE、COMMITTED、VISIBLE和ABORTED。Stream Load事务的状态流转过程如图3所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_3_en-afe100ea9995f8032cf312bb75825028.png" width="1080" height="165" class="img_ev3q"></p><p>数据导入开始之前，Coordinator BE节点会向FE发送Begin Transaction请求，FE会检查本次Begin Transaction请求的label是否已经存在，如果label在系统中不存在，则会为当前label开启一个新的事务，并为事务分配Transaction Id，同时将事务状态设置为PREPARE，然后将Transaction Id以及Begin Transaction成功的信息返回给Coordinator BE；否则，本次事务可能是一次重复的数据导入，FE向Coordinator BE返回Begin Transaction失败的信息，Stream Load任务退出。</p><p>当数据在所有Executor BE节点完成写入之后，Coordinator BE节点会向FE发送Commit Transaction请求，FE收到Commit Transaction请求之后会执行Commit Transaction以及Publish Version两个操作。首先，FE会判断每一个Tablet成功写入数据的副本数量是否超过了Tablet副本总数的一半，如果每一个Tablet成功写入数据的副本数量都超过Tablet副本总数的一半（多数成功），则Commit Transaction成功，并将事务状态设置为COMMITTED；否则，向Coordinator BE返回Commit Transaction失败的信息。COMMITTED状态表示数据已经成功写入，但是数据还不可见，需要继续执行Publish Version任务，此后，事务不可被回滚。</p><p>FE会有一个单独的线程对Commit成功的Transaction执行Publish Version，FE执行Publish Version时会通过Thrift RPC向Transaction相关的所有Executor BE节点下发Publish Version请求，Publish Version任务在各个Executor BE节点异步执行，将数据导入生成的Rowset变为可见的数据版本。当Executor BE上所有的Publish Version任务执行成功，FE会将事务状态设置为VISIBLE，并向Coordinator BE返回Commit Transaction以及Publish Version成功的信息。如果存在某些Publish Version任务失败，FE会向Executor BE节点重复下发Publish Version请求直到之前失败的Publish Version任务成功。如果在一定超时时间之后，事务状态还没有被设置为VISIBLE，FE就会向Coordinator BE返回Commit Transaction成功但Publish Version超时的信息（注意，此时数据依然是写入成功的，只是还处于不可见状态，用户需要等待事务状态最终变为VISIBLE）。</p><p>当从FE获取导入计划失败、执行数据导入失败或Commit Transaction失败时，Coordinator BE节点会向FE发送Rollback Transaction请求，执行事务回滚。FE收到事务回滚的请求之后，会将事务的状态设置为ABORTED，并通过Thrift RPC向Executor BE发送Clear Transaction的请求，Clear Transaction任务在BE节点异步执行，将数据导入生成的Rowset标记为不可用，这些Rowset在之后会从BE上被删除。状态为COMMITTED的事务（Commit Transaction成功但Publish Version超时的事务）不能被回滚。</p><h1>3 导入计划的执行</h1><p>在Doris的BE中，所有执行计划由FragmentMgr管理，每一个导入计划的执行由PlanFragmentExecutor负责。BE从FE获取到导入执行计划之后，会将导入计划提交到FragmentMgr的线程池执行。Stream Load 的导入执行计划只有一个Fragment， 其中包含一个BrokerScanNode 和 一个 OlapTableSink。BrokerScanNode负责实时读取流式数据，并将 CSV 格式或JSON格式的数据行转为 Doris 的Tuple格式；OlapTableSink 负责将实时数据发送到对应的Executor BE节点，每个数据行对应哪个Executor BE节点是由数据行所在的Tablet存储在哪些BE上决定的，可以根据数据行的 PartitionKey和DistributionKey确定该行数据所在的Partition和Tablet，每个Tablet及其副本存储在哪台BE节点上是在Table或Partition创建时就已经确定的。</p><p>导入执行计划提交到FragmentMgr的线程池之后，Stream Load线程会按块（chunk）接收通过Http传输的实时数据并写入StreamLoadPipe中，BrokerScanNode会从StreamLoadPipe中批量读取实时数据，OlapTableSink会将BrokerScanNode读取的批量数据通过BRPC发送到Executor BE进行数据写入。所有实时数据都写入StreamLoadPipe之后，Stream Load线程会等待导入计划执行结束。</p><p>PlanFragmentExecutor执行一个具体的导入计划过程由Prepare、Open和Close三个阶段组成。在Prepare阶段，主要对来自FE的导入执行计划进行解析；在Open阶段，会打开BrokerScanNode和OlapTableSink，BrokerScanNode负责每次读取一个Batch的实时数据，OlapTableSink负责调用BRPC将每一个Batch的数据发送到其他Executor BE节点；在Close阶段，负责等待数据导入结束，并关闭BrokerScanNode和OlapTableSink。Stream Load的导入执行计划如图4所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_4_en-6bf14a31ea5acff82e83e5745a3603aa.png" width="1080" height="888" class="img_ev3q"></p><p>OlapTableSink负责Stream Load任务的数据分发。Doris中的Table可能会有Rollup或物化视图，每一个Table及其Rollup、物化视图都称为一个Index。数据分发过程中，IndexChannel会维护一个Index的数据分发通道，Index下的Tablet可能会有多个副本（Replica），并分布在不同的BE节点上，NodeChannel会在IndexChannel下维护一个Executor BE节点的数据分发通道，因此，OlapTableSink下包含多个IndexChannel，每一个IndexChannel下包含多个NodeChannel，如图5所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_5_en-f040fee94a651a88a2a3ef68de235532.png" width="1080" height="471" class="img_ev3q"></p><p>OlapTableSink分发数据时，会逐行读取BrokerScanNode获取到的数据Batch，并将数据行添加到每一个Index的IndexChannel中。可以根据 PartitionKey和DistributionKey确定数据行所在的Partition和Tablet，进而根据Tablet在Partition中的顺序计算出数据行在其他Index中对应的Tablet。每一个Tablet可能会有多个副本，并分布在不同的BE节点上，因此，在IndexChannel中会将每一个数据行添加到其所在Tablet的每一个副本对应的NodeChannel中。每一个NodeChannel中都会有一个发送队列，当NodeChannel中新增的数据行累积到一定的大小就会作为一个数据Batch被添加到发送队列中。OlapTableSink中会有一个固定的线程依次轮训每一个IndexChannel下的每一个NodeChannel，并调用BRPC将发送队列中的一个数据Batch发送到对应的Executor BE上。Stream Load任务的数据分发过程如图6所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_6_en-20cfadfbbb14b377e4a0debd6ef0bb1b.png" width="1080" height="850" class="img_ev3q"></p><h1>4 <strong>数据写入</strong></h1><p>Executor BE的BRPC server接收到Coordinator BE发送来的数据Batch之后，会将数据写入任务提交到线程池来异步执行。在Doris的BE中，数据采用分层的方式写入存储层，每一个Stream Load任务在每个Executor BE上都对应一个LoadChannel，LoadChannel维护一次Stream Load任务的数据写入通道，负责一次Stream Load任务在当前Executor BE节点的数据写入，LoadChannel可以将一次Stream Load任务在当前BE节点的数据分批写入存储层，直到Stream Load任务完成。每一个LoadChannel由Load Id唯一标识，BE节点上的所有LoadChannel由LoadChannelMgr进行管理。一次Stream Load任务对应的Table可能会有多个Index，每一个Index对应一个TabletsChannel，由Index Id唯一标识，因此，每一个LoadChannel下会有多个TabletsChannel。TabletsChannel维护一个Index的数据写入通道，负责管理Index下所有Tablet的数据写入，TabletsChannel会逐行读取数据Batch并通过DeltaWriter写入对应的Tablet中。DeltaWriter维护一个Tablet的数据写入通道，由Tablet Id唯一标识，负责接收单个Tablet的数据导入，并将数据写入Tablet对应的MemTable中，当MemTable写满之后，会将MemTable里的数据刷写（Flush）到磁盘并生成一个个Segment文件。MemTable采用SkipList的数据结构，将数据暂时保存在内存中，SkipList会按照Schema的Key对数据行进行排序，另外，如果数据模型为Aggregate或Unique，MemTable会对具有相同Key的数据行进行聚合。Stream Load任务的数据写入通道如图7所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_7_en-757ccfec5d94537f5e85cc8026cc0d4a.png" width="1080" height="656" class="img_ev3q"></p><p>MemTable的刷写操作由MemtableFlushExecutor异步执行，当MemTable的刷写任务提交到线程池之后，会生成一个新的MemTable来接收当前Tablet的后续数据写入。MemtableFlushExecutor执行数据刷写时，RowsetWriter会读出MemTable中的所有数据，并通过SegmentWriter刷写出多个Segment文件，每个Segment文件大小不超过256MB。对于一个Tablet，每次Stream Load任务都会生成一个新的Rowset，生成的Rowset中可以包含多个Segment文件。Stream Load任务的数据写入过程如图8所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_8_en-11db5419d6ebd287d1abcb254fd174f0.png" width="1073" height="1280" class="img_ev3q"></p><p>Executor BE节点上的TxnManager负责Tablet级别数据导入的事务管理，DeltaWriter初始化时，会执行Prepare Transaction将对应Tablet在本次Stream Load任务中的数据写入事务添加到TxnManager中进行管理；数据写入Tablet完成并关闭DeltaWriter时，会执行Commit Transaction将数据导入生成的新的Rowset添加到TxnManager中进行管理。注意，这里的TxnManager只是负责单个BE上的事务，而FE中的事务管理是负责整体导入事务的。</p><p>数据导入结束之后，Executor BE执行FE下发的Publish  Version任务时，会执行Publish Transaction将数据导入生成的新的Rowset变为可见版本，并从TxnManager中将对应Tablet在本次Stream Load任务中的数据写入事务删除，这意味着Tablet在本次Stream Load任务中的数据写入事务结束。</p><h1>5 <strong>Stream Load操作审计</strong></h1><p>Doris为Stream Load增加了操作审计功能，每一次Stream Load任务结束并将结果返回给用户之后，Coordinator BE会将本次Stream Load任务的详细信息持久化地存储在本地RocksDB上。Master FE定时地通过Thrift RPC从集群的各个BE节点上拉取已经结束的Stream Load任务的信息，每次从一个BE节点上拉取一个批次的Stream Load操作记录，并将拉取到的Stream Load任务信息写入审计日志（fe.audit.log）中。存储在BE上的每一条Stream Load任务信息会设有过期时间（TTL），RocksDB执行Compaction时会将过期的Stream Load任务信息进行删除。用户可以通过FE的审计日志对历史的Stream Load任务信息进行审计。</p><p>FE将拉取的Stream Load任务信息写入Audit日志的同时，会在内存中保留一份。为防止内存膨胀，内存中会保留固定数量的Stream Load任务的信息，随着后续拉取数据地持续进行，会从FE内存中逐渐淘汰掉早期的Stream Load任务信息。用户可以通过客户端执行SHOW STREAM LOAD命令来查询最近的Stream Load任务信息。</p><h1>总结</h1><p>本文从Stream Load的执行流程、事务管理、导入计划的执行、数据写入以及操作审计等方面对Stream Load的实现原理进行了深入地解析。Stream Load是Doris用户最常用的数据导入方式之一，它是一种同步的导入方式, 允许用户通过Http访问的方式批量地将数据导入Doris，并返回数据导入的结果。用户可以直接通过Http请求的返回体判断数据导入是否成功，也可以通过在客户端执行查询SQL来查询历史任务的结果。另外，Doris还为Stream Load提供了结果审计功能，可以通过审计日志对历史的Stream Load任务信息进行审计。</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Doris全面解析：Doris SQL 原理解析]]></title>
        <id>https://doris.apache.org/zh-CN/blog/principle-of-Doris-SQL-parsing</id>
        <link href="https://doris.apache.org/zh-CN/blog/principle-of-Doris-SQL-parsing"/>
        <updated>2022-08-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读：</strong>
本文主要介绍了Doris SQL解析的原理。</p><p>重点讲述了生成单机逻辑计划，生成分布式逻辑计划，生成分布式物理计划的过程。对应于代码实现是Analyze，SinglePlan，DistributedPlan，Schedule四个部分。</p><p>Analyze负责对AST进行前期的一些处理，SinglePlan根据AST进行优化生成单机查询计划，DistributedPlan将单机的查询计划拆成分布式的查询计划，Schedule阶段负责决定查询计划下发到哪些机器上执行。</p><p>由于SQL类型有很多，本文侧重介绍查询SQL的解析，从算法原理和代码实现上深入讲解了Doris的SQL解析原理。</p><h1>1 Doris简介</h1><p>Doris是基于MPP架构的交互式SQL数据仓库，主要用于解决近实时的报表和多维分析。</p><p>Doris分成两部分FE和BE，FE 负责存储以及维护集群元数据、接收、解析、查询、设计规划整体查询流程，BE 负责数据存储和具体的实施过程。</p><p>在 Doris 的存储引擎中，用户数据被水平划分为若干个数据分片（Tablet，也称作数据分桶）。每个 Tablet 包含若干数据行。多个 Tablet 在逻辑上归属于不同的分区Partition。一个 Tablet 只属于一个 Partition。而一个 Partition 包含若干个 Tablet。Tablet 是数据移动、复制等操作的最小物理存储单元。</p><h1>2 SQL解析简介</h1><p>SQL解析在这篇文章中指的是<strong>将一条sql语句经过一系列的解析最后生成一个完整的物理执行计划的过程</strong>。</p><p>这个过程包括以下四个步骤：词法分析，语法分析，生成逻辑计划，生成物理计划。 如图1所示：</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_1_cn-40a07911a7de6d2ea4a4fe09ef5150dd.png" width="1080" height="446" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="21-词法分析">2.1 词法分析<a href="#21-词法分析" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>词法分析主要负责将字符串形式的sql识别成一个个token，为语法分析做准备。</p><div class="language-undefined codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-undefined codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">select ......  from ...... where ....... group by ..... order by ......</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SQL 的 Token 可以分为如下几类：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">￮ 关键字（select、from、where）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">￮ 操作符（+、-、&gt;=）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">￮ 开闭合标志（(、CASE）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">￮ 占位符（?）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">￮ 注释</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">￮ 空格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">......</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="22-语法分析">2.2 语法分析<a href="#22-语法分析" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>语法分析主要负责根据语法规则，将词法分析生成的token转成抽象语法树（Abstract Syntax Tree），如图2所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_2_cn-a6c0ccfee6ceab8bc0833a1ff300311f.png" width="1080" height="473" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="23-逻辑计划">2.3 逻辑计划<a href="#23-逻辑计划" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>逻辑计划负责将抽象语法树转成代数关系。代数关系是一棵算子树，每个节点代表一种对数据的计算方式，整棵树代表了数据的计算方式以及流动方向，如图3所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_3_cn-7a6ac1b525922fce20195f2224d176ad.png" width="573" height="893" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="24-物理计划">2.4 物理计划<a href="#24-物理计划" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>物理计划是在逻辑计划的基础上，根据机器的分布，数据的分布，决定去哪些机器上执行哪些计算操作。</p><p>Doris系统的SQL解析也是采用这些步骤，只不过根据Doris系统结构的特点和数据的存储方式，进行了细化和优化，最大化发挥机器的计算能力。</p><h1>3 设计目标</h1><p>Doris SQL解析架构的设计有以下目标：</p><ol><li><p>最大化计算的并行性</p></li><li><p>最小化数据的网络传输</p></li><li><p>最大化减少需要扫描的数据</p></li></ol><h1>4 总体架构</h1><p>Doris SQL解析具体包括了五个步骤：词法分析，语法分析，生成单机逻辑计划，生成分布式逻辑计划，生成物理执行计划。</p><p>具体代码实现上包含以下五个步骤：Parse, Analyze, SinglePlan, DistributedPlan, Schedule。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_4_cn-f9b7dc9188c57e7edf593b075148b8a5.png" width="1080" height="1682" class="img_ev3q"></p><p>如图4所示，Parse阶段本文不详细讲，Analyze负责对AST进行前期的一些处理，SinglePlan根据AST进行优化生成单机查询计划，DistributedPlan将单机的查询计划拆成分布式的查询计划，Schedule阶段负责决定查询计划下发到哪些机器上执行。</p><p><strong>由于SQL类型有很多，本文侧重介绍查询SQL的解析。</strong></p><p>图5展示了一个简单的查询SQL在Doris的解析实现</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_5_cn-c3d2f2f05d9a0a1c5a095f487bb20081.png" width="1080" height="1344" class="img_ev3q"></p><h1>5 Parse阶段</h1><p>词法分析采用jflex技术，语法分析采用java cup parser技术，最后生成抽象语法树（Abstract Syntax Tree）AST，这些都是现有的、成熟的技术，在这里不进行详细介绍。</p><p>AST是一种树状结构，代表着一条SQL。不同类型的查询select, insert, show, set, alter table, create table等经过Parse阶段后生成不同的数据结构（SelectStmt, InsertStmt, ShowStmt, SetStmt, AlterStmt, AlterTableStmt, CreateTableStmt等），但他们都继承自Statement，并根据自己的语法规则进行一些特定的处理。例如：对于select类型的sql， Parse之后生成了SelectStmt结构。</p><p>SelectStmt结构包含了SelectList，FromClause，WhereClause，GroupByClause，SortInfo等结构。这些结构又包含了更基础的一些数据结构，如WhereClause包含了BetweenPredicate（between表达式）, BinaryPredicate（二元表达式）， CompoundPredicate（and or组合表达式）, InPredicate（in表达式）等。</p><p>AST中所有结构都是由基本结构表达式Expr通过多种组合而成，如图6所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_6_cn-39088e65b97c95938d6cf9c1aba359e8.png" width="1080" height="718" class="img_ev3q"></p><h1>6 Analyze阶段</h1><p>Analyze主要是对Parse阶段生成的抽象语法树AST进行一些前期的处理和语义分析，为生成单机逻辑计划做准备。</p><p>抽象语法树是由StatementBase这个抽象类表示。这个抽象类包含一个最重要的成员函数analyze()，用来执行Analyze阶段要做的事。</p><p>不同类型的查询select, insert, show, set, alter table, create table等经过Parse阶段后生成不同的数据结构（SelectStmt, InsertStmt, ShowStmt, SetStmt, AlterStmt, AlterTableStmt, CreateTableStmt等），这些数据结构继承自StatementBase，并实现analyze()函数，对特定类型的SQL进行特定的Analyze。</p><p>例如：select类型的查询，会转成对select sql的子语句SelectList, FromClause, GroupByClause, HavingClause, WhereClause, SortInfo等的analyze()。然后这些子语句再各自对自己的子结构进行进一步的analyze()，通过层层迭代，把各种类型的sql的各种情景都分析完毕。例如：WhereClause进一步分析其包含的BetweenPredicate（between表达式）, BinaryPredicate（二元表达式）， CompoundPredicate（and or组合表达式）, InPredicate（in表达式）等。</p><p><strong>对于查询类型的SQL，包含以下几项重要工作：</strong></p><ul><li><p><strong>元信息的识别和解析</strong>：识别和解析sql中涉及的 Cluster, Database, Table, Column 等元信息，确定需要对哪个集群的哪个数据库的哪些表的哪些列进行计算。</p></li><li><p><strong>SQL 的合法性检查</strong>：窗口函数不能 DISTINCT，投影列是否有歧义，where语句中不能含有grouping操作等。</p></li><li><p><strong>SQL 简单重写</strong>：比如将 select * 扩展成 select 所有列，count distinct转成bitmap或者hll函数等。</p></li><li><p><strong>函数处理</strong>：检查sql中包含的函数和系统定义的函数是否一致，包括参数类型，参数个数等。</p></li><li><p><strong>Table 和 Column 的别名处理</strong></p></li><li><p><strong>类型检查和转换</strong>：例如二元表达式两边的类型不一致时，需要对其中一个类型进行转换（BIGINT 和 DECIMAL 比较，BIGINT 类型需要 Cast 成 DECIMAL）。</p></li></ul><p>对AST 进行analyze后，会再进行一次rewrite操作，进行精简或者是转成统一的处理方式。目前rewrite的算法是基于规则的方式，针对AST的树状结构，自底向上，应用每一条规则进行重写。如果重写后，AST有变化，则再次进行analyze和rewrite，直到AST无变化为止。</p><p>例如：常量表达式的化简：1 + 1 + 1 重写成 3，1 &gt; 2 重写成 Flase 等。将一些语句转成统一的处理方式，比如将 where in, where exists 重写成 semi join, where not in, where not exists 重写成 anti join。</p><h1>7 生成单机逻辑Plan阶段</h1><p>这部分工作主要是根据AST抽象语法树生成代数关系，也就是俗称的算子数。树上的每个节点都是一个算子，代表着一种操作。</p><p>如图7所示，ScanNode代表着对一个表的扫描操作，将一个表的数据读出来。HashJoinNode代表着join操作，小表在内存中构建哈希表，遍历大表找到连接键相同的值。Project表示投影操作，代表着最后需要输出的列，图7表示只用输出citycode这一列。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_7_cn-3b659a292f7c875ca9651197305c47ab.png" width="1080" height="543" class="img_ev3q"></p><p>如果不进行优化，生成的关系代数下发到存储中执行的代价非常高。</p><p>对于查询：</p><div class="language-undefined codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-undefined codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">select a.siteid, a.pv from table1 a join table2 b on a.siteid = b.siteid where a.citycode=122216 and b.username="test" order by a.pv limit 10</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>未优化的关系代数，如图8所示，需要将所有列读出来进行一系列的计算，在最后选择输出siteid, pv两列，大量无用的列数据浪费了计算资源。</p><p>Doris在生成代数关系时，进行了大量的优化，将投影列和查询条件尽可能放到扫描操作时执行。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_8_cn-021b337867f379cc036dfbe34f5fe9f8.png" width="500" height="1110" class="img_ev3q"></p><p><strong>具体来说这个阶段主要做了如下几项工作：</strong></p><ul><li><p><strong>Slot 物化</strong>：指确定一个表达式对应的列需要 Scan 和计算，比如聚合节点的聚合函数表达式和 Group By 表达式需要进行物化。</p></li><li><p><strong>投影下推</strong>：BE 在 Scan 时只会 Scan 必须读取的列。</p></li><li><p><strong>谓词下推</strong>：在满足语义正确的前提下将过滤条件尽可能下推到 Scan 节点。</p></li><li><p><strong>分区，分桶裁剪</strong>：根据过滤条件中的信息，确定需要扫描哪些分区，哪些桶的tablet。</p></li><li><p><strong>Join Reorder</strong>：对于 Inner Join, Doris 会根据行数调整表的顺序，将大表放在前面。</p></li><li><p><strong>Sort + Limit 优化成 TopN</strong>：对于order by limit语句会转换成TopN的操作节点，方便统一处理。</p></li><li><p><strong>MaterializedView 选择</strong>：会根据查询需要的列，过滤，排序和 Join 的列，行数，列数等因素选择最佳的物化视图。</p></li></ul><p>图9展示了优化的示例，Doris是在生成关系代数的过程中优化，边生成边优化。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_9_cn-cceafd6d3dd41c1765b4dbbf3ce047e1.png" width="1080" height="290" class="img_ev3q"></p><h1>8 生成分布式Plan阶段</h1><p>有了单机的PlanNode树之后，就需要进一步根据分布式环境，拆成分布式PlanFragment树（PlanFragment用来表示独立的执行单元），毕竟一个表的数据分散地存储在多台主机上，完全可以让一些计算并行起来。</p><p>这个步骤的主要目标是最大化并行度和数据本地化。主要方法是将能够并行执行的节点拆分出去单独建立一个PlanFragment，用ExchangeNode代替被拆分出去的节点，用来接收数据。拆分出去的节点增加一个DataSinkNode，用来将计算之后的数据传送到ExchangeNode中，做进一步的处理。</p><p>这一步采用递归的方法，自底向上，遍历整个PlanNode树，然后给树上的每个叶子节点创建一个PlanFragment，如果碰到父节点，则考虑将其中能够并行执行的子节点拆分出去，父节点和保留下来的子节点组成一个parent PlanFragment。拆分出去的子节点增加一个父节点DataSinkNode组成一个child PlanFragment，child PlanFragment指向parent PlanFragment。这样就确定了数据的流动方向。</p><p>对于查询操作来说，join操作是最常见的一种操作。</p><p><strong>Doris目前支持4种join算法</strong>：broadcast join，hash partition join，colocate join，bucket shuffle join。</p><p><strong>broadcast join</strong>：将小表发送到大表所在的每台机器，然后进行hash join操作。当一个表扫描出的数据量较少时，计算broadcast join的cost，通过计算比较hash partition的cost，来选择cost最小的方式。</p><p><strong>hash partition join</strong>：当两张表扫描出的数据都很大时，一般采用hash partition join。它遍历表中的所有数据，计算key的哈希值，然后对集群数取模，选到哪台机器，就将数据发送到这台机器进行hash join操作。</p><p><strong>colocate join</strong>：两个表在创建的时候就指定了数据分布保持一致，那么当两个表的join key与分桶的key一致时，就会采用colocate join算法。由于两个表的数据分布是一样的，那么hash join操作就相当于在本地，不涉及到数据的传输，极大提高查询性能。</p><p><strong>bucket shuffle join</strong>：当join key是分桶key，并且只涉及到一个分区时，就会优先采用bucket shuffle join算法。由于分桶本身就代表了数据的一种切分方式，所以可以利用这一特点，只需将右表对左表的分桶数hash取模，这样只需网络传输一份右表数据，极大减少了数据的网络传输，如图10所示。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_10_cn-e99cc952e6ef7e1500565bffbd73da18.png" width="878" height="938" class="img_ev3q"></p><p>如图11展示了带有HashJoinNode的单机逻辑计划创建分布式逻辑计划的核心流程。</p><ul><li><p>对PlanNode，自底向上创建PlanFragment。</p></li><li><p>如果是ScanNode，则直接创建一个PlanFragment，PlanFragment的RootPlanNode是这个ScanNode。</p></li><li><p>如果是HashJoinNode，则首先计算下broadcastCost，为选择boracast join还是hash partition join提供参考。</p></li><li><p>根据不同的条件判断选择哪种Join算法</p></li><li><p>如果使用colocate join，由于join操作都在本地，就不需要拆分。设置HashJoinNode的左子节点为leftFragment的RootPlanNode，右子节点为rightFragment的RootPlanNode，与leftFragment共用一个PlanFragment，删除掉rightFragment。</p></li><li><p>如果使用bucket shuffle join，需要将右表的数据发送给左表。所以先创建了一个ExchangeNode，设置HashJoinNode的左子节点为leftFragment的RootPlanNode，右子节点为这个ExchangeNode，与leftFragment共用一个PlanFragment，并且指定rightFragment数据发送的目的地为这个ExchangeNode。</p></li><li><p>如果使用broadcast join，需要将右表的数据发送给左表。所以先创建了一个ExchangeNode，设置HashJoinNode的左子节点为leftFragment的RootPlanNode，右子节点为这个ExchangeNode，与leftFragment共用一个PlanFragment，并且指定rightFragment数据发送的目的地为这个ExchangeNode。</p></li><li><p>如果使用hash partition join，左表和右边的数据都要切分，需要将左右节点都拆分出去，分别创建left ExchangeNode, right ExchangeNode，HashJoinNode指定左右节点为left ExchangeNode和 right ExchangeNode。单独创建一个PlanFragment，指定RootPlanNode为这个HashJoinNode。最后指定leftFragment, rightFragment的数据发送目的地为left ExchangeNode, right ExchangeNode。</p></li></ul><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_11_cn-3c4cdbe9e51459cf48d90f63b4bd893f.png" width="1080" height="975" class="img_ev3q"></p><p>图12是两个表的join操作转换成PlanFragment树之后的示例，一共生成了3个PlanFragment。最终数据的输出通过ResultSinkNode节点。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_12_cn-fc24ac9080f5429b9e7a871a34192f97.png" width="1080" height="1079" class="img_ev3q"></p><h1>9 Schedule阶段</h1><p>这一步是根据分布式逻辑计划，创建分布式物理计划。主要解决以下问题：</p><ul><li><p>哪个 BE 执行哪个 PlanFragment</p></li><li><p>每个 Tablet 选择哪个副本去查询</p></li><li><p>如何进行多实例并发</p></li></ul><p><strong>图13展示了创建分布式物理计划的核心流程：</strong></p><p><strong>a. prepare阶段</strong>：给每个PlanFragment创建一个FragmentExecParams结构，用来表示PlanFragment执行时所需的所有参数；如果一个PlanFragment包含有DataSinkNode，则找到数据发送的目的PlanFragment，然后指定目的PlanFragment的FragmentExecParams的输入为该PlanFragment的FragmentExecParams。</p><p><strong>b. computeScanRangeAssignment阶段</strong>：针对不同类型的join进行不同的处理。</p><ul><li><p>computeScanRangeAssignmentByColocate：针对colocate join进行处理，由于join的两个表桶中的数据分布都是一样的，他们是基于桶的join操作，所以在这里是确定每个桶选择哪个host。在给host分配桶时，尽量保证每个host分配到的桶基本平均。</p></li><li><p>computeScanRangeAssignmentByBucket：针对bucket shuffle join进行处理，也只是基于桶的操作，所以在这里是确定每个桶选择哪个host。在给host分配桶时，同样需要尽量保证每个host分配到的桶基本平均。</p></li><li><p>computeScanRangeAssignmentByScheduler：针对其他类型的join进行处理。确定每个scanNode读取tablet哪个副本。一个scanNode会读取多个tablet，每个tablet有多个副本。为了使scan操作尽可能分散到多台机器上执行，提高并发性能，减少IO压力，Doris采用了Round-Robin算法，使tablet的扫描尽可能地分散到多台机器上去。例如100个tablet需要扫描，每个tablet 3个副本，一共10台机器，在分配时，保障每台机器扫描10个tablet。</p></li></ul><p><strong>c. computeFragmentExecParams阶段</strong>：这个阶段解决PlanFragment下发到哪个BE上执行，以及如何处理实例并发问题。确定了每个tablet的扫描地址之后，就可以以地址为维度，将FragmentExecParams生成多个实例，也就是FragmentExecParams中包含的地址有多个，就生成多个实例FInstanceExecParam。如果设置了并发度，那么一个地址的执行实例再进一步的拆成多个FInstanceExecParam。针对bucket shuffle join和colocate join会有一些特殊处理，但是基本思想一样。FInstanceExecParam创建完成后，会分配一个唯一的ID，方便追踪信息。如果FragmentExecParams中包含有ExchangeNode，需要计算有多少senders，以便知道需要接受多少个发送方的数据。最后FragmentExecParams确定destinations，并把目的地址填充上去。</p><p><strong>d. create result receiver阶段</strong>：result receiver是查询完成后，最终数据需要输出的地方。</p><p><strong>e. to thrift阶段</strong>：根据所有PlanFragment的FInstanceExecParam创建rpc请求，然后下发到BE端执行。这样一个完整的SQL解析过程完成了。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_13_cn-11d11e8bdcacdc813f16f698e3c7cb6d.png" width="1080" height="846" class="img_ev3q"></p><p>如图14所示是一个简单示例，图中的PlanFrament包含了一个ScanNode，ScanNode扫描3个tablet，每个tablet有2副本，集群假设有2台host。</p><p>computeScanRangeAssignment阶段确定了需要扫描replica 1,3,5,8,10,12，其中replica 1,3,5位于host1上，replica 8,10,12位于host2上。</p><p>如果全局并发度设置为1时，则创建2个实例FInstanceExecParam，下发到host1和host2上去执行，如果如果全局并发度设置为3，这个host1上创建3个实例FInstanceExecParam，host2上创建3个实例FInstanceExecParam，每个实例扫描一个replica，相当于发起6个rpc请求。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/Figure_14_cn-584e7935ee2ef6eb13e0cd4dada6ac8d.png" width="1080" height="545" class="img_ev3q"></p><h1>10 总结</h1><p>本文首先简单介绍了Doris，然后介绍SQL解析的通用流程：词法分析，语法分析，生成逻辑计划，生成物理计划，接着从总体上介绍了Doris在SQL解析这块的总体架构，最后详细讲解了Parse，Analyze，SinglePlan，DistributedPlan，Schedule等5个过程，从算法原理和代码实现上进行了深入的讲解。</p><p>Doris遵守了SQL解析的常用方法，但根据底层存储架构，以及分布式的特点，在SQL解析这块进行了大量的优化，实现了最大并行度和最小化网络传输，给SQL执行层面减少很多负担。</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 在小米数据场景的应用实践与优化]]></title>
        <id>https://doris.apache.org/zh-CN/blog/xiaomi</id>
        <link href="https://doris.apache.org/zh-CN/blog/xiaomi"/>
        <updated>2022-08-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>背景</h1><p>因增长分析业务需要，小米集团于 2019 年首次引入了 Apache Doris 。经过三年时间的发展，目前 Apache Doris 已经在广告投放、新零售、增长分析、数据看板、天星数科、小米有品、用户画像等小米内部数十个业务中得到广泛应用 <strong>，并且在小米内部已经形成一套以 Apache Doris 为核心的数据生态。</strong>
<img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25d7c2c45acd4e1c8c1a1742016fc6b9~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q">
当前 Apache Doris 在小米内部已经具有<strong>数十个</strong>集群、总体达到<strong>数百台</strong> BE 节点的规模，其中单集群最大规模达到<strong>近百台节点</strong>，拥有<strong>数十个</strong>流式数据导入产品线，每日单表最大增量 <strong>120 亿</strong>、支持 <strong>PB 级别</strong>存储，单集群每天可以支持 <strong>2W 次以上</strong>的多维分析查询。</p><h1>架构演进</h1><p>小米引入 Apache Doris 的初衷是为了解决内部进行用户行为分析时所遇到的问题。随着小米互联网业务的发展，各个产品线利用用户行为数据对业务进行增长分析的需求越来越迫切。让每个业务产品线都自己搭建一套增长分析系统，不仅成本高昂，也会导致效率低下。因此能有一款产品能够帮助他们屏蔽底层复杂的技术细节，让相关业务人员能够专注于自己的技术领域，可以极大提高工作效率。基于此，小米大数据和云平台联合开发了增长分析系统 Growing Analytics（下文中简称 GA )，旨在提供一个灵活的多维实时查询和分析平台，统一数据接入和查询方案，帮助业务线做精细化运营。（此处内容引用自：<a href="https://mp.weixin.qq.com/s?__biz=MzUxMDQxMDMyNg==&amp;mid=2247486817&amp;idx=1&amp;sn=99fbef15b4d6f6059c3affbc77517e6e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">基于Apache Doris的小米增长分析平台实践</a>）</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/897a0453e1a540ae88cdf05ee9188b56~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>分析、决策、执行是一个循环迭代的过程，在对用户进行行为分析后，针对营销策略是否还有提升空间、是否需要在前端对用户进行个性化推送等问题进行决策，帮助小米实现业务的持续增长。这个过程是对用户行为进行<strong>分析-决策-优化执行-再分析-再决策-再优化执行</strong>的迭代过程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="历史架构">历史架构<a href="#历史架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>增长分析平台立项于 2018 年年中，当时基于开发时间和成本，技术栈等因素的考虑，小米复用了现有各种大数据基础组件（HDFS, Kudu, SparkSQL 等），搭建了一套基于 Lamda 架构的增长分析查询系统。<strong>GA 系统初代版本的架构如下图所示，包含了以下几个方面：</strong></p><ul><li>数据源：数据源是前端的埋点数据以及可能获取到的用户行为数据。</li><li>数据接入层：对埋点数据进行统一的清洗后打到小米内部自研的消息队列 Talos 中，并通过 Spark Streaming 将数据导入存储层 Kudu 中。</li><li>存储层：在存储层中进行冷热数据分离。热数据存放在 Kudu 中，冷数据则会存放在 HDFS 上。同时在存储层中进行分区，当分区单位为天时，每晚会将一部分数据转冷并存储到 HDFS 上。</li><li>计算层/查询层：在查询层中，使用 SparkSQL 对 Kudu 与 HDFS 上数据进行联合视图查询，最终把查询结果在前端页面上进行显示。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9039c4f9ef8a4a3cbfd092b21233e831~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>在当时的历史背景下，初代版本的增长分析平台帮助我们解决了一系列用户运营过程中的问题，但同时在历史架构中也存在了两个问题：</strong></p><p><strong>第一个问题：</strong> 由于历史架构是基于 SparkSQL + Kudu + HDFS 的组合，依赖的组件过多导致运维成本较高。原本的设计是各个组件都使用公共集群的资源，但是实践过程中发现执行查询作业的过程中，查询性能容易受到公共集群其他作业的影响，容易抖动，尤其在读取 HDFS 公共集群的数据时，有时较为缓慢。</p><p><strong>第二个问题：</strong> 通过 SparkSQL 进行查询时，延迟相对较高。SparkSQL 是基于批处理系统设计的查询引擎，在每个 Stage 之间交换数据 Shuffle 的过程中依然需要落盘操作，完成 SQL 查询的时延较高。为了保证 SQL 查询不受资源的影响，我们通过添加机器来保证查询性能，但是实践过程中发现，性能提升的空间有限，这套解决方案并不能充分地利用机器资源来达到高效查询的目的，存在一定的资源浪费。 <strong>（此处内容引用自：<a href="https://mp.weixin.qq.com/s?__biz=MzUxMDQxMDMyNg==&amp;mid=2247486817&amp;idx=1&amp;sn=99fbef15b4d6f6059c3affbc77517e6e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">基于Apache Doris的小米增长分析平台实践</a>）</strong></p><p>针对上述两个问题，我们的目标是寻求一款计算存储一体的 MPP 数据库来替代我们目前的存储计算层的组件，<strong>在通过技术选型后，最终我们决定使用 Apache Doris 替换老一代历史架构。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="基于-apache-doris-的新版架构">基于 Apache Doris 的新版架构<a href="#基于-apache-doris-的新版架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>当前架构从数据源获取前端埋点数据后，通过数据接入层打入 Apache Doris 后可以直接查询结果并在前端进行显示。<img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/540f5fa779af4b629869e54b793ea273~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>选择 Doris 原因：</strong></p><ul><li><p>Doris 具有优秀的查询性能，能够满足业务需求。</p></li><li><p>Doris 支持标准 SQL ，用户使用与学习成本较低。</p></li><li><p>Doris 不依赖于其他的外部系统，运维简单。</p></li><li><p>Doris 社区拥有很高活跃度，有利于后续系统的维护升级。</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新旧架构性能对比">新旧架构性能对比<a href="#新旧架构性能对比" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ada8246b409a4cb6b11ffd2454aa2b06~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>我们选取了日均数据量大约 10 亿的业务，分别在不同场景下进行了性能测试，其中包含 6 个事件分析场景，3 个留存分析场景以及 3 个漏斗分析场景。<strong>经过对比后，得出以下结论：</strong></p><ul><li>在事件分析的场景下，平均查询所耗时间<strong>降低了 85%</strong> 。</li><li>在留存分析和漏斗分析场景下，平均查询所耗时间<strong>降低了 50%</strong> <strong>。</strong></li></ul><h1>应用实践</h1><p>随着接入业务的增多和数据规模的增长，让我们也遇到不少问题和挑战，下面我们将介绍在<strong>使用 Apache Doris 过程中沉淀出来的一些实践经验</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据导入">数据导入<a href="#数据导入" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8afce198933f4ca4b2c97d4cf85b27de~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q">小米内部主要通过 Stream Load 与 Broker Load 以及少量 Insert 方式来进行 Doris 的数据导入。数据一般会先打到 Talos 消息队列中，并分为实时数据和离线数据两个部分。</p><p><strong>实时数据写入 Apache Doris 中：</strong></p><p> 一部分业务在通过 Flink 对数据进行处理后，会通过 Doris 社区提供的 Flink Doris Connector 组件写入到 Doris 中，底层依赖于 Doris Stream Load 数据导入方式。也有一部分会通过 Spark Streaming 封装的 Stream Load 将数据导入到 Doris 中。</p><p><strong>离线数据写入</strong> <strong>Apache Doris 中：</strong></p><p>离线数据部分则会先写到 Hive 中，再通过小米的数据工场将数据导入到 Doris 中。用户可以直接在数据工场提交 Broker Load 任务并将数据直接导入 Doris 中，也可以通过 Spark SQL 将数据导入 Doris 中。Spark SQL 方式则是依赖了 Doris 社区提供的 Spark Doris Connector 组件，底层也是对 Doris 的 Stream Load 数据导入方式进行的封装。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据查询">数据查询<a href="#数据查询" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c1cd3554e854dbe99aba27499e28118~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>用户通过数据工场将数据导入至 Doris 后即可进行查询，在小米内部是通过小米自研的数鲸平台来做查询的。用户可以通过数鲸平台对 Doris 进行查询可视化，并实现用户行为分析（为满足业务的事件分析、留存分析、漏斗分析、路径分析等行为分析需求，我们为 Doris 添加了相应的 UDF 和 UDAF ）和用户画像分析。</p><p>虽然目前依然需要将 Hive 的数据导过来，但 Doris 社区也正在支持湖仓一体能力，在后续实现湖仓一体能力后，我们会考虑直接通过 Doris 查询 Hive 与 Iceberg 外表。<strong>值得一提的是，Doris 1.1 版本已经实现支持查询 Iceberg 外表能力。</strong> 同时在即将发布的 <strong>1.2 版本</strong>中，还将支持 Hudi 外表并增加了 Multi Catalog ，可以实现外部表元数据的同步，无论是查询外部表的性能还是接入外表的易用性都有了很大的提升。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="compaction-调优">Compaction 调优<a href="#compaction-调优" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92ad4ea90c564af2b720080b449c6edf~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>Doris 底层采用类似 LSM-Tree 方式，支持快速的数据写入。每一次的数据导入都会在底层的 Tablet 下生成一个新的数据版本，每个数据版本内都是一个个小的数据文件。单个文件内部是有序的，但是不同的文件之间又是无序的。为了使数据有序，在 Doris 底层就会存在 Compaction 机制，异步将底层小的数据版本合并成大的文件。Compaction 不及时就会造成版本累积，增加元数据的压力，并影响查询性能。由于 Compaction 任务本身又比较耗费机器CPU、内存与磁盘资源，如果 Compaction 开得太大就会占用过多的机器资源并影响到查询性能，同时也可能会造成 OOM。<strong>针对以上问题，我们一方面从业务侧着手，通过以下方面引导用户：</strong></p><ul><li>通过引导业务侧进行合理优化，对表设置<strong>合理的分区和分桶</strong>，避免生成过多的数据分片。</li><li>引导用户尽量<strong>降低数据的导入频率</strong> <strong>，</strong> <strong>增大单次数据导入的量</strong>，降低 Compaction 压力。</li><li>引导用户<strong>避免过多使用会在底层生成 Delete 版本的 Delete 操作</strong>。在 Doris 中 Compaction 分为 Base Compaction 与 Cumulative Compaction。Cumulative Compaction 会快速的把大量新导入的小版本进行快速的合并，在执行过程中若遇到 Delete 操作就会终止并将当前 Delete 操作版本之前的所有版本进行合并。由于 Cumulative Compaction 无法处理 Delete 版本，在合并完之后的版本会和当前版本一起放到 Base Compaction 中进行。当 Delete 版本特别多时， Cumulative Compaction 的步长也会相应变短，只能合并少量的文件，导致 Cumulative Compaction 不能很好的发挥小文件合并效果。</li></ul><p><strong>另一方面我们从运维侧着手：</strong></p><ul><li><strong>针对不同的业务集群配置不同的 Compaction 参数。</strong> 部分业务是实时写入数据的，需要的查询次数很多，我们就会将 Compaction 开的大一点以达到快速合并目的。而另外一部分业务只写今天的分区，但是只对之前的分区进行查询，在这种情况下，我们会适当的将 Compaction 放的小一点，避免 Compaction 占用过大内存或 CPU 资源。到晚上导入量变少时，之前导入的小版本能够被及时合并，对第二天查询效率不会有很大影响。</li><li><strong>适当降低 Base Compaction 任务优先级并增加 Cumulative Compaction 优先级。</strong> 根据上文提到的内容，Cumulative Compaction 能够快速合并大量生成的小文件，而 Base Compaction 由于合并的文件较大，执行的时间也会相应变长，读写放大也会比较严重。所以我们希望 Cumulative Compaction 优先、快速的进行。</li><li><strong>增加版本积压报警。</strong> 当我们收到版本积压报警时，动态调大 Compaction 参数，尽快消耗积压版本。</li><li><strong>支持手动触发指定表与分区下数据分片的 Compaction 任务。</strong> 由于 Compaction 不及时，部分表在查询时版本累积较多并需要能够快速进行合并。所以，我们支持对单个表或单个表下的某个分区提高 Compaction 优先级。</li></ul><p><strong>目前 Doris 社区针对以上问题已经做了</strong> <strong>一系列的优化</strong> <strong>，在 1.1 版本中</strong> <strong>大幅增强了数据 Compaction 能力，对于新增数据能够快速完成聚合，避免分片数据中的版本过多导致的 -235 错误以及带来的查询效率问题。</strong>\
<strong>首先</strong>，在 Doris 1.1 版本中，引入了 QuickCompaction，增加了主动触发式的 Compaction 检查，在数据版本增加的时候主动触发 Compaction。同时通过提升分片元信息扫描的能力，快速的发现数据版本多的分片，触发 Compaction。通过主动式触发加被动式扫描的方式，彻底解决数据合并的实时性问题。</p><p><strong>同时</strong>，针对高频的小文件 Cumulative Compaction，实现了 Compaction 任务的调度隔离，防止重量级的 Base Compaction 对新增数据的合并造成影响。</p><p><strong>最后</strong>，针对小文件合并，优化了小文件合并的策略，采用梯度合并的方式，每次参与合并的文件都属于同一个数据量级，防止大小差别很大的版本进行合并，逐渐有层次的合并，减少单个文件参与合并的次数，能够大幅的节省系统的 CPU 消耗。<img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd2f0a547d6e4ddcb027715c4a544c5a~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"><strong>在社区 1.1 新版本的测试结果中，不论是Compaction 的效率、CPU 的资源消耗，还是高频导入时的查询抖动，效果都有了大幅的提升。</strong></p><p><strong>具体可以参考：</strong> <a href="http://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==&amp;mid=2247500848&amp;idx=1&amp;sn=a667665ed4ccf4cf807a47be7c264f69&amp;chksm=cf2fca37f85843219e2f74d856478d4aa24d381c1d6e7f9f6a64b65f3344ce8451ad91c5af97&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">Apache Doris 1.1 特性揭秘：Flink 实时写入如何兼顾高吞吐和低延时</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="监控报警">监控报警<a href="#监控报警" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Doris 的监控主要是通过 Prometheus 以及 Grafana 进行。对于 Doris 的报警则是通过 Falcon 进行。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fbe6b44f1124a91bf5ee17608f302d5~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q">小米内部使用 Minos 进行集群部署。Minos 是小米内部自研并开源的大数据服务进程管理工具。在完成 Doris 集群部署后会更新至小米内部的轻舟数仓中。在轻舟数仓中的节点注册到 ZooKeeper 后，Prometheus 会监听 ZooKeeper 注册的节点，同时访问对应端口，拉取对应 Metrics 。在这之后，Grafana 会在面板上对监控信息进行显示，若有指标超过预设的报警阈值，Falcon 报警系统就会在报警群内报警，同时针对报警级别较高或某些无法及时响应的警告，可直接通过电话呼叫值班同学进行报警。</p><p>另外，小米内部针对每一个 Doris 集群都有 Cloud - Doris 的守护进程。Could - Doris 最大功能是可以对 Doris 进行可用性探测。比如我们每一分钟对 Doris 发送一次 select current timestamp(); 查询，若本次查询 20 秒没有返回，我们就会判断本次探测不可用。小米内部对每一个集群的可用性进行保证，通过上述探测方法，可以在小米内部输出 Doris可用性指标。</p><h1>小米对Apache Doris的优化实践</h1><p>在应用 Apache Doris 解决业务问题的同时，我们也发现了 Apache Doris 存在的一些优化项，因此在与社区进行沟通后我们开始深度参与社区开发，解决自身问题的同时也及时将开发的重要 Feature 回馈给社区，具体包括 Stream Load 两阶段提交（2PC）、单副本数据导入、Compaction 内存限制等。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="stream-load-两阶段提交2pc">Stream Load 两阶段提交（2PC)<a href="#stream-load-两阶段提交2pc" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><strong>遇到的问题</strong></p><p>在 Flink 和 Spark 导入数据进 Doris 的过程中，当某些异常状况发生时可能会导致如下问题：</p><p><strong>Flink 数据重复导入</strong> <strong>：</strong> Flink 通过周期性 Checkpoint 机制处理容错并实现 EOS，通过主键或者两阶段提交实现包含外部存储的端到端 EOS。Doris-Flink-Connector 1.1 之前 UNIQUE KEY 表通过唯一键实现了EOS，非 UNIQUE KEY 表不支持 EOS。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7750384cac44a569c8edf6c5de61744~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p> <strong>Spark SQL 数据部分导入</strong> <strong>：</strong> 通过 SparkSQL 从 Hive 表中查出的数据并写入 Doris 表中的过程需要使用到 Spark Doris Connector 组件，会将 Hive 中查询的数据通过多个 Stream Load 任务写入 Doris 中，出现异常时会导致部分数据导入成功，部分导入失败。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/936ffd500f364f838a9976584727ed42~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>Stream Load 两阶段提交设计</strong></p><p>以上两个问题可以通过导入支持两阶段提交解决，第一阶段完成后确保数据不丢且数据不可见，这就能保证第二阶段发起提交时一定能成功，也能够保证第二阶段发起取消时一定能成功。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50e59f3a78f74ba6a8dd2d7960497adb~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>Doris 中的写入事务分为三步：</strong></p><ol><li>在  FE 上开始事务，状态为 Prepare ；</li><li>数据写入 BE；</li><li>多数副本写入成功的情况下，提交事务，状态变成 Committed，并且 FE 向 BE 下发 Publish Version 任务，让数据立即可见。</li></ol><p>引入两阶段提交之后，第 3 步变为状态修改为 Pre Commit，Publish Version 在第二阶段完成。用户在第一阶段完成后（事务状态为 Pre Commit ），可以选择在第二阶段放弃或者提交事务。</p><p><strong>支持 Flink Exactly-Once 语义</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef5e0a81b441487ba7c3b3fa22e8c85d~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q">Doris-Flink-Connector 1.1 使用两阶段 Stream Load 并支持 Flink 两阶段提交实现了 EOS，只有全局的 Checkpoint 完成时，才会发起 Sream Load 的第二阶段提交，否则发起第二阶段放弃。</p><p><strong>解决 SparkSQL 数据部分导入</strong></p><p>Doris-Spark-Connector 使用两阶段 Stream Load 之后，成功的 Task 通过 Stream Load 第一阶段将写入数据到 Doris （Pre Commit 状态，不可见），当作业成功后，发起所有 Stream Load 第二阶段提交，作业失败时，发起所有 Stream Load 第二阶段取消。这就确保了不会有数据部分导入的问题。<img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26b11a29566946c99b53ef90e01665ef~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="单副本数据导入优化">单副本数据导入优化<a href="#单副本数据导入优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><strong>单副本数据导入设计</strong></p><p><strong>Doris 通过多副本机制确保数据的高可靠以及系统高可用。</strong> 写入任务可以按照使用的资源分为计算和存储两类：排序、聚合、编码、压缩等使用的是 CPU 和内存的计算资源，最后的文件存储使用存储资源，三副本写入时计算和存储资源会占用三份。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0012b34b7404e5482700c281f6c206f~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>那能否只写一份副本数据在内存中，待到单副本写入完成并生成存储文件后，将文件同步到另外两份副本呢？答案是可行的，因此针对三副本写入的场景，我们做了单副本写入设计。<strong>单副本数据在内存中做完排序、聚合、编码以及压缩后，将文件同步至其他两个副本，这样很大程度上可以节省出 CPU 和内存资源。</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3528e0d75184068aa3b50384cb548d1~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>性能对比测试</strong></p><p><strong>Broker Load 导入 62G 数据性能对比</strong>
<strong>导入时间：</strong> 三副本导入耗时 33 分钟，单副本导入耗时 31 分钟。</p><p><strong>内存使用：</strong> 内存使用上优化效果十分明显，三副本数据导入的内存使用是单副本导入的三倍。单副本导入时只需要写一份内存，但是三副本导入时需要写三份内存，内存优化达到了 3 倍。</p><p><strong>CPU 消耗对比：</strong> 三副本导入的 CPU 消耗差不多是单副本的三倍。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cbe6bb648e8d47d09c556eed4ffcdfa9~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>并发场景性能对比</strong></p><p>测试中向  100 个表并发导入数据，每个表有 50 个导入任务，任务总数为 5000 个。单个 Stream Load 任务导入的数据行是 200 万行，约为 90M 的数据。测试中开了 128 个并发，<strong>将</strong> <strong>单副本导入和三副本导入进行了对比：</strong></p><p><strong>导入时间：</strong> 3 副本导入耗时 67 分钟，而后单副本耗时 27 分钟完成。导入效率相当提升两倍以上。</p><p><strong>内存使用：</strong> 单副本的导入会更低。</p><p><strong>CPU消耗对比：</strong> 由于都已经是开了并发在导入，CPU开销都比较高，但是单副本导入吞吐提升明显。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a4f5533c4184f8caab39c38d951e410~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>Compaction 内存限制</strong></p><p>之前 Doris 在单机磁盘一次导入超过 2000 个 Segment 的情况下，Compaction 有内存 OOM 的问题。对于当天写入但不查当天数据而是查询之前的数据业务场景，我们会把 Compaction 稍微放的小一点，避免占用太大的内存，导致进程 OOM。Doris 之前每个磁盘有固定的线程做存储在这个盘上的数据的 Compaction，没有办法在全局进行管控。因为我们要限制单个节点上面内存的使用，<strong>所以我们将该模式改成了生产者-消费者模式：</strong></p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ede14473f9104bdc89213e82398ba32a~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>生产者不停的从所有的磁盘上面生产任务，之后将生产任务提交到线程池中。我们可以很好的把控线程池的入口，达到对 Compaction 的限制。我们在合并时会把底层的小文件进行归并排序，之后在内存里给每一个文件开辟 Block，所以我们可以近似认为占用的内存量与文件的数量是相关的，从而可以通过对单节点上同时执行合并的文件数量做限制，来达到控制内存的效果。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00803f23d5a0427fb57abde4a2b1ec2d~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>我们增加了对单个 BE Compaction 合并的文件数量的限制。</strong> 若正在进行的 Compaction 的文件数量超过或等于当前限制时，后续提交上来的任务就需要等待，等到前面的 Compaction 任务做完并将指标释放出来后，后边提交进来的那些任务才可以进行。</p><p>通过这种方式，我们对某些业务场景做了内存的限制，很好的避免集群负载高时占用过多内存导致 OOM 的问题。</p><h1>总结</h1><p>自从 Apache Doris 从 2019 年上线第一个业务至今，<strong>目前 Apache Doris 已经在小米内部服务了数十个业务、集群数量达到数十个、节点规模达到数百台、每天完成数万次用户在线分析查询，承担了包括增长分析和报表查询等场景绝大多数在线分析的需求。</strong></p><p>与此同时，以上所列小米对于 Apache Doris 的优化实践，已经有部分功能已经在 Apache Doris 1.0 或 1.1 版本中发布，有部分 PR 已经合入社区 Master，在不久后发布的 1.2 新版本中应该就会与大家见面。随着社区的快速发展，有越来越多小伙伴参与到社区建设中，社区活跃度有了极大的提升。Apache Doris 已经变得越来越成熟，并开始从单一计算存储一体的分析型 MPP 数据库走向湖仓一体的道路，相信在未来还有更多的数据分析场景等待去探索和实现。</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 1.1 特性揭秘：Flink 实时写入如何兼顾高吞吐和低延时]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Flink-realtime-write</id>
        <link href="https://doris.apache.org/zh-CN/blog/Flink-realtime-write"/>
        <updated>2022-07-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>背景</h1><p>随着数据实时化需求的日益增多，数据的时效性对企业的精细化运营越来越重要，在海量数据中，如何能实时有效的挖掘出有价值的信息，快速的获取数据反馈，协助公司更快的做出决策，更好的进行产品迭代，<strong>实时数仓在这一过程中起到了不可替代的作用</strong>。</p><p>在这种形势下，<strong>Apache Doris 作为一款实时 MPP 分析型数据库脱颖而出</strong>，同时具备高性能、简单易用等特性，具有丰富的数据接入方式，结合 Flink 流式计算，可以让用户快速将 Kafka 中的非结构化数据以及 MySQL 等上游业务库中的变更数据，快速同步到 Doris 实时数仓中，同时 Doris 提供亚秒级分析查询的能力，可以有效地满足实时 OLAP、实时数据看板以及实时数据服务等场景的需求。</p><h1>挑战</h1><p>通常实时数仓要保证端到端高并发以及低延迟，往往面临诸多挑战，比如：</p><ul><li>如何保证端到端的<strong>秒级别数据同步</strong>？</li><li>如何快速保证<strong>数据可见性</strong>？</li><li>在高并发大压力下，如何解决<strong>大量小文件写入</strong>的问题？</li><li>如何确保端到端的 <strong>Exactly Once</strong> 语义？</li></ul><p>结合这些挑战，同时对用户使用 Flink+Doris 构建实时数仓的业务场景进行深入调研，在掌握了用户使用的痛点之后，<strong>我们在 Doris 1.1 版本中进行了针对性的优化，大幅提升实时数仓构建的用户体验，同时提升系统的稳定性，系统资源消耗也得到了大幅的优化。</strong></p><h1>优化</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="流式写入">流式写入<a href="#流式写入" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Flink Doris Connector 最初的做法是在接收到数据后，缓存到内存 Batch 中，通过攒批的方式进行写入，同时使用 batch.size、batch.interval 等参数来控制 Stream Load 写入的时机。这种方式通常在参数合理的情况下可以稳定运行，一旦参数不合理导致频繁的 Stream Load，便会引发 Compaction 不及时，从而导致 version 过多的错误(-235)；其次，当数据过多时，为了减少 Stream Load 的写入时机，batch.size 过大的设置还可能会引发 Flink 任务的 OOM。为了解决这个问题，<strong>我们引入了流式写入</strong> <strong>：</strong> <img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b4b7364deb34a1398c496d10890a249~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><ol><li><p>Flink 任务启动后，会异步发起一个 Stream Load 的 Http 请求。</p></li><li><p>接收到实时数据后，通过 Http 的分块传输编码(Chunked transfer encoding)机制持续向 Doris 传输数据。</p></li><li><p>在 Checkpoint 时结束 Http 请求，完成本次 Stream Load 写入，同时异步发起下一次 Stream Load 的请求。</p></li><li><p>继续接收实时数据，后续流程同上。</p></li></ol><p><strong>由于采用 Chunked 机制传输数据，就避免了攒批对内存的压力，同时将写入的时机和 Checkpoint 绑定起来，使得 Stream Load 的时机可控，并且为下面的 Exactly-Once 语义提供了基础。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="exactly-once">Exactly-Once<a href="#exactly-once" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Exactly-Once 语义是指即使在机器或应用出现故障的情况下，也不会重复处理数据或者丢失数据。Flink 很早就支持 End-to-End 的 Exactly-Once 场景，主要是通过两阶段提交协议来实现 Sink 算子的 Exactly-Once 语义。在 Flink 两阶段提交的基础上，同时借助 Doris 1.0 的 Stream Load 两阶段提交，<strong>Flink Doris Connector 实现了 Exactly Once 语义，具体原理如下：</strong></p><ol><li>Flink 任务在启动的时候，会发起一个 Stream Load 的 PreCommit 请求，此时会先开启一个事务，同时会通过 Http 的 Chunked 机制将数据持续发送到 Doris。</li></ol><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b2f143faf784500a3a8ba34063d6c2e~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><ol start="2"><li>在 Checkpoint 时，结束数据写入，同时完成 Http 请求，并且将事务状态设置为预提交(PreCommitted)，此时数据已经写入 BE，对用户不可见。</li></ol><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7e1d4f76a824c9a8f473e2e266defc4~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><ol start="3"><li>Checkpoint 完成后，发起 Commit 请求，并且将事务状态设置为提交(Committed)，完成后数据对用户可见。</li></ol><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1215aaa4dc3e44de86cdd4680ac30b00~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><ol start="4"><li>Flink 应用意外挂掉后，从 Checkpoint 重启时，若上次事务为预提交(PreCommitted)状态，则会发起回滚请求，并且将事务状态设置为 Aborted。</li></ol><p><strong>基于此，可以借助 Flink Doris Connector 实现数据实时入库时数据不丢不重。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="秒级别数据同步">秒级别数据同步<a href="#秒级别数据同步" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>高并发写入场景下的端到端秒级别数据同步以及数据的实时可见能力，<strong>需要 Doris 具备如下几方面的能力：</strong></p><p><strong>事务处理能力</strong></p><p>Flink 实时写入以 Stream Load 2PC 的方式与 Doris 进行交互，需要 Doris 具备对应的事务处理能力，保障事务基本的 ACID 特性，在高并发场景下支撑 Flink 秒级别的数据同步。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据版本的快速聚合能力">数据版本的快速聚合能力<a href="#数据版本的快速聚合能力" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Doris 里面一次导入会产生一个数据版本，在高并发写入场景下必然带来的一个影响是数据版本过多，且单次导入的数据量不会太大。持续的高并发小文件写入场景对 Doris 并不友好，极其考验 Doris 数据合并的实时性以及性能，进而会影响到查询的性能。<strong>Doris 在 1.1 中大幅增强了数据 Compaction 能力，对于新增数据能够快速完成聚合，避免分片数据中的版本过多导致的 -235 错误以及带来的查询效率问题。</strong> </p><p><strong>首先</strong>，在 Doris 1.1 版本中，引入了 QuickCompaction，增加了主动触发式的 Compaction 检查，在数据版本增加的时候主动触发 Compaction。同时通过提升分片元信息扫描的能力，快速的发现数据版本多的分片，触发 Compaction。通过主动式触发加被动式扫描的方式，彻底解决数据合并的实时性问题。</p><p><strong>同时</strong>，针对高频的小文件 Cumulative Compaction，实现了 Compaction 任务的调度隔离，防止重量级的 Base Compaction 对新增数据的合并造成影响。</p><p><strong>最后</strong>，针对小文件合并，优化了小文件合并的策略，采用梯度合并的方式，每次参与合并的文件都属于同一个数据量级，防止大小差别很大的版本进行合并，逐渐有层次的合并，减少单个文件参与合并的次数，能够大幅的节省系统的 CPU 消耗。<img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fee6ce47ed6d4c21a34ca35c3a3ad4df~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>Doris 1.1 对高并发导入、秒级别数据同步、数据实时可见等场景都做了针对性优化，大大增加了 Flink + Doris 系统的易用性以及稳定性，节省了集群整体资源。</strong></p><h1>效果</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="通用-flink-高并发场景">通用 Flink 高并发场景<a href="#通用-flink-高并发场景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>在调研的通用场景中，使用 Flink 同步上游 Kafka 中的非结构化数据，经过 ETL 后使用 Flink Doris Connector 将数据实时写入 Doris 中。这里客户场景极其严苛，上游维持以每秒 10w 的超高频率写入，需要数据能够在 5s 内完成上下游同步，实现秒级别的数据可见。这里 Flink 配置为 20 并发，Checkpoint 间隔 5s，Doris 1.1 的表现相当优异。<strong>具体体现在如下几个方面：</strong></p><p><strong>Compaction 实时性</strong></p><p>数据能快速合并，Tablet 数据版本个数维持在 50 以下， Compaction Score 稳定。相比于之前高并发导入频出的 -235 问题，<strong>Compaction 合并效率有 10+ 倍提升</strong>。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f622b2f235ae4bad8b2b38fd9d1f0c57~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>CPU 资源消耗</strong></p><p>Doris 1.1 针对小文件的 Compaction 进行了策略优化，在上述高并发导入场景，<strong>CPU 资源消耗下降 25%。</strong> <img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec2732a96bf047e283465b04452c063a~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p><strong>QPS 查询延迟稳定</strong></p><p>通过降低 CPU 使用率，减少数据版本的个数，提升了数据整体有序性，从而减少了 SQL 查询的延迟。<img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f49f45e950045c0b7913dd167c8d220~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="秒级别数据同步场景极限大压力">秒级别数据同步场景（极限大压力）<a href="#秒级别数据同步场景极限大压力" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>单 BE 单 Tablet，客户端 30 并发极限 Stream Load 压测，数据在实时性&lt;1s，Compaction Score 优化前后对比</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/209083a2f22846688f02454e306e0053~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h1>使用建议</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="数据实时可见场景">数据实时可见场景<a href="#数据实时可见场景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>对延迟要求特别严格的场景，比如秒级别数据同步，通常意味着单次导入文件较小，此时建议调小 cumulative_size_based_promotion_min_size_mbytes，单位是 MB，默认 64，可以设置成 8，能够很大程度提升 Compaction 的实时性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="高并发场景">高并发场景<a href="#高并发场景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>对于高并发的写入场景，可以通过增加 Checkpoint 的间隔来减少 Stream Load 的频率，比如 Checkpoint 可以设置为 5-10s，不仅可以增加 Flink 任务的吞吐，也可以减少小文件的产生，避免给 Compaction 造成更多压力。</p><p>此外，对数据实时性要求不高的场景，比如分钟级别的数据同步，可以增加 Checkpoint 的间隔，比如 5-10 分钟，此时 Flink Doris Connector 依然能够通过两阶段提交 +checkpoint 机制来保证数据的完整性。</p><h1>未来规划</h1><p><strong>实时 Schema Change</strong></p><p>目前通过 Flink CDC 实时接入数据时，当上游业务表进行 Schema Change 操作时，必须先手动修改 Doris 中的 Schema 和 Flink 任务中的 Schema，最后再重启任务，新的 Schema 的数据才可以同步过来。这样使用方式需要人为的介入，会给用户带来极大的运维负担。<strong>后续会针对 CDC 场景做到支持 Schema 实时变更，上游的 Schema Change 实时同步到下游，全面提升 Schema Change 的效率。</strong></p><p><strong>Doris 多表写入</strong></p><p>目前 Doris Sink 算子仅支持同步单张表，所以对于整库同步的操作，需要手动在 Flink 层面进行分流，写到多个 Doris Sink 中，这无疑增加了开发者的难度，<strong>在后续版本中我们也将支持单个 Doris Sink 同步多张表，这样就大大的简化了用户的操作。</strong></p><p><strong>自适应的 Compaction 参数调优</strong></p><p>目前 Compaction 策略参数较多，在大部分通用场景能发挥较好的效果，但是在一些特殊场景下并不能高效的发挥作用。<strong>我们将在后续版本中持续优化，针对不同的场景，进行自适应的 Compaction 调优，在各类场景下提高数据合并效率，提升实时性。</strong></p><p><strong>单副本 Compaction</strong></p><p>目前的 Compaction 策略是各 BE 单独进行，<strong>在后续版本中我们将实现单副本 Compaction，通过克隆快照的方式实现 Compaction 任务，减少集群 2/3 的 Compaction 任务，降低系统的负载，把更多的系统资源留给用户侧。</strong></p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="技术解析" term="技术解析"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris 1.1.1 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-1.1.1</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-1.1.1"/>
        <updated>2022-07-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="新增功能">新增功能<a href="#新增功能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="向量化执行引擎支持-odbc-sink">向量化执行引擎支持 ODBC Sink。<a href="#向量化执行引擎支持-odbc-sink" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 1.1.0 版本的向量化执行引擎中 ODBC Sink 是不支持的，而这一功能在之前版本的行存引擎是支持的，因此在 1.1.1 版本中我们重新完善了这一功能。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增加简易版-memtracker">增加简易版 MemTracker<a href="#增加简易版-memtracker" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>MemTracker 是一个用于分析内存使用情况的统计工具，在 1.1.0 版本的向量化执行引擎中，由于 BE 侧没有 MemTracker，可能出现因内存失控导致的 OOM 问题。在 1.1.1 版本中，BE 侧增加了一个简易版 MemTracker，可以帮助控制内存，并在内存超出时取消查询。</p><p>完整版 MemTracker 将在 1.1.2 版本中正式发布。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="改进">改进<a href="#改进" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持在-page-cache-中缓存解压后数据">支持在 Page Cache 中缓存解压后数据。<a href="#支持在-page-cache-中缓存解压后数据" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 Page Cache 中有些数据是用 bitshuffle 编码方式压缩的，在查询过程中需要花费大量的时间来解压。在 1.1.1 版本中，Doris 将缓存解压由 bitshuffle 编码的数据以加速查询，我们发现在 ssb-flat 的一些查询中，可以减少 30% 的延时。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bug-修复">Bug 修复<a href="#bug-修复" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复无法从-10-版本进行滚动升级的问题">修复无法从 1.0 版本进行滚动升级的问题。<a href="#修复无法从-10-版本进行滚动升级的问题" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>这个问题是在 1.1.0 版本中出现的，当升级 BE 而不升级 FE 时，可能会导致 BE Core。</p><p>如果你遇到这个问题，你可以尝试用 <a href="https://github.com/apache/doris/pull/10833" target="_blank" rel="noopener noreferrer">#10833</a> 来修复它。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复某些查询不能回退到非向量化引擎的问题并导致-be-core">修复某些查询不能回退到非向量化引擎的问题，并导致 BE Core。<a href="#修复某些查询不能回退到非向量化引擎的问题并导致-be-core" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>目前，向量化执行引擎不能处理所有的 SQL 查询，一些查询（如 left outer join）将使用非向量化引擎来运行。但部分场景在 1.1.0 版本中未被覆盖到，这可能导致 BE 挂掉。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复-compaction-不能正常工作导致的--235-错误">修复 Compaction 不能正常工作导致的 -235 错误。<a href="#修复-compaction-不能正常工作导致的--235-错误" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 Unique Key 模型中，当一个 Rowset 有多个 Segment 时，在做 Compaction 过程中由于没有正确的统计行数，会导致Compaction 失败并且产生 Tablet 版本过多而导致的 -235 错误。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复查询过程中出现的部分-segment-fault">修复查询过程中出现的部分 Segment fault。<a href="#修复查询过程中出现的部分-segment-fault" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><a href="https://github.com/apache/doris/pull/10961" target="_blank" rel="noopener noreferrer">#10961</a>
<a href="https://github.com/apache/doris/pull/10954" target="_blank" rel="noopener noreferrer">#10954</a>
<a href="https://github.com/apache/doris/pull/10962" target="_blank" rel="noopener noreferrer">#10962</a></p><h1>致谢</h1><p>感谢所有参与贡献 1.1.1 版本的开发者:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@jacktengg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@mrhhsg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xinyiZzz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yixiutt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@starocean999</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@morrySnow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@morningman</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@HappenLee</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 在京东客服 OLAP 中的应用实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/jd</id>
        <link href="https://doris.apache.org/zh-CN/blog/jd"/>
        <updated>2022-07-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1><strong>引言</strong></h1><p>Apache Doris 是一款开源的 MPP 分析型数据库产品，不仅能够在亚秒级响应时间即可获得查询结果，有效的支持实时数据分析，而且支持 10PB 以上的超大的数据集。相较于其他业界比较火的 OLAP 数据库系统，Doris 的分布式架构非常简洁，支持弹性伸缩，易于运维，节省大量人力和时间成本。目前国内社区火热，也有美团、小米等大厂在使用。</p><p>本文主要讨论京东客服在人工咨询、客户事件单、售后服务单等专题的实时大屏，在实时和离线数据多维分析方面，如何利用 Doris 进行业务探索与实践。近些年来，随着数据量爆炸式的增长，以及海量数据联机分析需求的出现，MySQL、Oracle 等传统的关系型数据库在大数据量下遇到瓶颈，而 Hive、Kylin 等数据库缺乏时效性。于是 Apache Doris、Apache Druid、ClickHouse 等实时分析型数据库开始出现，不仅可以应对海量数据的秒级查询，更满足实时、准实时的分析需求。离线、实时计算引擎百花齐放。但是针对不同的场景，面临不同的问题，没有哪一种引擎是万能的。我们希望通过本文，对京东客服业务在离线与实时分析的应用与实践，能够给到大家一些启发，也希望大家多多交流，给我们提出宝贵的建议。</p><h1><strong>京东客服业务形态</strong></h1><p>京东客服作为集团服务的入口，为用户和商家提供了高效、可靠的保障。京东客服肩负着及时解决用户问题的重任，给用户提供详细易懂的说明与解释；为更好的了解用户的反馈以及产品的状况，需要实时的监控咨询量、接起率、投诉量等一系列指标，通过环比和同比，及时发现存在的问题，以更好的适应用户的购物方式，提高服务质量与效率，进而提高京东品牌的影响力。</p><h1><strong>Easy OLAP 设计</strong></h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="01-easyolap-doris-数据导入链路"><strong>01 EasyOLAP Doris 数据导入链路</strong><a href="#01-easyolap-doris-数据导入链路" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>EasyOLAP Doris 数据源主要是实时 Kafka 和离线 HDFS 文件。实时数据的导入依赖于 Routine Load 的方式；离线数据主要使用 Broker Load 和 Stream Load 的方式导入。</p><p><img loading="lazy" alt="EasyOLAP Doris 数据导入链路" src="https://cdnd.selectdb.com/zh-CN/assets/images/jd03-00bd471f0fab2d98798f5e3148b35fce.png" width="1080" height="604" class="img_ev3q"></p><p>EasyOLAP Doris 数据导入链路</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="02-easyolap-doris-全链路监控"><strong>02 EasyOLAP Doris 全链路监控</strong><a href="#02-easyolap-doris-全链路监控" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>目前 EasyOLAP Doris 项目的监控，使用的是 Prometheus + Grafana 框架。其中 node_exporter 负责采集机器层面的指标，Doris 也会自动以 Prometheus 格式吐出 FE、BE 的服务层面的指标。另外，部署了 OLAP Exporter 服务用于采集 Routine Load 相关的指标，旨在第一时间发现实时数据流导入的情况，确保实时数据的时效性。</p><p><img loading="lazy" alt="EasyOLAP Doris monitoring link" src="https://cdnd.selectdb.com/zh-CN/assets/images/jd04-8770adfb04ffe977f931d9eaff4cb534.png" width="1080" height="594" class="img_ev3q"></p><p>EasyOLAP Doris 监控链路</p><p><img loading="lazy" alt="640" src="https://cdnd.selectdb.com/zh-CN/assets/images/jd01-47257e8bb0b14785f854db959cdfd931.png" width="871" height="600" class="img_ev3q"></p><p>EasyOLAP Doris 监控面板展示</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="03-easyolap-doris-主备双流设计"><strong>03 EasyOLAP Doris 主备双流设计</strong><a href="#03-easyolap-doris-主备双流设计" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>EasyOLAP Doris 为了保障 0 级业务在大促期间服务的稳定性，采取了主备集群双写的方式。当其中一个集群出现抖动或者数据存在延迟的情况，用户可以自主地快速切换到另一个集群，尽可能的减少集群抖动给业务带来的影响。</p><p><img loading="lazy" alt="03 EasyOLAP Doris Primary-Secondary Dual Stream Design" src="https://cdnd.selectdb.com/zh-CN/assets/images/jd02-a6a4279c0c33a25862e89b56e7c986a7.png" width="1080" height="669" class="img_ev3q"></p><p>EasyOLAP Doris 主备双流设计</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="04-easyolap-doris-动态分区管理"><strong>04 EasyOLAP Doris 动态分区管理</strong><a href="#04-easyolap-doris-动态分区管理" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>京东 OLAP 团队分析需求之后，对 Doris 做了一定的定制化开发，其中就涉及到动态分区管理功能。尽管社区版本已经拥有动态分区的功能，但是该功能无法保留指定时间的分区。针对京东集团的特点，我们对指定时间的历史数据进行了留存，比如 618 和 11.11 期间的数据，不会因为动态分区而被删除。</p><p>动态分区管理功能能够控制集群中存储的数据量，而且方便了业务方的使用，无需手动或使用额外代码来管理分区信息。</p><h1><strong>Doris 缓存机制</strong></h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="01-需求场景"><strong>01 需求场景</strong><a href="#01-需求场景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>致力于不断提升用户体验，京东客服的数据分析追求极致的时效性。离线数据分析场景是写少读多，数据写入一次，多次频繁读取；实时数据分析场景，一部分数据是不更新的历史分区，一部分数据是处于更新的分区。在大部分的分析应用中，存在下述几种场景：</p><ul><li>高并发场景：Doris 较好的支持高并发，但是过高的 QPS 会引起集群抖动，且单个节点无法承载太高的 QPS ；</li><li>复杂查询：京东客服实时运营平台监控根据业务场景需展示多维复杂指标，丰富指标展示对应多种不同的查询，且数据源来自于多张表，虽然单个查询的响应时间在毫秒级别，但是整体的响应时间可能会到秒级别；</li><li>重复查询：如果没有防重刷机制，由于延迟或手误，重复刷新页面会导致提交大量重复的查询；</li></ul><p>针对上述场景，在应用层有解决方案——将查询结果放入到 Redis 中，缓存会周期性的刷新或者由用户手动刷新，但是也会存在一些问题：</p><ul><li>数据不一致：无法立即对数据的更新作出响应，用户接收到的结果可能是旧数据；</li><li>命中率低：如果数据实时性强，缓存频繁失效，则缓存的命中率低且系统的负载无法得缓解；</li><li>额外成本：引入外部组件，增加系统复杂度，增加额外成本。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="02-缓存机制简介"><strong>02 缓存机制简介</strong><a href="#02-缓存机制简介" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 EasyOLAP Doris 中，一共有三种不同类型 Cache。根据适用场景的不同，分别为 Result Cache、SQL Cache 和 Partition Cache 。三种缓存都可以通过 MySQL 客户端指令控制开关。</p><p>这三种缓存机制是可以共存的，即可以同时开启。查询时，查询分析器首先会判断是否开启了 Result Cache ，在 Result Cache 开启的情况下先从 Result Cache 中查找该查询是否存在缓存，如果存在缓存，直接取缓存的值返回给客户端；如果缓存失效或者不存在，则直接进行查询并将结果写入到缓存。缓存放在各个 FE 节点的内存中，以便快速读取。</p><p>SQL Cache 按照 SQL 的签名、查询的表的分区的 ID 和分区最新版本号来存储和获取缓存。这三者一起作为缓存的条件，其中一者发生变化，如 SQL 语句变化、数据更新之后分区版本号变化，都会无法命中缓存。在多表 Join 的情况下，其中一张表的分区更新，也会导致无法命中缓存。SQL Cache 更适合 T+1 更新的场景。</p><p>Partition Cache 是更细粒度的缓存机制。Partition Cache 主要是将一个查询根据分区并行拆分，拆分为只读分区和可更新分区，只读分区缓存，更新分区不缓存，相应的结果集也会生成 n 个，然后再将各个拆分后的子查询的结果合并。因此，如果查询 N 天的数据，数据更新最近的 D 天，每天只是日期范围不一样但相似的查询，就可以利用 Partition Cache ，只需要查询 D 个分区即可，其他部分都来自缓存，可以有效降低集群负载，缩短查询响应时间。</p><p>一个查询进入到 Doris，系统先会处理查询语句，并将该查询语句作为 Key，在执行查询语句之前，查询分析器能够自动选择最适合的缓存机制，以确保在最优的情况下，利用缓存机制来缩短查询相应时间。然后检查 Cache 中是否存在该查询结果，如果存在就获取缓存中的数据返回给客户端；如果没有缓存，则正常查询，并将该查询结果以 Value 的形式和该查询语句 Key 存储到缓存中。Result Cache 可以在高并发场景下发挥其作用，也可以保护集群资源不受重复的大查询的侵占。SQL Cache 更加适合 T+1 的场景，在分区更新不频繁以及 SQL 语句重复的情况下，效果很好。Partition Cache 是粒度最小的缓存。在查询语句查询一个时间段的数据时，查询语句会被拆分成多个子查询。在数据只写一个分区或者部分分区的情况下，能够缩短查询时间，节省集群资源。</p><p>为了更好的观察缓存的效果，相关指标已经加入到 Doris 的服务指标中，通过 Prometheus 和 Grafana 监控系统获取直观的监控数据。指标有不同种类的 Cache 的命中数量、不同种类的 Cache 命中率、 Cache 的内存大小等指标。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="03-缓存机制效果"><strong>03 缓存机制效果</strong><a href="#03-缓存机制效果" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>京东客服 Doris 主集群，11.11 期间在没有开启缓存时，部分业务就导致 CPU 的使用率达到 100% ；在开启 Result Cache 的情况下，CPU 使用率在 30%-40% 之间。缓存机制确保业务在高并发场景下，能够快速的得到查询结果，并很好的保护了集群资源。</p><h1><strong>Doris 在 2020 年 11.11 大促期间的优化</strong></h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="01-导入任务优化"><strong>01 导入任务优化</strong><a href="#01-导入任务优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>实时数据的导入一直是一个挑战。其中，保证数据实时性和导入稳定性是最重要的。为了能够更加直观的观察实时数据导入的情况，京东 OLAP 团队自主开发了 OLAP Exporter ，用于采集实时数据导入相关的指标，如导入速度、导入积压和暂停的任务等。通过导入速度和导入积压，可以判断一个实时导入任务的状态，如发现任务有积压的趋势，可以使用自主开发的采样工具，对实时任务进行采样分析。实时任务主要有三个阈值来控制任务的提交，分别是每批次最大处理时间间隔、每批次最大处理条数和每批次最大处理数据量，一个任务只要达到其中一个阈值，该任务就会被提交。通过增加日志，发现 FE 中的任务队列比较繁忙，所以，参数的调整主要都是将每批次最大处理条数和每批次最大处理数据量调大，然后根据业务的需求，调整每批次最大处理时间间隔，以保证数据的延迟在每批次最大处理时间间隔的两倍之内。通过采样工具，分析任务，不仅保证了数据的实时性，也保证了导入的稳定性。另外，我们也设置了告警，可以及时发现实时导入任务的积压以及导入任务的暂停等异常情况。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="02-监控指标优化"><strong>02 监控指标优化</strong><a href="#02-监控指标优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>监控指标主要分为两个部分，一个是机器层面指标部分，一个是业务层面指标部分。在整个监控面板里，详细的指标带来了全面的数据的同时，也增加了获取重要指标的难度。所以，为了更好的观察所有集群的重要指标，单独设立一个板块—— 11.11 重要指标汇总板块。板块中有 BE CPU 使用率、实时任务消费积压行数、TP99、QPS 等指标。指标数量不多，但是可以观测到所有集群的情况，这样可以免去在监控中频繁切换的麻烦。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="03-周边工具支持"><strong>03 周边工具支持</strong><a href="#03-周边工具支持" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>除了上述说到的采样工具和 OLAP Exporter ，京东 OLAP 团队还开发了一系列的 Doris 维护工具。</p><ol><li><p>导入采样工具：导入采样工具不仅可以采集实时导入的数据，而且还支持调整实时导入任务的参数，或者在实时导入任务暂停状态下，生成创建语句（包括最新的位点等信息）用于任务的迁移等操作。</p></li><li><p>大查询工具：大查询不仅会造成集群 BE CPU 使用率的抖动，还会导致其他查询响应时间变长。在有大查询工具之前，发现集群 CPU 出现抖动，需要去检查所有 FE 上的审计日志，然后再做统计，不仅浪费时间，而且不够直观。大查询工具就是为了解决上述的问题。当监控侧发现集群有抖动，就可以使用大查询工具，输入集群名和时间点，就可以得到该时间点下，不同业务的查询总数，时间超过 5 秒、 10 秒、 20 秒的查询个数，扫描量巨大的查询个数等，方便我们从不同的维度分析大查询。大查询的详细情况也将被保存在中间文件中，可以直接获取不同业务的大查询。整个过程只需要几十秒到一分钟就可以定位到正在发生的大查询并获取相应的查询语句，大大节约了时间和运维成本。</p></li><li><p>降级与恢复工具：为了确保 11.11 大促期间， 0 级业务的稳定性，在集群压力超过安全位的时候，需要对其他非 0 级业务做降级处理，待度过高峰期后，再一键恢复到降级前的设置。降级主要是降低业务的最大连接数、暂停非 0 级的实时导入任务等。这大大增加了操作的便捷性，提高了效率。</p></li><li><p>集群巡检工具：在 11.11 期间，集群的健康巡检是极其重要的。常规巡检包括双流业务的主备集群一致性检查，为了确保业务在一个集群出现问题的时候可以快速切换到另一个集群，就需要保证两个集群上的库表一致、数据量差异不大等；检查库表的副本数是否为 3 且检查集群是否存在不健康的 Tablet ；检查机器磁盘使用率、内存等机器层面的指标等。</p></li></ol><h1><strong>总结与展望</strong></h1><p>京东客服是在 2020 年年初开始引入 Doris 的，目前拥有一个独立集群，一个共享集群，是京东 OLAP 的资深用户。</p><p>在业务使用中也遇到了例如任务调度相关的、导入任务配置相关的和查询相关等问题，这也在推动京东 OLAP 团队更深入的了解 Doris 。我们计划推广使用物化视图来进一步提升查询的效率；使用 Bitmap 来支持 UV 等指标的精确去重操作；使用审计日志，更方便的统计大查询、慢查询；解决实时导入任务的调度问题，使导入任务更加高效稳定。除此之外，我们也计划优化建表、创建优质 Rollup 或物化视图以提升应用的流畅性，加速更多业务向 OLAP 平台靠拢，以提升应用的影响力。</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 在美团外卖实时数仓建设中的实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/meituan</id>
        <link href="https://doris.apache.org/zh-CN/blog/meituan"/>
        <updated>2022-07-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p><strong>导读：</strong>本文主要介绍一种通用的实时数仓构建的方法与实践。实时数仓以端到端低延迟、SQL 标准化、快速响应变化、数据统一为目标。在实践中，我们总结的最佳实践是：一个通用的实时生产平台 + 一个通用交互式实时分析引擎相互配合同时满足实时和准实时业务场景。两者合理分工，互相补充，形成易于开发、易于维护、效率最高的流水线，兼顾开发效率与生产成本，以较好的投入产出比满足业务多样需求。</p><h1><strong>实时场景</strong></h1><p>实时数据在美团外卖的场景是非常多的，主要有以下几点：</p><ul><li><p>运营层面：比如实时业务变化，实时营销效果，当日营业情况以及当日实时业务趋势分析等。</p></li><li><p>生产层面：比如实时系统是否可靠，系统是否稳定，实时监控系统的健康状况等。</p></li><li><p>C 端用户：比如搜索推荐排序，需要实时了解用户的想法，行为、特点，给用户推荐更加关注的内容。</p></li><li><p>风控侧：在外卖以及金融科技用的是非常多的，实时风险识别，反欺诈，异常交易等，都是大量应用实时数据的场景</p></li></ul><h1><strong>实时技术及架构</strong></h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1实时计算技术选型"><strong>1.实时计算技术选型</strong><a href="#1实时计算技术选型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>目前开源的实时技术比较多，比较通用的是 Storm、Spark Streaming 以及 Flink，具体要根据不同公司的业务情况进行选型。</p><p>美团外卖是依托美团整体的基础数据体系建设，从技术成熟度来讲，前几年用的是 Storm，Storm 当时在性能稳定性、可靠性以及扩展性上是无可替代的，随着 Flink 越来越成熟，从技术性能上以及框架设计优势上已经超越 Storm，从趋势来讲就像 Spark 替代 MR 一样，Storm 也会慢慢被 Flink 替代，当然从 Storm 迁移到 Flink 会有一个过程，我们目前有一些老的任务仍然在 Storm 上，也在不断推进任务迁移。</p><p>具体 Storm 和 Flink 的对比可以参考上图表格。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2实时架构">2.<strong>实时架构</strong><a href="#2实时架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><strong>① Lambda 架构</strong></p><p>Lambda 架构是比较经典的架构，以前实时的场景不是很多，以离线为主，当附加了实时场景后，由于离线和实时的时效性不同，导致技术生态是不一样的。Lambda 架构相当于附加了一条实时生产链路，在应用层面进行一个整合，双路生产，各自独立。这在业务应用中也是顺理成章采用的一种方式。</p><p>双路生产会存在一些问题，比如加工逻辑 double，开发运维也会 double，资源同样会变成两个资源链路。因为存在以上问题，所以又演进了一个 Kappa 架构。</p><p><strong>② Kappa 架构</strong></p><p>Kappa 架构从架构设计来讲比较简单，生产统一，一套逻辑同时生产离线和实时。但是在实际应用场景有比较大的局限性，在业内直接用 Kappa 架构生产落地的案例不多见，且场景比较单一。这些问题在我们这边同样会遇到，我们也会有自己的一些思考，在后面会讲到。</p><h1><strong>业务痛点</strong></h1><p>在外卖业务上，我们也遇到了一些问题。</p><p>业务早期，为了满足业务需要，一般是拿到需求后 case by case 的先把需求完成，业务对于实时性要求是很高的，从时效性来说，没有进行中间层沉淀的机会，在这种场景下，一般是拿到业务逻辑直接嵌入，这是能想到的简单有效的方法，在业务发展初期这种开发模式比较常见。</p><p>如上图所示，拿到数据源后，会经过数据清洗，扩维，通过 Storm 或 Flink 进行业务逻辑处理，最后直接进行业务输出。把这个环节拆开来看，数据源端会重复引用相同的数据源，后面进行清洗、过滤、扩维等操作，都要重复做一遍，唯一不同的是业务的代码逻辑是不一样的，如果业务较少，这种模式还可以接受，但当后续业务量上去后，会出现谁开发谁运维的情况，维护工作量会越来越大，作业无法形成统一管理。而且所有人都在申请资源，导致资源成本急速膨胀，资源不能集约有效利用，因此要思考如何从整体来进行实时数据的建设。</p><h1><strong>数据特点与应用场景</strong></h1><p>那么如何来构建实时数仓呢？</p><p>首先要进行拆解，有哪些数据，有哪些场景，这些场景有哪些共同特点，对于外卖场景来说一共有两大类，日志类和业务类。</p><ul><li><p>日志类：数据量特别大，半结构化，嵌套比较深。日志类的数据有个很大的特点，日志流一旦形成是不会变的，通过埋点的方式收集平台所有的日志，统一进行采集分发，就像一颗树，树根非常大，推到前端应用的时候，相当于从树根到树枝分叉的过程（从 1 到 n 的分解过程），如果所有的业务都从根上找数据，看起来路径最短，但包袱太重，数据检索效率低。日志类数据一般用于生产监控和用户行为分析，时效性要求比较高，时间窗口一般是 5min 或 10min 或截止到当前的一个状态，主要的应用是实时大屏和实时特征，例如用户每一次点击行为都能够立刻感知到等需求。</p></li><li><p>业务类：主要是业务交易数据，业务系统一般是自成体系的，以 Binlog 日志的形式往下分发，业务系统都是事务型的，主要采用范式建模方式，特点是结构化的，主体非常清晰，但数据表较多，需要多表关联才能表达完整业务，因此是一个 n 到 1 的集成加工过程。</p></li></ul><p>业务类实时处理面临的几个难点：</p><ul><li><p>业务的多状态性：业务过程从开始到结束是不断变化的，比如从下单-&gt;支付-&gt;配送，业务库是在原始基础上进行变更的，Binlog 会产生很多变化的日志。而业务分析更加关注最终状态，由此产生数据回撤计算的问题，例如 10 点下单，13 点取消，但希望在 10 点减掉取消单。</p></li><li><p>业务集成：业务分析数据一般无法通过单一主体表达，往往是很多表进行关联，才能得到想要的信息，在实时流中进行数据的合流对齐，往往需要较大的缓存处理且复杂。</p></li><li><p>分析是批量的，处理过程是流式的：对单一数据，无法形成分析，因此分析对象一定是批量的，而数据加工是逐条的。</p></li></ul><p>日志类和业务类的场景一般是同时存在的，交织在一起，无论是 Lambda 架构还是 Kappa 架构，单一的应用都会有一些问题。因此针对场景来选择架构与实践才更有意义。</p><h1><strong>实时</strong>数仓架构设计</h1><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-实时架构流批结合的探索"><strong>1. 实时架构：流批结合的探索</strong><a href="#1-实时架构流批结合的探索" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>基于以上问题，我们有自己的思考。通过流批结合的方式来应对不同的业务场景。</p><p>如上图所示，数据从日志统一采集到消息队列，再到数据流的 ETL 过程，作为基础数据流的建设是统一的。之后对于日志类实时特征，实时大屏类应用走实时流计算。对于 Binlog 类业务分析走实时 OLAP 批处理。</p><p>流式处理分析业务的痛点？对于范式业务，Storm 和 Flink 都需要很大的外存，来实现数据流之间的业务对齐，需要大量的计算资源。且由于外存的限制，必须进行窗口的限定策略，最终可能放弃一些数据。计算之后，一般是存到 Redis 里做查询支撑，且 KV 存储在应对分析类查询场景中也有较多局限。</p><p>实时 OLAP 怎么实现？有没有一种自带存储的实时计算引擎，当实时数据来了之后，可以灵活的在一定范围内自由计算，并且有一定的数据承载能力，同时支持分析查询响应呢？随着技术的发展，目前 MPP 引擎发展非常迅速，性能也在飞快提升，所以在这种场景下就有了一种新的可能。这里我们使用的是 Doris 引擎。</p><p>这种想法在业内也已经有实践，且成为一个重要探索方向。阿里基于 ADB 的实时 OLAP 方案等。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-实时数仓架构设计"><strong>2. 实时数仓架构设计</strong><a href="#2-实时数仓架构设计" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>从整个实时数仓架构来看，首先考虑的是如何管理所有的实时数据，资源如何有效整合，数据如何进行建设。</p><p>从方法论来讲，实时和离线是非常相似的，离线数仓早期的时候也是 case by case，当数据规模涨到一定量的时候才会考虑如何治理。分层是一种非常有效的数据治理方式，所以在实时数仓如何进行管理的问题上，首先考虑的也是分层的处理逻辑，具体如下：</p><ul><li><p>数据源：在数据源的层面，离线和实时在数据源是一致的，主要分为日志类和业务类，日志类又包括用户日志，DB 日志以及服务器日志等。</p></li><li><p>实时明细层：在明细层，为了解决重复建设的问题，要进行统一构建，利用离线数仓的模式，建设统一的基础明细数据层，按照主题进行管理，明细层的目的是给下游提供直接可用的数据，因此要对基础层进行统一的加工，比如清洗、过滤、扩维等。</p></li><li><p>汇总层：汇总层通过 Flink 或 Storm 的简洁算子直接可以算出结果，并且形成汇总指标池，所有的指标都统一在汇总层加工，所有人按照统一的规范管理建设，形成可复用的汇总结果。</p></li></ul><p>总结起来，从整个实时数仓的建设角度来讲，首先数据建设的层次化要先建出来，先搭框架，然后定规范，每一层加工到什么程度，每一层用什么样的方式，当规范定义出来后，便于在生产上进行标准化的加工。由于要保证时效性，设计的时候，层次不能太多，对于实时性要求比较高的场景，基本可以走上图左侧的数据流，对于批量处理的需求，可以从实时明细层导入到实时 OLAP 引擎里，基于 OLAP 引擎自身的计算和查询能力进行快速的回撤计算，如上图右侧的数据流。</p><h1><strong>实时平台化建设</strong></h1><p>架构确定之后，后面考虑的是如何进行平台化的建设，实时平台化建设完全附加于实时数仓管理之上进行的。</p><p>首先进行功能的抽象，把功能抽象成组件，这样就可以达到标准化的生产，系统化的保障就可以更深入的建设，对于基础加工层的清洗、过滤、合流、扩维、转换、加密、筛选等功能都可以抽象出来，基础层通过这种组件化的方式构建直接可用的数据结果流。这其中会有一个问题，用户的需求多样，满足了这个用户，如何兼容其他的用户，因此可能会出现冗余加工的情况，从存储来讲，实时数据不存历史，不会消耗过多的存储，这种冗余是可以接受的，通过冗余的方式可以提高生产效率，是一种空间换时间的思想应用。</p><p>通过基础层的加工，数据全部沉淀到 IDL 层，同时写到 OLAP 引擎的基础层，再往上是实时汇总层计算，基于 Storm、Flink 或 Doris，生产多维度的汇总指标，形成统一的汇总层，进行统一的存储分发。</p><p>当这些功能都有了以后，元数据管理，指标管理，数据安全性、SLA、数据质量等系统能力也会逐渐构建起来。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1实时基础层功能">1.实时基础层功能<a href="#1实时基础层功能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>实时基础层的建设要解决一些问题。</p><p>首先是一条流重复读的问题，一条 Binlog 打过来，是以 DB 包的形式存在的，用户可能只用其中一张表，如果大家都要用，可能存在所有人都要接这个流的问题。解决方案是可以按照不同的业务解构出来，还原到基础数据流层，根据业务的需要做成范式结构，按照数仓的建模方式进行集成化的主题建设。</p><p>其次要进行组件的封装，比如基础层的清洗、过滤、扩维等功能，通过一个很简单的表达入口，让用户将逻辑写出来。trans 环节是比较灵活的，比如从一个值转换成另外一个值，对于这种自定义逻辑表达，我们也开放了自定义组件，可以通过 Java 或 Python 开发自定义脚本，进行数据加工。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2实时特征生产功能">2.<strong>实时特征生产功能</strong><a href="#2实时特征生产功能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>特征生产可以通过 SQL 语法进行逻辑表达，底层进行逻辑的适配，透传到计算引擎，屏蔽用户对计算引擎的依赖。就像对于离线场景，目前大公司很少通过代码的方式开发，除非一些特别的 case，所以基本上可以通过 SQL 化的方式表达。</p><p>在功能层面，把指标管理的思想融合进去，原子指标、派生指标，标准计算口径，维度选择，窗口设置等操作都可以通过配置化的方式，这样可以统一解析生产逻辑，进行统一封装。</p><p>还有一个问题，同一个源，写了很多 SQL，每一次提交都会起一个数据流，比较浪费资源，我们的解决方案是，通过同一条流实现动态指标的生产，在不停服务的情况下可以动态添加指标。</p><p>所以在实时平台建设过程中，更多考虑的是如何更有效的利用资源，在哪些环节更能节约化的使用资源，这是在工程方面更多考虑的事情。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3sla-建设">3.SLA 建设<a href="#3sla-建设" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>SLA 主要解决两个问题，一个是端到端的 SLA，一个是作业生产效率的 SLA，我们采用埋点+上报的方式，由于实时流比较大，埋点要尽量简单，不能埋太多的东西，能表达业务即可，每个作业的输出统一上报到 SLA 监控平台，通过统一接口的形式，在每一个作业点上报所需要的信息，最后能够统计到端到端的 SLA。</p><p>在实时生产中，由于链路非常长，无法控制所有链路，但是可以控制自己作业的效率，所以作业 SLA 也是必不可少的。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-实时-olap-方案">4. 实时 OLAP 方案<a href="#4-实时-olap-方案" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>问题：</p><ul><li><p>Binlog 业务还原复杂：业务变化很多，需要某个时间点的变化，因此需要进行排序，并且数据要存起来，这对于内存和 CPU 的资源消耗都是非常大的。</p></li><li><p>Binlog 业务关联复杂：流式计算里，流和流之间的关联，对于业务逻辑的表达是非常困难的。</p></li></ul><p>解决方案：</p><p>通过带计算能力的 OLAP 引擎来解决，不需要把一个流进行逻辑化映射，只需要解决数据实时稳定的入库问题。</p><p>我们这边采用的是 Doris 作为高性能的 OLAP 引擎，由于业务数据产生的结果和结果之间还需要进行衍生计算，Doris 可以利用 unique 模型或聚合模型快速还原业务，还原业务的同时还可以进行汇总层的聚合，也是为了复用而设计。应用层可以是物理的，也可以是逻辑化视图。</p><p>这种模式重在解决业务回撤计算，比如业务状态改变，需要在历史的某个点将值变更，这种场景用流计算的成本非常大，OLAP 模式可以很好的解决这个问题。</p><h1>实时应用案例</h1><p>最后通过一个案例说明，比如商家要根据用户历史下单数给用户优惠，商家需要看到历史下了多少单，历史 T+1 的数据要有，今天实时的数据也要有，这种场景是典型的 Lambda 架构，可以在 Doris 里设计一个分区表，一个是历史分区，一个是今日分区，历史分区可以通过离线的方式生产，今日指标可以通过实时的方式计算，写到今日分区里，查询的时候进行一个简单的汇总。</p><p>这种场景看起来比较简单，难点在于商家的量上来之后，很多简单的问题都会变的复杂，因此后面我们也会通过更多的业务输入，沉淀出更多的业务场景，抽象出来形成统一的生产方案和功能，以最小化的实时计算资源支撑多样化的业务需求，这也是未来需要达到的目的。</p><p>今天的分享就到这里，谢谢大家。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="嘉宾介绍">嘉宾介绍：<a href="#嘉宾介绍" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>朱良，5 年以上传统行业数仓建设经验，6 年互联网数仓经验，技术方向涉及离线，实时数仓治理，系统化能力建设，OLAP 系统及引擎，大数据相关技术，重点跟进 OLAP，实时技术前沿发展趋势。业务方向涉及即席查询，运营分析，策略报告产品，用户画像，人群推荐，实验评估等。</p>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[打造自助对话式数据分析场景，Apache Doris 在思必驰的应用实践｜最佳实践]]></title>
        <id>https://doris.apache.org/zh-CN/blog/scenario</id>
        <link href="https://doris.apache.org/zh-CN/blog/scenario"/>
        <updated>2022-07-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<blockquote><p>作者：赵伟，思必驰大数据高级研发，10年大数据开发和设计经验，负责大数据平台基础技术和OLAP分析技术开发。社区贡献：Doris-spark-connector 的实时读写和优化。</p></blockquote><h1>业务背景</h1><p>思必驰是国内专业的对话式人工智能平台公司，拥有全链路的智能语音语言技术，致力于成为全链路智能语音及语言交互的平台型企业，自主研发了新一代人机交互平台 DUI 和人工智能芯片 TH1520，为车联网、IoT 及政务、金融等众多行业场景合作伙伴提供自然语言交互解决方案。</p><p>思必驰于 2019 年首次引入 Apache Doris ，基于 Apache Doris 构建了实时与离线一体的数仓架构。相对于过去架构，Apache Doris 凭借其灵活的查询模型、极低的运维成本、短平快的开发链路以及优秀的查询性能等诸多方面优势，如今已经在实时业务运营、自助/对话式分析等多个业务场景得到运用，满足了 设备画像/用户标签、业务场景实时运营、数据分析看板、自助 BI、财务对账等多种数据分析需求。在这一过程中我们也积累了诸多使用上的经验，在此分享给大家。</p><h1>架构演进</h1><p>早期业务中离线数据分析是我们的主要需求，近几年，随着业务的不断发展，业务场景对实时数据分析的要求也越来越高，早期数仓架构逐渐力不从心，暴露出很多问题。为了满足业务场景对查询性能、响应时间及并发能力更高的要求，2019年正式引入 Apache Doris 构建实时离线一体的数仓架构。</p><p>以下将为大家介绍思必驰数仓架构的演进之路，早期数仓存在的优缺点，同时分享我们选择 Apache Doris 构建新架构的原因以及面临的新问题与挑战。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="早期数仓架构及痛点">早期数仓架构及痛点<a href="#早期数仓架构及痛点" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="data_wharehouse_architecture_v1_0_git" src="https://cdnd.selectdb.com/zh-CN/assets/images/data_wharehouse_architecture_v1_0_git-006b22817872b04ad8f909e54e8c1411.png" width="1953" height="1106" class="img_ev3q"></p><p>如上图所示，早期架构基于 Hive +Kylin 来构建离线数仓，实时数仓架基于 Spark+MySQL 来构建实时分析数仓。</p><p>我们业务场景的数据源主要分为三类，业务数据库如 MySQL，应用系统如 K8s 容器服务日志，还有车机设备终端的日志。数据源通过 MQTT/HTTP 协议、业务数据库 Binlog 、Filebeat日志采集等多种方式先写入 Kafka 。在早期架构中，数据经 Kafka 后将分为实时和离线两条链路，首先是实时部分，实时部分链路较短，经过 Kafka 缓冲完的数据通过 Spark 计算后放入 MySQL 中进行分析，对于早期的实时分析需求，MySQL 基本可以满足分析需求。而离线部分则由 Spark 进行数据清洗及计算后在 Hive 中构建离线数仓，并使用 Apache Kylin 构建 Cube，在构建 Cube 之前需要提前做好数据模型的的设计，包括关联表、维度表、指标字段、指标需要的聚合函数等，通过调度系统进行定时触发构建，最终使用 HBase 存储构建好的 Cube。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="早期架构的优势"><strong>早期架构的优势：</strong><a href="#早期架构的优势" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ol><li><p>早期架构与 Hive 结合较好，无缝对接 Hadoop 技术体系。</p></li><li><p>离线数仓中基于 Kylin 的预计算、表关联、聚合计算、精确去重等场景，查询性能较高，在并发场景下查询稳定性也较高。</p></li></ol><p>早期架构解决了当时业务中较为紧迫的查询性能问题，但随着业务的发展，对数据分析要求不断升高，早期架构缺点也开始逐渐凸显出来。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="早期架构的痛点"><strong>早期架构的痛点：</strong><a href="#早期架构的痛点" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ol><li><p>依赖组件多。Kylin 在 2.x、3.x 版本中强依赖 Hadoop 和 HBase ，应用组件较多导致开发链路较长，架构稳定性隐患多，维护成本比很高。</p></li><li><p>Kylin 的构建过程复杂，构建任务容易失败。Kylin 构建需要进行打宽表、去重列、生成字典，构建 Cube 等如果每天有 1000-2000 个甚至更多的任务，其中至少会有 10 个甚至更多任务构建失败，导致需要大量时间去写自动运维脚本。</p></li><li><p>维度/字典膨胀严重。维度膨胀指的是在某些业务场景中需要多个分析条件和字段，如果在数据分析模型中选择了很多字段而没有进行剪枝，则会导致 Cube 维度膨胀严重，构建时间变长。而字典膨胀指的是在某些场景中需要长时间做全局精确去重，会使得字典构建越来越大，构建时间也会越来越长，从而导致数据分析性能持续下降。</p></li><li><p>数据分析模型固定，灵活性较低。在实际应用过程中，如果对计算字段或者业务场景进行变更，则要回溯部分甚至全部数据。</p></li><li><p>不支持数据明细查询。早期数仓架构是无法提供明细数据查询的，Kylin 官方给的解决方法是下推给 Presto 做明细查询，这又引入了新的架构，增加了开发和运维成本。</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="架构选型">架构选型<a href="#架构选型" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>为解决以上问题，我们开始探索新的数仓架构优化方案，先后对市面上应用最为广泛的 Apache Doris、Clickhouse 等 OLAP 引擎进行选型调研。相较于 ClickHouse 的繁重运维、各种各样的表类型、不支持关联查询等，结合我们的 OLAP 分析场景中的需求，综合考虑，Apache Doris 表现较为优秀，最终决定引入 Apache Doris 。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="新数仓架构">新数仓架构<a href="#新数仓架构" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="data_wharehouse_architecture_v2_0_git" src="https://cdnd.selectdb.com/zh-CN/assets/images/data_wharehouse_architecture_v2_0_git-825df043f0abf0fda4a92b8dc5d10956.png" width="1993" height="1144" class="img_ev3q"></p><p>如上图所示，我们基于 Apache Doris 构建了实时+离线一体的新数仓架构，与早期架构不同的是，实时和离线的数据分别进行处理后均写入 Apache Doris 中进行分析。</p><p>因历史原因数据迁移难度较大，离线部分基本和早期数仓架构保持一致，在Hive上构建离线数仓，当然完全可以在Apache Doris 上直接构建离线数仓。</p><p>相对早期架构不同的是，离线数据通过 Spark 进行清洗计算后在 Hive 中构建数仓，然后通过 Broker Load 将存储在 Hive 中的数据写入到 Apache Doris 中。这里要说明的， Broker Load 数据导入速度很快，天级别 100-200G 数据导入到 Apache Doris 中仅需要 10-20 分钟。</p><p>实时数据流部分，新架构使用了 Doris-Spark-Connector 来消费 Kafka 中的数据并经过简单计算后写入 Apache Doris 。从架构图所示，实时和离线数据统一在 Apache Doris 进行分析处理，满足了数据应用的业务需求，实现了实时+离线一体的数仓架构。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新架构的收益"><strong>新架构的收益：</strong><a href="#新架构的收益" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ol><li><p>极简运维，维护成本低，不依赖 Hadoop 生态组件。Apache Doris 的部署简单，只有 FE 和 BE 两个进程， FE 和 BE 进程都是可以横向扩展的，单集群支持到数百台机器，数十 PB 的存储容量，并且这两类进程通过一致性协议来保证服务的高可用和数据的高可靠。这种高度集成的架构设计极大的降低了一款分布式系统的运维成本。在使用 Doris 三年时间中花费的运维时间非常少，相比于基于 Kylin 搭建的早期架构，新架构花费极少的时间去做运维。</p></li><li><p>链路短，开发排查问题难度大大降低。基于 Doris 构建实时和离线统一数仓，支持实时数据服务、交互数据分析和离线数据处理场景，这使得开发链路变的很短，问题排查难度大大降低。</p></li><li><p>支持 Runtime 形式的 Join 查询。Runtime 类似 MySQL 的表关联，这对数据分析模型频繁变更的场景非常友好，解决了早期结构数据模型灵活性较低的问题。</p></li><li><p>同时支持 Join、聚合、明细查询。解决了早期架构中部分场景无法查询数据明细的问题。</p></li><li><p>支持多种加速查询方式。支持上卷索引，物化视图，通过上卷索引实现二级索引来加速查询，极大的提升了查询响应时间。</p></li><li><p>支持多种联邦查询方式。支持对 Hive、Iceberg、Hudi 等数据湖和 MySQL、Elasticsearch 等数据库的联邦查询分析。</p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="问题和挑战"><strong>问题和挑战：</strong><a href="#问题和挑战" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在建设新数仓架构过程中，我们遇到了一些问题：</p><ul><li><p>高并发场景对 Apache Doris 查询性能存在一定影响。我们分别在 Doris 0.12 和 Doris 1.1版本上进行测试，同一时间同样的 SQL，10 并发和 50 并发进行访问，性能差别较大。</p></li><li><p>在实时写入场景中，当实时写入的数据量比较大时，会使得 IO 比较密集，导致查询性能下降。</p></li><li><p>大数据量下字符串精确去重较慢。目前使用的是 count distinct 函数、Shuffle 和聚合算子去重，此方式算力比较慢。当前业内常见的解决方法一般是针对去重列构建字典，基于字典构建 Bitmap 索引后使用 Bitmap 函数去重。目前 Apache Doris 只支持数字类型的 Bitmap 索引，具有一定的局限性。</p></li></ul><h1>业务场景的应用</h1><p>Apache Doris 在思必驰最先应用在实时运营业务场景以及自助/对话式分析场景，本章节将介绍两个场景的需求及应用情况。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实时运营业务场景">实时运营业务场景<a href="#实时运营业务场景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="real-time_operation_git" src="https://cdnd.selectdb.com/zh-CN/assets/images/real-time_operation_git-87d6e8ede096ba1551cb290941741126.png" width="1977" height="1226" class="img_ev3q"></p><p>首先是实时运营业务场景，如上图所示，实时运营业务场景的技术架构和前文所述的新版数仓架构基本一致：</p><ul><li><p>数据源：数据源新版架构图中一致，包括 MySQL 中的业务数据，应用系统埋点数据以及设备和终端日志。</p></li><li><p>数据导入：离线数据导入使用 Broker Load，实时数据导入使用 Doris-Spark-Connector 。</p></li><li><p>数据存储与开发：几乎所有的实时数仓全部在 Apache Doris 构建，有一部分离线数据放在 Airflow 上执行 DAG 跑批任务。</p></li><li><p>数据应用：最上层是业务侧提出的业务分析需求，包括大屏展示，数据运营的实时看板、用户画像、BI 看板等。</p></li></ul><p><strong>在实时运营业务场景中，数据分析的需求主要有两方面：</strong></p><ul><li><p>由于实时导入数据量比较大，因此对实时数据的查询效率要求较高</p></li><li><p>在此场景中，有 20+ 人的团队在运营，需要同时开数据运营的看板，因此对实时写入的性能和查询并发会有比较高的要求。</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="自助对话式分析场景">自助/对话式分析场景<a href="#自助对话式分析场景" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>除以上之外，Apache Doris 在思必驰第二个应用是自助/对话式分析场景。</p><p><img loading="lazy" alt="ai_chatbots_git" src="https://cdnd.selectdb.com/zh-CN/assets/images/ai_chatbots_git-f094d1221b56b522cb93ba3bc766e659.png" width="1953" height="1118" class="img_ev3q"></p><p>如上图所示，在一般的 BI 场景中，用户方比如商务、财务、销售、运营、项目经理等会提出需求给数据分析人员，数据分析人员在 BI 平台上做数据看板，最终把看板提供给用户，用户从 BI 看板上获取所需信息，但是有时候用户想要查看明细数据、定制化的看板需求，或者在某些场景需做任意维度的上卷或者下钻的分析，一般场景下 BI 看板是不支持的的，基于以上所述用户需求，我们打造了自助对话式 BI 场景来解决用户定制化的需求。</p><p>与一般 BI 场景不同的是，我们将自助/对话式 BI 场景从数据分析人员方下沉到用户方，用户方只需要通过打字，描述数据分析的需求。基于我们公司自然语言处理的能力，自助/对话式 BI 场景会将自然语言转换成SQL，类似 NL2SQL 技术，需要说明的是这里使用的是定制的自然语言解析，相对开源的 NL2SQL 命中率高、解析结果更精确。当自然语言转换成 SQL 后，将 SQL 给到 Apache Doris 查询得到分析结果。由此，用户通过打字就可以随时查看任意场景下的明细数据，或者任意字段的上卷、下钻。</p><p>相比 Apache Kylin、Apache Druid 等预计算的 OLAP 引擎，Apache Doris 符合以下几个特点：</p><ul><li><p>查询灵活，模型不固定，支持自由定制场景。</p></li><li><p>支持表关联、聚合计算、明细查询。</p></li><li><p>响应时间要快速。</p></li></ul><p>因此我们很顺利的运用 Apache Doris 实现了自助/对话式分析场景。同时，自助/对话式分析在我们公司多个数据分析场景应用反馈非常好。</p><h1>实践经验</h1><p>基于上面的两个场景，我们使用过程当中积累了一些经验和心得，分享给大家。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数仓-表设计"><strong>数仓</strong> <strong>表设计：</strong><a href="#数仓-表设计" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ol><li><p>千万级(量级供参考，跟集群规模有关系)以下的数据表使用 Duplicate 表类型，Duplicate 表类型同时支持聚合、明细查询，不需要额外写明细表。</p></li><li><p>当数据量比较大时，使用 Aggregate 聚合表类型，在聚合表类型上做上卷索引，使用物化视图优化查询、优化聚合字段。由于 Aggregate 表类型是预计算表，会丢失明细数据，如有明细查询需求，需要额外写一张明细表。</p></li><li><p>当数据量又大、关联表又多时，可用 ETL 先写成宽表，然后导入到 Doris，结合 Aggregate 在聚合表类型上面做优化，也可以使用官方推荐Doris 的 Join 优化：<a href="https://doris.apache.org/zh-CN/docs/dev/advanced/join-optimization/doris-join-optimization" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/dev/advanced/join-optimization/doris-join-optimization</a></p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="写入"><strong>写入：</strong><a href="#写入" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ol><li><p>通过 Spark Connector 或 Flink Connector 替代 Routine Load： 最早我们使用的是 Routine Load 实时写入 BE 节点， Routine Load 的工作原理是通过 SQL 在 FE 节点起一个类似于 Task Manager 的管理，把任务分发给 BE 节点，在 BE 节点起 Routine Load 任务。在我们实时场景并发很高的情况下，BE 节点 CPU 峰值一般会达到 70% 左右，在这个前提下，Routine Load 也跑到 BE 节点，将严重影响 BE 节点的查询性能，并且查询 CPU 也将影响 Routine Load 导入， Routine Load 就会因为各种资源竞争死掉。面对此问题，目前解决方法是将 Routine Load 从 BE 节点拿出来放到资源调度上，用 Doris-Spark/Flink-Connector 替换 Routine Load。当时 Doris-spark-Connector 还没有实时写入的功能，我们根据业务需求进行了优化，并将方案贡献给社区。</p></li><li><p>通过攒批来控制实时写入频率：当实时写入频率较高时，小文件堆积过多、查询 IO 升高，小文件排序归并的过程将导致查询时间加长，进而出现查询抖动的情况。当前的解决办法是控制导入频次，调整 Compaction 的合并线程、间隔时间等参数，避免 Tablet 下小文件的堆积。</p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="查询">查询：<a href="#查询" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ol><li><p>增加 SQL 黑名单，控制异常大查询。个别用户在查询时没有加 where 条件，或者查询时选择的时间范围较长，这种情况下 BE 节点的 SQL 会把磁盘的负载和 CPU 拉高，导致其他节点的 SQL 查询变慢，甚至出现 BE 节点宕机的情况。目前的解决方案是使用 SQL 黑名单禁止全表及大量分区实时表的查询。</p></li><li><p>使用 SQL Cache 和 SQL Proxy 实现高并发访问。同时使用 SQL Cache 和 SQL Proxy 的原因在于，SQL Cache的颗粒度到表的分区，如果数据发生变更， SQL Cache 将失效，因此 SQL Cache 缓存适合数据更新频次较低的场景（离线场景、历史分区等）。对于数据需要持续写到最新分区的场景， SQL Cache 则是不适用的。当 SQL Cache 失效时 Query 将全部发送到 Doris 造成重复的 Runtime 计算，而 SQL Proxy 可以设置一秒左右的缓存，可以避免相同条件的重复计算，有效提高集群的并发。</p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="存储">存储：<a href="#存储" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>使用 SSD 和 HDD 做热温数据存储周期的分离，近一年以内的数据存在 SSD，超过一年的数据存在 HDD。Apache Doris 支持对分区设置冷却时间，但只支持创建表分区时设置冷却的时间，目前的解决方案是设置自动同步逻辑，把历史的一些数据从 SSD 迁移到 HDD，确保 1年内的数据都放在 SSD 上。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="升级">升级：<a href="#升级" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>升级前一定要备份元数据，也可以使用新开集群的方式，通过 Broker 将数据文件备份到 S3 或 HDFS 等远端存储系统中，再通过备份恢复的方式将旧集群数据导入到新集群中。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="升级前后性能对比"><strong>升级前后性能对比</strong><a href="#升级前后性能对比" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p><img loading="lazy" alt="doris_1_1_performance_test_git" src="https://cdnd.selectdb.com/zh-CN/assets/images/doris_1_1_performance_test_git-ad375d6872f12ab1e3cca76d30caa1f6.png" width="1961" height="1126" class="img_ev3q"></p><p>思必驰最早是从 0.12 版本开始使用 Apache Doris 的，在今年我们也完成了从 0.15 版本到最新 1.1 版本的升级操作，并进行了基于真实业务场景和数据的性能测试。</p><p>从以上测试报告中可以看到，总共 13 个测试 SQL 中，前 3 个 SQL 升级前后性能差异不明显，因为这 3 个场景主要是简单的聚合函数，对 Apache Doris 性能要求不高，0.15 版本即可满足需求。而在 Q4 之后的场景中 ，SQL 较为复杂，Group By 有多个字段、多个字段聚合函数以及复杂函数，因此升级新版本后带来的性能提升非常明显，平均查询性能较 0.15 版本提升 2-3 倍。由此，非常推荐大家去升级到 Apache Doris 最新版本。</p><h1>总结和收益</h1><ol><li><p>Apache Doris 支持构建离线+实时统一数仓，一个 ETL 脚本即可支持实时和离线数仓，大大缩短开发周期，降低存储成本，避免了离线和实时指标不一致等问题。</p></li><li><p>Apache Doris 1.1.x 版本开始全面支持向量化计算，较之前版本查询性能提升 2-3 倍。经测试，Apache Doris 1.1.x 版本在宽表场景的查询性能已基本与 ClickHouse 持平。</p></li><li><p>功能强大，不依赖其他组件。相比 Apache Kylin、Apache Druid、ClickHouse 等，Apache Doris 不需要引入第 2 个组件填补技术空档。Apache Doris 支持聚合计算、明细查询、关联查询，当前思必驰超 90% 的分析需求已移步 Apache Doris实现。 得益于此优势，技术人员需要运维的组件减少，极大降低运维成本。</p></li><li><p>易用性极高，支持 MySQL 协议和标准 SQL，大幅降低用户学习成本。</p></li></ol><h1>未来计划</h1><ol><li><p>Tablet 小文件过多的问题。Tablet 是 Apache Doris 中读写数据最小的逻辑单元，当 Tablet 小文件比较多时会产生 2 个问题，一是 Tablet 小文件增多会导致元数据内存压力变大。二是对查询性能的影响，即使是几百兆的查询，但在小文件有几十万、上百万的情况下，一个小小的查询也会导致 IO 非常高。未来，我们将做一个 Tablet 文件数量/大小比值的监控，当比值在不合理范围内时及时进行表设计的修改，使得文件数量和大小的比值在合理的范围内。</p></li><li><p>支持基于 Bitmap 的字符串精确去重。业务中精确去重的场景较多，特别是基于字符串的 UV 场景，目前 Apache Doris 使用的是 Distinct 函数来实现的。未来我们会尝试的在 Apache Doris 中创建字典，基于字典去构建字符串的 Bitmap 索引。</p></li><li><p>Doris-Spark-Connector 流式写入支持分块传输。Doris-Spark-Connector 底层是复用的 Stream Load，工作机制是攒批，容易出现两个问题，一是攒批可能会会出现内存压力导致 OOM，二是当Doris-Spark-Connector 攒批时，Spark Checkpoint 没有提交，但 Buffer 已满并提交给 Doris，此时 Apacche Doris 中已经有数据，但由于没有提交 Checkpoint，假如此时任务恰巧失败，启动后又会重新消费写入一遍。未来我们将优化此问题，实现 Doris-Spark-Connector 流式写入支持分块传输。</p></li></ol>]]></content>
        <author>
            <name>赵伟</name>
        </author>
        <category label="最佳实践" term="最佳实践"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Doris 1.1 Release 版本正式发布]]></title>
        <id>https://doris.apache.org/zh-CN/blog/1.1 Release</id>
        <link href="https://doris.apache.org/zh-CN/blog/1.1 Release"/>
        <updated>2022-07-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>亲爱的社区小伙伴们，我们很高兴地宣布，Apache Doris 在 2022 年 7 月 14 日迎来 1.1 Release 版本的正式发布！这是 Apache Doris 正式从 Apache 孵化器毕业后并成为 Apache 顶级项目后发布的第一个 Release 版本。在 1.1 版本中，有 90 位 Contributor 为 Apache Doris 提交了超过 450 项优化和修复，感谢每一个让 Apache Doris 变得更好的你！</p><p>在 1.1 版本中，<strong>我们实现了计算层和存储层的全面向量化、正式将向量化执行引擎作为稳定功能进行全面启用</strong>，所有查询默认通过向量化执行引擎来执行，<strong>性能较之前版本有 3-5 倍的巨大提升</strong>；增加了直接访问 Apache Iceberg 外部表的能力，支持对 Doris 和 Iceberg 中的数据进行联邦查询，<strong>扩展了 Apache Doris 在数据湖上的分析能力</strong>；在原有的 LZ4 基础上增加了 ZSTD 压缩算法，进一步提升了数据压缩率；<strong>修复了诸多之前版本存在的性能与稳定性问题</strong>，使系统稳定性得到大幅提升。欢迎大家下载使用。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="升级说明">升级说明<a href="#升级说明" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="向量化执行引擎默认开启">向量化执行引擎默认开启<a href="#向量化执行引擎默认开启" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 Apache Doris 1.0 版本中，我们引入了向量化执行引擎作为实验性功能。用户需要在执行 SQL 查询手工开启，通过 <code>set batch_size = 4096</code> 和 <code>set enable_vectorized_engine = true </code>配置 session 变量来开启向量化执行引擎。</p><p>在 1.1 版本中，我们正式将向量化执行引擎作为稳定功能进行了全面启用，session 变量<code>enable_vectorized_engine</code> 默认设置为 true，无需用户手工开启，所有查询默认通过向量化执行引擎来执行。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="be-二进制文件更名">BE 二进制文件更名<a href="#be-二进制文件更名" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>BE 二进制文件从原有的 palo_be 更名为 doris_be ，如果您以前依赖进程名称进行集群管理和其他操作，请注意修改相关脚本。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="segment-存储格式升级">Segment 存储格式升级<a href="#segment-存储格式升级" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Apache Doris 早期版本的存储格式为 Segment V1，在 0.12 版本中我们实现了新的存储格式 Segment V2 ，引入了 Bitmap 索引、内存表、Page Cache、字典压缩以及延迟物化等诸多特性。从 0.13 版本开始，新建表的默认存储格式为 Segment V2，与此同时也保留了对 Segment V1 格式的兼容。</p><p>为了保证代码结构的可维护性、降低冗余历史代码带来的额外学习及开发成本，我们决定从下一个版本起不再支持 Segment v1 存储格式，预计在 Apache Doris 1.2 版本中将删除这部分代码，还请所有仍在使用 Segment V1 存储格式的用户务必在 1.1 版本中完成数据格式的转换，操作手册请参考以下链接：</p><p><a href="https://doris.apache.org/zh-CN/docs/1.0/administrator-guide/segment-v2-usage" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/1.0/administrator-guide/segment-v2-usage
</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="正常升级">正常升级<a href="#正常升级" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>正常升级操作请按照官网上的集群升级文档进行滚动升级即可。</p><p><a href="https://doris.apache.org/zh-CN/docs/admin-manual/cluster-management/upgrade" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/admin-manual/cluster-management/upgrade</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重要功能">重要功能<a href="#重要功能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持数据随机分布-实验性功能httpsgithubcomapachedorispull8259-8041">支持数据随机分布 <!-- -->[实验性功能][#8259]<!-- -->(<a href="https://github.com/apache/doris/pull/8259" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/pull/8259</a>) <a href="https://github.com/apache/doris/pull/8041" target="_blank" rel="noopener noreferrer">#8041</a><a href="#支持数据随机分布-实验性功能httpsgithubcomapachedorispull8259-8041" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在某些场景中（例如日志分析类场景），用户可能无法找到一个合适的分桶键来避免数据倾斜，因此需要由系统提供额外的分布方式来解决数据倾斜的问题。</p><p>因此通过在建表时可以不指定具体分桶键，选择使用随机分布对数据进行分桶<code>DISTRIBUTED BY random BUCKET number</code>，数据导入时将会随机写入单个 Tablet ，以减少加载过程中的数据扇出，并减少资源开销、提升系统稳定性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持创建-iceberg-外部表-实验性功能httpsgithubcomapachedorispull7391-7981-8179">支持创建 Iceberg 外部表 <!-- -->[实验性功能][#7391]<!-- -->(<a href="https://github.com/apache/doris/pull/7391" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris/pull/7391</a>) <a href="https://github.com/apache/doris/pull/7981" target="_blank" rel="noopener noreferrer">#7981</a> <a href="https://github.com/apache/doris/pull/8179" target="_blank" rel="noopener noreferrer">#8179</a><a href="#支持创建-iceberg-外部表-实验性功能httpsgithubcomapachedorispull7391-7981-8179" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Iceberg 外部表为 Apache Doris 提供了直接访问存储在 Iceberg 数据的能力。通过 Iceberg 外部表可以实现对本地存储和 Iceberg 存储的数据进行联邦查询，省去繁琐的数据加载工作、简化数据分析的系统架构，并进行更复杂的分析操作。</p><p>在 1.1 版本中，Apache Doris 支持了创建 Iceberg 外部表并查询数据，并支持通过 REFRESH 命令实现 Iceberg 数据库中所有表 Schema 的自动同步。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增加-zstd-压缩算法-8923-9747">增加 ZSTD 压缩算法 <a href="https://github.com/apache/doris/pull/8923" target="_blank" rel="noopener noreferrer">#8923</a> <a href="https://github.com/apache/doris/pull/9747" target="_blank" rel="noopener noreferrer">#9747</a><a href="#增加-zstd-压缩算法-8923-9747" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>目前 Apache Doris 中数据压缩方法是系统统一指定的，默认为 LZ4。针对部分对数据存储成本敏感的场景，例如日志类场景，原有的数据压缩率需求无法得到满足。</p><p>在 1.1 版本中，用户建表时可以在表属性中设置<code>"compression"="zstd"</code> 将压缩方法指定为 ZSTD。在 25GB 1.1 亿行的文本日志测试数据中，<strong>最高获得了近 10 倍的压缩率、较原有压缩率提升了 53%，从磁盘读取数据并进行解压缩的速度提升了 30%</strong> 。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="功能优化">功能优化<a href="#功能优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="更全面的向量化支持"><strong>更全面的向量化支持</strong><a href="#更全面的向量化支持" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 1.1 版本中，我们实现了计算层和存储层的全面向量化，包括：</p><ul><li><p>实现了所有内置函数的向量化</p></li><li><p>存储层实现向量化，并支持了低基数字符串列的字典优化</p></li><li><p>优化并解决了向量化引擎的大量性能和稳定性问题。</p></li></ul><p>我们对 Apache Doris 1.1 版本与 0.15 版本分别在 SSB 和 TPC-H 标准测试数据集上进行了性能测试：</p><ul><li><p>在 SSB 测试数据集的全部 13 个 SQL 上，1.1 版本均优于 0.15 版本，整体性能约提升了 3 倍，解决了 1.0 版本中存在的部分场景性能劣化问题；</p></li><li><p>在 TPC-H 测试数据集的全部 22 个 SQL 上，1.1 版本均优于 0.15 版本，整体性能约提升了 4.5 倍，部分场景性能达到了十余倍的提升；</p></li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edb59781b0f74ff08821467f23a63bad~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p align="center">SSB 测试数据集</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e34377054f4448b3b367789a391f2122~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p align="center">TPC-H 测试数据集</p><p><strong>性能测试报告：</strong></p><p><a href="https://doris.apache.org/zh-CN/docs/benchmark/ssb" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/benchmark/ssb</a></p><p><a href="https://doris.apache.org/zh-CN/docs/benchmark/tpch" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/benchmark/tpch</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="compaction-逻辑优化与实时性保证-10153">Compaction 逻辑优化与实时性保证 <a href="https://github.com/apache/doris/pull/10153" target="_blank" rel="noopener noreferrer">#10153</a><a href="#compaction-逻辑优化与实时性保证-10153" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 Apache Doris 中每次 Commit 都会产生一个数据版本，在高并发写入场景下，容易出现因数据版本过多且 Compaction 不及时而导致的 -235 错误，同时查询性能也会随之下降。</p><p>在 1.1 版本中我们引入了 QuickCompaction，增加了主动触发式的 Compaction 检查，在数据版本增加的时候主动触发 Compaction，同时通过提升分片元信息扫描的能力，快速发现数据版本过多的分片并触发 Compaction。通过主动式触发加被动式扫描的方式，彻底解决数据合并的实时性问题。</p><p>同时，针对高频的小文件 Cumulative Compaction，实现了 Compaction 任务的调度隔离，防止重量级的 Base Compaction 对新增数据的合并造成影响。</p><p>最后，针对小文件合并，优化了小文件合并的策略，采用梯度合并的方式，每次参与合并的文件都属于同一个数据量级，防止大小差别很大的版本进行合并，逐渐有层次的合并，减少单个文件参与合并的次数，能够大幅地节省系统的 CPU 消耗。</p><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6d5c50f16a048f3ab27357bc97b7461~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><p>在数据上游维持每秒 10w 的写入频率时（20 个并发写入任务、每个作业 5000 行、 Checkpoint 间隔 1s），1.1 版本表现如下：</p><ul><li>数据快速合并：Tablet 数据版本维持在 50 以下，Compaction Score 稳定。相较于之前版本高并发写入时频繁出现的 -235 问题，<strong>Compaction 合并效率有 10 倍以上的提升</strong>。</li></ul><ul><li>CPU 资源消耗显著降低：针对小文件 Compaction 进行了策略优化，在上述高并发写入场景下，<strong>CPU 资源消耗降低 25%</strong> ；</li></ul><ul><li>查询耗时稳定：提升了数据整体有序性，大幅降低查询耗时的波动性，<strong>高并发写入时的查询耗时与仅查询时持平</strong>，查询性能较之前版本<strong>有 3-4 倍提升</strong>。</li></ul><p><img loading="lazy" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c79ee9efba0416d81cc7bed1a349fdf~tplv-k3u1fbpfcp-zoom-1.image" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="parquet-和-orc-文件的读取效率优化-9472">Parquet 和 ORC 文件的读取效率优化 <a href="https://github.com/apache/doris/pull/9472" target="_blank" rel="noopener noreferrer">#9472</a><a href="#parquet-和-orc-文件的读取效率优化-9472" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过调整 Arrow 参数，利用 Arrow 的多线程读取能力来加速 Arrow 对每个 row_group 的读取，并修改成 SPSC 模型，通过预取来降低等待网络的代价。优化前后对 Parquet 文件导入的性能有 4 ～ 5 倍的提升。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="更安全的元数据-checkpoint-9180-9192">更安全的元数据 Checkpoint <a href="https://github.com/apache/doris/pull/9180" target="_blank" rel="noopener noreferrer">#9180</a> <a href="https://github.com/apache/doris/pull/9192" target="_blank" rel="noopener noreferrer">#9192</a><a href="#更安全的元数据-checkpoint-9180-9192" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过对元数据检查点后生成的 image 文件进行双重检查和保留历史 image 文件的功能，解决了 image 文件错误导致的元数据损坏问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bug-修复">Bug 修复<a href="#bug-修复" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复由于缺少数据版本而无法查询数据的问题严重9267-9266">修复由于缺少数据版本而无法查询数据的问题。（严重）<a href="https://github.com/apache/doris/pull/9267" target="_blank" rel="noopener noreferrer">#9267</a> <a href="https://github.com/apache/doris/pull/9266" target="_blank" rel="noopener noreferrer">#9266</a><a href="#修复由于缺少数据版本而无法查询数据的问题严重9267-9266" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>问题描述：<code>failed to initialize storage reader. tablet=924991.xxxx, res=-214, backend=xxxx</code></p><p>该问题是在版本 1.0 中引入的，可能会导致多个副本的数据版本丢失。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="解决了资源隔离对加载任务的资源使用限制无效的问题中等9492">解决了资源隔离对加载任务的资源使用限制无效的问题（中等）<a href="https://github.com/apache/doris/pull/9492" target="_blank" rel="noopener noreferrer">#9492</a><a href="#解决了资源隔离对加载任务的资源使用限制无效的问题中等9492" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 1.1 版本中， Broker Load 和 Routine Load 将使用具有指定资源标记的 BE 节点进行加载。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复使用-http-brpc-超过-2gb-传输网络数据包导致数据传输错误的问题中等9770">修复使用 HTTP BRPC 超过 2GB 传输网络数据包导致数据传输错误的问题（中等）<a href="https://github.com/apache/doris/pull/9770" target="_blank" rel="noopener noreferrer">#9770</a><a href="#修复使用-http-brpc-超过-2gb-传输网络数据包导致数据传输错误的问题中等9770" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在以前的版本中，当通过 BRPC 在后端之间传输的数据超过 2GB 时，可能会导致数据传输错误。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="#其他" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="禁用-mini-load">禁用 Mini Load<a href="#禁用-mini-load" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Mini Load 与 Stream Load 的导入实现方式完全一致，都是通过 HTTP 协议提交和传输数据，在导入功能支持上 Stream Load 更加完备。</p><p>在 1.1 版本中，默认情况下 Mini Load 接口 <code>/_load</code> 将处于禁用状态，请统一使用 Stream Load 来替换 Mini Load。您也可以通过关闭 FE 配置项 <code>disable_mini_load</code> 来重新启用 Mini Load 接口。在版本 1.2 中，将彻底删除 Mini Load 。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="完全禁用-segmentv1-存储格式">完全禁用 SegmentV1 存储格式<a href="#完全禁用-segmentv1-存储格式" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>在 1.1 版本中将不再允许新创建 SegmentV1 存储格式的数据，现有数据仍可以继续正常访问。</p><p>您可以使用 ADMIN SHOW TABLET STORAGE FORMAT 语句检查集群中是否仍然存在 SegmentV1 格式的数据，如果存在请务必通过数据转换命令转换为 SegmentV2。</p><p>在 Apache Doris 1.2 版本中不再支持对 Segment V1 数据的访问，同时 Segment V1 代码将被彻底删除。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="限制-string-类型的最大长度-8567">限制 String 类型的最大长度 <a href="https://github.com/apache/doris/pull/8567" target="_blank" rel="noopener noreferrer">#8567</a><a href="#限制-string-类型的最大长度-8567" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>String 类型是 Apache Doris 在 0.15 版本中引入的新数据类型，在过去 String 类型的最大长度允许为 2GB。</p><p>在 1.1 版本中，我们将 String 类型的最大长度限制为 1 MB，超过此长度的字符串无法再写入，同时不再支持将 String 类型用作表的 Key 列、分区列以及分桶列。</p><p>已写入的字符串类型可以正常访问。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修复-fastjson-相关漏洞-9763">修复 fastjson 相关漏洞 <a href="https://github.com/apache/doris/pull/9763" target="_blank" rel="noopener noreferrer">#9763</a><a href="#修复-fastjson-相关漏洞-9763" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>对 Canal 版本进行更新以修复 fastjson 安全漏洞</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="添加了-admin-diagnose-tablet-命令-8839">添加了 ADMIN DIAGNOSE TABLET 命令 <a href="https://github.com/apache/doris/pull/8839" target="_blank" rel="noopener noreferrer">#8839</a><a href="#添加了-admin-diagnose-tablet-命令-8839" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过 ADMIN DIAGNOSE TABLET tablet_id 命令可以快速诊断指定 Tablet 的问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="下载使用">下载使用<a href="#下载使用" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="下载链接">下载链接<a href="#下载链接" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p><a href="https://doris.apache.org/zh-CN/download" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/download</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="升级说明-1">升级说明<a href="#升级说明-1" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>您可以从 Apache Doris 1.0 Release 版本和 1.0.x 发行版本升级到 1.1 Release 版本，升级过程请官网参考文档。如果您当前是 0.15 Release 版本或 0.15.x 发行版本，可跳过 1.0 版本直接升级至 1.1。</p><p>[https://doris.apache.org/zh-CN/docs/admin-manual/cluster-management/upgrade]<!-- -->(<a href="https://doris.apache.org/zh-CN/docs/admin-manual/cluster-management/upgrade" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/docs/admin-manual/cluster-management/upgrade</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="意见反馈">意见反馈<a href="#意见反馈" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>如果您遇到任何使用上的问题，欢迎随时通过 GitHub Discussion 论坛或者 Dev 邮件组与我们取得联系。</p><p>GitHub 论坛：<a href="https://github.com/apache/incubator-doris/discussions" target="_blank" rel="noopener noreferrer">https://github.com/apache/incubator-doris/discussions</a></p><p>Dev 邮件组：<a href="/zh-CN/blog/dev@doris.apache.org">dev@doris.apache.org</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="致谢">致谢<a href="#致谢" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Apache Doris 1.1 Release 版本的发布离不开所有社区用户的支持，在此向所有参与版本设计、开发、测试、讨论的社区贡献者们表示感谢，他们分别是：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@adonis0147</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@airborne12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@amosbird</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@aopangzi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@arthuryangcs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@awakeljw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@BePPPower</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@BiteTheDDDDt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@bridgeDream</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@caiconghui</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@cambyzju</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ccoffline</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@chenlinzhong</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@daikon12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@DarvenDuan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dataalive</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dataroaring</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@deardeng</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Doris-Extras</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@emerkfu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@EmmyMiao87</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@englefly</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Gabriel39</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@GoGoWen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@gtchaos</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@HappenLee</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@hello-stephen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Henry2SS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@hewei-nju</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@hf200012</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@jacktengg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@jackwener</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Jibing-Li</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@JNSimba</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@kangshisen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Kikyou1997</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@kylinmac</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Lchangliang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@leo65535</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@liaoxin01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@liutang123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@lovingfeel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@luozenglin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@luwei16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@luzhijing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@mklzl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@morningman</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@morrySnow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@nextdreamblue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Nivane</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@pengxiangyu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@qidaye</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@qzsee</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SaintBacchus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SleepyBear96</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@smallhibiscus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@spaces-X</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@stalary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@starocean999</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@steadyBoy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SWJTU-ZhangLei</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Tanya-W</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@tarepanda1024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@tianhui5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Userwhite</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wangbo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wangyf0555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@weizuo93</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@whutpencil</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wsjz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wunan1210</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xiaokang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xinyiZzz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xlwh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xy720</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yangzhg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Yankee24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yiguolei</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yinzhijian</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yixiutt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zbtzbtzbt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zenoyang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhangstar333</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhangyifan27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhannngchen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhengshengjun</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhengshiJ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zingdle</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zuochunwei</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zy-kkk</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[开源实时分析型数据库 Apache Doris 正式成为顶级项目]]></title>
        <id>https://doris.apache.org/zh-CN/blog/Annoucing</id>
        <link href="https://doris.apache.org/zh-CN/blog/Annoucing"/>
        <updated>2022-06-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<p>Apache Doris 是一个基于 MPP 的现代化、高性能、实时的分析型数据库，以极速易用的特点被人们所熟知，仅需亚秒级响应时间即可返回海量数据下的查询结果，不仅可以支持高并发的点查询场景，也能支持高吞吐的复杂分析场景。基于此，Apache Doris 在多维报表、用户画像、即席查询、实时大屏等诸多业务领域都能得到很好应用。</p><p>Apache Doris 最早是诞生于百度内部广告报表业务的 Palo 项目，2017 年正式对外开源，2018 年 7 月由百度捐赠给 Apache 基金会进行孵化，之后在 Apache 导师的指导下由孵化器项目管理委员会成员进行孵化和运营。</p><p>我们很自豪 Doris 能够顺利从 Apache 孵化器毕业，这是一个重要的里程碑。在整个孵化阶段，依靠 Apache 理念的指导和孵化器导师的帮助，我们学会了如何以 Apache 的方式去发展我们的项目与社区，也在这一进程中获得了巨大的成长。</p><p>目前 Apache Doris 社区已经聚集了来自不同行业近百家企业的 300 余位贡献者，并且每月活跃贡献者人数也接近 100 位。在孵化期间，Apache Doris 一共发布了 8 个重要版本，完成了包括存储引擎升级、向量化执行引擎等诸多重大功能，并正式发布了 1.0 版本。正是依靠这些来自开源贡献者的力量，才使得 Apache Doris 取得了今天的成绩。</p><p>与此同时，Apache Doris 如今在中国乃至全球范围内都拥有着极为广泛的用户群体，截止目前， Apache Doris 已经在全球超过 500 家企业的生产环境中得到应用，在中国市值或估值排行前 50 的互联网公司中，有超过 80% 长期使用 Apache Doris，包括百度、美团、小米、京东、字节跳动、腾讯、快手、网易、微博、新浪、360 等知名公司。同时在一些传统行业如金融、能源、制造、电信等领域也有着丰富的应用。</p><p>你可以基于 Apache Doris 快速构建一个简单易用并且性能强大的数据分析平台，非常易于上手，所需要付出的学习成本非常低。并且 Apache Doris 的分布式架构非常简洁，可以极大降低系统运维的工作量，这也是越来越多用户选择 Apache Doris 的关键因素。</p><p>作为一款成熟的分析型数据库项目，Apache Doris 有以下优势：</p><ul><li><p>性能优异：自带高效的列式存储引擎，减少数据扫描量的同时还实现了超高的数据压缩比。同时 Doris 还提供了丰富的索引结构来加速数据读取与过滤，利用分区分桶裁剪功能，Doris 可以支持在线服务业务的超高并发，单节点最高可支持上千 QPS。更进一步，Apache Doris 结合了向量化执行引擎来充分发挥现代化 CPU 并行计算能力，辅以智能物化视图技术实现预聚合加速，并可以通过查询优化器同时进行基于规划和基于代价的查询优化。通过上述多种方式，实现了极致的查询性能。</p></li><li><p>简单易用：支持标准 ANSI SQL 语法，包括单表聚合、排序、过滤和多表 Join、子查询等，还支持窗口函数、Grouping Set 等复杂 SQL 语法，同时用户可以通过 UDF 和 UDAF 等自定义函数来拓展系统功能。除此以外，Apache Doris 还实现了 MySQL 协议兼容，用户可以通过各类客户端工具来访问 Doris，并支持与 BI 工具的无缝对接。</p></li><li><p>架构精简：系统只有两个 Frontend（FE）和 Backend（BE）两个模块，其中 FE 节点负责用户请求的接入、查询计划的解析、元数据存储及集群管理等工作，BE 节点负责数据存储和查询计划的执行，自身就是一个完备的分布式数据库管理系统，用户无需安装任何第三方管控组件即可运行起 Apache Doris 集群，并且部署和升级过程都非常简易。同时，任一模块都可以支持横向拓展，集群最高可以拓展到数百个节点，支持存储超过 10PB 的超大规模数据。</p></li><li><p>稳定可靠：支持数据多副本存储，集群具备自愈功能，自身的分布式管理框架可以自动管理数据副本的分布、修复和均衡，副本损坏时系统可以自动感知并进行修复。节点扩容时，仅需一条 SQL 命令即可完成，数据分片会自动在节点间均衡，无需人工干预或操作。无论是扩容、缩容、单节点故障还是在升级过程中，系统都无需停止运行，可正常提供稳定可靠的在线服务。</p></li><li><p>生态丰富：提供丰富的数据同步方式，支持快速加载来自本地、Hadoop、Flink、Spark、Kafka、SeaTunnel 等系统中的数据，也可以直接访问 MySQL、PostgreSQL、Oracle、S3、Hive、Iceberg、Elasticsearch 等系统中的数据而无需数据复制。同时存储在 Doris 中的数据也可以被 Spark、Flink 读取，并且可以输出给上游数据应用进行展示分析。</p></li></ul><p>毕业不是最终目标，它是新征程的起点。在过去，我们发起 Doris 的目标是为更多人提供体验更佳的数据分析工具、解决他们数据分析的难题。成为 Apache 顶级项目一方面是对 Apache Doris 社区过去所有贡献者一直以来辛勤工作的肯定，另一方面也意味着我们在 Apache Way 的指引下建立了一个强大的、繁荣的、可持续发展的开源社区。未来我们将会继续以 Apache 方式运作社区，相信会吸引到更多优秀的开源贡献者参与社区中来，社区也会在所有贡献者的帮助下得到进一步成长。</p><p>Apache Doris 后续将开展更多富有挑战且有意义的工作，包括新的查询优化器、对湖仓一体化的支持，以及面向云上基础设施的架构演进等等。欢迎更多的开源技术爱好者加入 Apache Doris 的社区，携手共成长。</p><p>我们再次由衷地感谢所有参与建设 Apache Doris 社区的贡献者们，以及所有使用 Apache Doris 并不断提出改进建议的用户们。同时也感谢一路走来，不断鼓励、支持和帮助过我们的孵化器导师、IPMC 成员以及各个开源项目社区的朋友们。</p><p><strong>Apache Doris GitHub：</strong></p><p><a href="https://github.com/apache/doris" target="_blank" rel="noopener noreferrer">https://github.com/apache/doris</a></p><p><strong>Apache Doris website:</strong></p><p><a href="http://doris.apache.org" target="_blank" rel="noopener noreferrer">http://doris.apache.org</a></p><p><strong>Please contact us via:</strong></p><p><a href="/zh-CN/blog/dev@doris.apache.org.">dev@doris.apache.org.</a></p><p><strong>See How to subscribe:</strong></p><p><a href="https://doris.apache.org/zh-CN/community/subscribe-mail-list/" target="_blank" rel="noopener noreferrer">https://doris.apache.org/zh-CN/community/subscribe-mail-list</a></p>]]></content>
        <author>
            <name>陈明雨</name>
        </author>
        <category label="重大新闻" term="重大新闻"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris(Incubating) 1.0.0 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-note-1.0.0</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-note-1.0.0"/>
        <updated>2022-04-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>Apache Doris(Incubating) 1.0.0 Release</h1><p>亲爱的社区小伙伴们，历时数月，我们很高兴地宣布，Apache Doris (incubating) 于 2022 年 4 月 18 日迎来了 1.0 Release 版本的正式发布！<strong>这是 Apache Doris 在进入 Apache 基金会孵化以来的第一个 1 位版本，也是迄今为止对 Apache Doris 核心代码重构幅度最大的一个版本<!-- -->*<!-- -->*</strong>！<strong>有 </strong>114 位 Contributor<strong> 为 Apache Doris 提交了</strong>超过 660 项优化和修复<!-- -->*<!-- -->*<!-- -->，感谢每一个让 Apache Doris 变得更好的你！</p><p>在 1.0 版本中，我们引入了向量化执行引擎、Hive 外部表、Lateral View 语法及 Table Function 表函数、Z-Order 数据索引、Apache SeaTunnel 插件等重要功能，增加了对 Flink CDC 同步更新和删除数据的支持，优化了诸多数据导入和查询过程中的问题，对 Apache Doris 的查询性能、易用性、稳定性等多方特效进行了全面加强，欢迎大家下载使用！点击文末“<strong>阅读原文</strong>”即可直接前往下载地址。</p><p>每一个不曾发版的日子，背后都有无数贡献者枕戈待旦，不敢停歇半分。在此我们尤其要感谢来自<strong>向量化执行引擎、查询优化器、可视化运维平台 等 SIG （专项兴趣小组）的小伙伴</strong>。自 2021 年 8 月 Apache Doris 社区 SIG 小组成立以来，<strong>来自百度、美团、小米、京东、蜀海、字节跳动、腾讯、网易、阿里巴巴、PingCAP、Nebula Graph 等十余家公司的数十名贡献者</strong>作为首批成员加入到 SIG 中，第一次以专项小组的开源协作形式完成了向量化执行引擎、查询优化器、 Doris Manager 可视化监控运维平台等如此重大功能的开发，<strong>历时半年以上、开展技术调研和分享数十次、召开远程会议近百次、累计提交 Commits 多达数百个、涉及代码行数高达十余万行</strong>，正是因为有他们的贡献，才有 1.0 版本的问世，让我们再次对他们的辛勤付出表示最真诚的感谢！</p><p>与此同时，Apache Doris 的贡献者数量已超过 300 人，每月活跃的贡献者数量超过了 60 人，近几周平均每周提交的 Commits 数量也超过 80，社区聚集的开发者规模及活跃度已经有了极大的提升。我们十分期待有更多的小伙伴参与社区贡献中来，与我们一道把 Apache Doris 打造成全球顶级的分析型数据库，也期待所有小伙伴可以与我们一起收获宝贵的成长。如果你想参与社区，欢迎通过开发者邮箱 <a href="mailto:dev@doris.apache.org" target="_blank" rel="noopener noreferrer">dev@doris.apache.org</a> 与我们取得联系。</p><p>我们欢迎大家在使用过程中，有任何问题通过 GitHub Discussion 或者 Dev 邮件组与我们取得联系，也期待大家参与社区讨论和建设中 。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重要更新">重要更新<a href="#重要更新" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="向量化执行引擎-experimental">向量化执行引擎 <!-- -->[Experimental]<a href="#向量化执行引擎-experimental" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>过去 Apache Doris 的 SQL 执行引擎是基于行式内存格式以及基于传统的火山模型进行设计的，在进行 SQL 算子与函数运算时存在非必要的开销，导致 Apache Doris 执行引擎的效率受限，并不适应现代 CPU 的体系结构。向量化执行引擎的目标是替换 Apache Doris 当前的行式 SQL 执行引擎，充分释放现代 CPU 的计算能力，突破在 SQL 执行引擎上的性能限制，发挥出极致的性能表现。</p><p>基于现代 CPU 的特点与火山模型的执行特点，向量化执行引擎重新设计了在列式存储系统的 SQL 执行引擎：</p><ul><li>重新组织内存的数据结构，用 Column 替换 Tuple，提高了计算时 Cache 亲和度，分支预测与预取内存的友好度</li><li>分批进行类型判断，在本次批次中都使用类型判断时确定的类型，将每一行类型判断的虚函数开销分摊到批量级别。</li><li>通过批级别的类型判断，消除了虚函数的调用，让编译器有函数内联以及 SIMD 优化的机会</li></ul><p>从而大大提高了 CPU 在 SQL 执行时的效率，提升了 SQL 查询的性能。</p><p>在 Apache Doris 1.0 版本中，通过 set batch_size = 4096 和 set enable_vectorized_engine = true 开启向量化执行引擎，多数情况下可显著提升查询性能。在 SSB 和 OnTime 标准测试数据集下，多表关联和宽列查询两大场景的整体性能分别有 3 倍和 2.6 倍的提升。</p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/1.0.0-1-e7888e124fefa8bd38215dd9d4be4794.png" width="1080" height="697" class="img_ev3q"></p><p><img loading="lazy" src="https://cdnd.selectdb.com/zh-CN/assets/images/1.0.0-2-d9e8be01f5ff99dd6e15fc33af4518fc.png" width="1080" height="819" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lateral-view-语法-experimental">Lateral View 语法 <!-- -->[Experimental]<a href="#lateral-view-语法-experimental" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>通过 Lateral View 语法，我们可以使用 explod_bitmap 、explode_split、explode_jaon_array 等 Table Function 表函数，将 bitmap、String 或 Json Array 由一列展开成多行，以便后续可以对展开的数据进行进一步处理（如 Filter、Join 等）。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hive-外表-experimental">Hive 外表 <!-- -->[Experimental]<a href="#hive-外表-experimental" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Hive External Table 为用户提供了通过 Doris 直接访问 Hive 表的能力，外部表省去了 繁琐的数据导入工作，可以借助 Doris 本身 OLAP 的能力来解决 Hive 表的数据分析问题。当前版本支持将 Hive 数据源接入 Doris，并支持通过 Doris 与 Hive 数据源中的数据进行联邦查询，进行更加复杂的分析操作。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持-z-order-数据排序格式">支持 Z-Order 数据排序格式<a href="#支持-z-order-数据排序格式" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Apache Doris 数据是按照前缀列排序存储的，因此在包含前缀查询条件时，可以在排序数据上进行快速的数据查找，但如果查询条件不是前缀列，则无法利用数据排序的特征进行快速数据查找。通过 Z-Order Indexing 可以解决上述问题，在 1.0 版本中我们增加了 Z-Order 数据排序格式，在看板类多列查询的场景中可以起到很好过滤效果，加速对非前缀列条件的过滤性能。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持-apache-seatunnelincubating插件">支持 Apache SeaTunnel（Incubating）插件<a href="#支持-apache-seatunnelincubating插件" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>Apache SeaTunnel 是一个高性能的分布式数据集成框架，架构于 Apache Spark 和 Apache Flink 之上。在 Apache Doris 1.0 版本中，我们增加了 SaeTunnel 插件，用户可以借助 Apache SeaTunnel 进行多数据源之间的同步和 ETL。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新增函数">新增函数<a href="#新增函数" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>支持更多 bitmap 函数，具体可查看函数手册：</p><ul><li>bitmap_max</li><li>bitmap_and_not</li><li>bitmap_and_not_count</li><li>bitmap_has_all</li><li>bitmap_and_count</li><li>bitmap_or_count</li><li>bitmap_xor_count</li><li>bitmap_subset_limit</li><li>sub_bitmap</li></ul><p>支持国密算法 SM3/SM4；</p><blockquote><p><strong>注意</strong>：以上标记 <!-- -->[Experimental]<!-- --> 的功能为实验性功能，我们将会在后续版本中对以上功能进行持续优化和迭代，并后续版本中进一步完善。在使用过程中有任何问题或意见，欢迎随时与我们联系</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="重要优化">重要优化<a href="#重要优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="功能优化">功能优化<a href="#功能优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>降低大批量导入时，生成的 Segment 文件数量，以降低 Compaction 压力。</li><li>通过 BRPC 的 attachment 功能传输数据，以查询过程中的降低序列化和反序列化开销。</li><li>支持直接返回 HLL/BITMAP 类型的二进制数据，用于业务在外侧解析。</li><li>优化并降低 BRPC 出现 OVERCROWDED 和 NOT_CONNECTED 错误的概率，增强系统稳定性。</li><li>增强导入的容错性。</li><li>支持通过 Flink CDC 同步更新和删除数据。</li><li>支持自适应的 Runtime Filter。</li><li>显著降低 insert into 操作的内存占用</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="易用性改进">易用性改进<a href="#易用性改进" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>Routine Load 支持显示当前 offset 延迟数量等状态。</li><li>FE audit log 中增加查询峰值内存使用量的统计。</li><li>Compaction URL 结果中增加缺失版本的信息，方便排查问题。</li><li>支持将 BE 标记为不可查询或不可导入，以快速屏蔽问题节点。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="重要-bug-修复">重要 Bug 修复<a href="#重要-bug-修复" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>修复若干查询错误问题。</li><li>修复 Broker Load 若干调度逻辑问题。</li><li>修复 STREAM 关键词导致元数据无法加载的问题。</li><li>修复 Decommission 无法正确执行的问题。</li><li>修复部分情况下操作 Schema Change 操作可能出现 -102 错误的问题。</li><li>修复部分情况下使用 String 类型可能导致 BE 宕机的问题。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="#其他" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>增加 Minidump 功能；</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="更新日志">更新日志<a href="#更新日志" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>详细 Release Note 请查看链接：</p><p><a href="https://github.com/apache/incubator-doris/issues/8549" target="_blank" rel="noopener noreferrer">https://github.com/apache/incubator-doris/issues/8549</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="致谢">致谢<a href="#致谢" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Apache Doris(incubating) 1.0 Release 版本的发布离不开所有社区用户的支持，在此向所有参与版本设计、开发、测试、讨论的社区贡献者们表示感谢，他们分别是：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@924060929</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@adonis0147</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Aiden-Dong</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@aihai</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@airborne12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Alibaba-HZY</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@amosbird</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@arthuryangcs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@awakeljw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@bingzxy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@BiteTheDDDDt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@blackstar-baba</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@caiconghui</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@CalvinKirs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@cambyzju</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@caoliang-web</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ccoffline</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@chaplinthink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@chovy-3012</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ChPi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@DarvenDuan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dataalive</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dataroaring</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dh-cloud</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dohongdayi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@dongweizhao</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@drgnchan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@e0c9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@EmmyMiao87</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@englefly</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@eyesmoons</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@freemandealer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Gabriel39</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@gaodayue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@GoGoWen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Gongruixiao</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@gwdgithubnom</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@HappenLee</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Henry2SS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@hf200012</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@htyoung</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@jacktengg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@jackwener</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@JNSimba</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Keysluomo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@kezhenxu94</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@killxdcj</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@lihuigang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@littleeleventhwolf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@liutang123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@liuzhuang2017</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@lonre</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@lovingfeel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@luozenglin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@luzhijing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@MeiontheTop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@mh-boy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@morningman</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@mrhhsg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Myasuka</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@nimuyuhan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@obobj</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@pengxiangyu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@qidaye</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@qzsee</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@renzhimin7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Royce33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@SleepyBear96</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@smallhibiscus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@sodamnsure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@spaces-X</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@sparklezzz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@stalary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@steadyBoy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@tarepanda1024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@THUMarkLau</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@tianhui5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@tinkerrrr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ucasfl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Userwhite</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@vinson0526</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wangbo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wangshuo128</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wangyf0555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@weajun</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@weizuo93</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@whutpencil</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@WindyGao</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@wunan1210</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xiaokang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xiaokangguo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xiedeyantu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xinghuayu007</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xingtanzjr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xinyiZzz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xtr1993</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xu20160924</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xuliuzhe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xuzifu666</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@xy720</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yangzhg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yiguolei</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yinzhijian</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@yjant</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zbtzbtzbt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zenoyang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zh0122</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhangstar333</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhannngchen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhengshengjun</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zhengshiJ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ZhikaiZuo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ztgoto</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@zuochunwei</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Doris 发版通告] Apache Doris(Incubating) 0.15.0 Release]]></title>
        <id>https://doris.apache.org/zh-CN/blog/release-note-0.15.0</id>
        <link href="https://doris.apache.org/zh-CN/blog/release-note-0.15.0"/>
        <updated>2021-11-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!--]]></summary>
        <content type="html"><![CDATA[<h1>Apache Doris(Incubating) 0.15.0 Release</h1><p>亲爱的社区小伙伴们，历时数个月精心打磨，我们很高兴地宣布， Apache Doris(incubating) 于 2021 年 11 月 29 日迎来了 0.15.0 Release 版本的正式发布！有 99 位 Contributor 为 Apache Doris 提交了近 700 项优化和修复，在此我们也对所有贡献者表示最真诚的感激！</p><p>在 0.15.0 Release 版本中，我们增加了诸多新功能，对 Apache Doris 的查询性能、易用性、稳定性方面等进行了全面优化：新增资源划分和隔离功能，用户可以通过资源标签的方式将集群中的 BE 节点划分为资源组，实现对在线、离线业务的统一管理和资源隔离；增加了 Runtime Filter 及 Join Reorder 功能，对多表 Join 场景的查询效率进行了大幅提升，在 Star Schema Benchmark 测试数据集下有 2-10 倍的性能提升；新增导入方式 Binlog Load ，使 Doris 可以增量同步 MySQL 中对数据更新操作的 CDC ；支持 String 列类型，长度最大支持 2GB ；支持 List 分区功能，可以通过枚举值创建分区；支持 Unique Key 模型上的 Update 语句；Spark-Doris-Connector 支持数据写入 Doris ……还有更多重要特性，欢迎大家下载使用。</p><p>我们欢迎大家在使用过程中，有任何问题通过 GitHub Discussion 或者 Dev 邮件组与我们取得联系，也期待大家参与社区讨论和建设中 。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重要更新">重要更新<a href="#重要更新" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="资源划分与隔离">资源划分与隔离<a href="#资源划分与隔离" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><p>用户可以通过资源标签的方式将一个 Doris 集群中的 BE 节点划分成多个资源组，从而可以进行在线、离线业务的统一管理和节点级别的资源隔离。
同时，还可以通过限制单个查询任务的 CPU、内存开销以及复杂度，来控制单个查询的资源开销，从而降低不同查询之间的资源抢占问题。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="性能优化">性能优化<a href="#性能优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><p>Runtime Filter 功能通过使用 Join 算子中右表的 Join Key 列条件来过滤左表的数据，在大部分 Join 场景下可以显著提升查询效率。如在 Star Schema Benchmark ( TPCH 的精简测试集) 下可以获得 2-10 倍的性能提升。</p></li><li><p>Join Reorder 功能可以通过通过代价模型自动帮助调整 SQL 中 Join 的顺序，以帮助获得最优的 Join 效率。
可通过会话变量  <code>set enable_cost_based_join_reorder=true</code>  开启。</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新增功能">新增功能<a href="#新增功能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持直接对接 Canal Server 同步 MySQL binlog 数据。</li><li>支持 String 列类型，最大支持 2GB 。</li><li>支持 List 分区功能，可以针对枚举值创建分区。</li><li>支持事务性 Insert 语句功能。可以通过 begin ; insert ; insert; ,... ; commit ; 的方式批量导入数据。</li><li>支持在 Unique Key 模型上的 Update 语句功能。可以在 Unique Key 模型表上执行 Update Set where 语句。</li><li>支持 SQL 阻塞名单功能。可以通过正则、Hash 值匹配等方式阻止部分 SQL 的执行。</li><li>支持 LDAP 登陆验证。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="拓展功能">拓展功能<a href="#拓展功能" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持 Flink-Doris-Connector 。</li><li>支持 DataX doriswriter 插件。</li><li>Spark-Doris-Connector 支持数据写入 Doris 。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="功能优化">功能优化<a href="#功能优化" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="查询">查询<a href="#查询" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持在 SQL 查询规划阶段，利用 BE 的函数计算能力计算所有常量表达式。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="导入">导入<a href="#导入" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持导入文本格式文件时，指定多字节行列分隔符或不可见分隔符。</li><li>支持通过 Stream Load 导入压缩格式文件。</li><li>Stream Load支持导入多行格式的 Json 数据。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="导出">导出<a href="#导出" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持 Export 导出功能指定 where 过滤条件。支持导出文件使用多字节行列分隔符。支持导出到本地文件。</li><li>Export 导出功能支持仅导出指定的列。</li><li>支持通过 outfile 语句导出结果集到本地磁盘，并支持导出后写入导出成功的标记文件。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="易用性">易用性<a href="#易用性" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>动态分区功能支持创建、保留指定的历史分区、支持自动冷热数据迁移设置。</li><li>支持在命令行使用可视化的树形结构展示查询、导入的计划和 Profile。</li><li>支持记录并查看 Stream Load 操作日志。</li><li>通过 Routine Load 消费 Kafka 数据时，可以指定时间点进行消费。</li><li>支持通过 show create routine load 功能导出 Routine Load 的创建语句。</li><li>支持通过 pause/resume all routine load 命令一键启停所有 Routine Load Job。</li><li>支持通过 alter routine load 语句修改 Routine Load 的 Broker List 和 Topic。</li><li>支持 create table as select 功能。</li><li>支持通过 alter table 命令修改列注释和表注释。</li><li>show tablet status 增加表创建时间、数据更新时间。</li><li>支持通过 show data skew 命令查看表的数据量分布，以排查数据倾斜问题。</li><li>支持通过 show/clean trash 命令查看 BE 文件回收站的磁盘占用情况并主动清除。</li><li>支持通过 show view 语句展示一个表被哪些视图所引用。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新增函数">新增函数<a href="#新增函数" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li><code>bitmap_min</code>, <code>bit_length</code></li><li><code>yearweek</code>, <code>week</code>, <code>makedate</code></li><li><code>percentile</code> 精确百分位函数</li><li><code>json_array</code>，<code>json_object</code>，<code>json_quote</code></li><li>支持为 <code>AES_ENCRYPT</code> 和 <code>AES_DECRYPT</code> 函数创建自定义公钥。</li><li>支持通过 <code>create alias function</code> 创建函数别名来组合多个函数。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="#其他" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h3><ul><li>支持访问 SSL 连接协议的ES外表。</li><li>支持在动态分区属性中指定热点分区的数量，热点分区将存储在 SSD 磁盘中。</li><li>支持通过 Broker Load 导入 Json 格式数据。</li><li>支持直接通过 libhdfs3 库访问 HDFS 进行数据的导入导出，而不需要 Broker 进程。</li><li>select into outfile 功能支持导出 Parquet 文件格式，并支持并行导出。</li><li>ODBC 外表支持 SQLServer。 </li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="致谢">致谢<a href="#致谢" class="hash-link" aria-label="标题的直接链接" title="标题的直接链接">​</a></h2><p>Apache Doris(incubating) 0.15.0 Release 版本的发布离不开所有社区用户的支持，在此向所有参与版本设计、开发、测试、讨论的社区贡献者们表示感谢，他们分别是：</p><ul><li><a href="https://github.com/924060929" target="_blank" rel="noopener noreferrer">@924060929</a></li><li><a href="https://github.com/acelyc111" target="_blank" rel="noopener noreferrer">@acelyc111</a></li><li><a href="https://github.com/Aimiyoo" target="_blank" rel="noopener noreferrer">@Aimiyoo</a></li><li><a href="https://github.com/amosbird" target="_blank" rel="noopener noreferrer">@amosbird</a></li><li><a href="https://github.com/arthur-zhang" target="_blank" rel="noopener noreferrer">@arthur-zhang</a></li><li><a href="https://github.com/azurenake" target="_blank" rel="noopener noreferrer">@azurenake</a></li><li><a href="https://github.com/BiteTheDDDDt" target="_blank" rel="noopener noreferrer">@BiteTheDDDDt</a></li><li><a href="https://github.com/caiconghui" target="_blank" rel="noopener noreferrer">@caiconghui</a></li><li><a href="https://github.com/caneGuy" target="_blank" rel="noopener noreferrer">@caneGuy</a></li><li><a href="https://github.com/caoliang-web" target="_blank" rel="noopener noreferrer">@caoliang-web</a></li><li><a href="https://github.com/ccoffline" target="_blank" rel="noopener noreferrer">@ccoffline</a></li><li><a href="https://github.com/chaplinthink" target="_blank" rel="noopener noreferrer">@chaplinthink</a></li><li><a href="https://github.com/chovy-3012" target="_blank" rel="noopener noreferrer">@chovy-3012</a></li><li><a href="https://github.com/ChPi" target="_blank" rel="noopener noreferrer">@ChPi</a></li><li><a href="https://github.com/copperybean" target="_blank" rel="noopener noreferrer">@copperybean</a></li><li><a href="https://github.com/crazyleeyang" target="_blank" rel="noopener noreferrer">@crazyleeyang</a></li><li><a href="https://github.com/dh-cloud" target="_blank" rel="noopener noreferrer">@dh-cloud</a></li><li><a href="https://github.com/DinoZhang" target="_blank" rel="noopener noreferrer">@DinoZhang</a></li><li><a href="https://github.com/dixingxing0" target="_blank" rel="noopener noreferrer">@dixingxing0</a></li><li><a href="https://github.com/dohongdayi" target="_blank" rel="noopener noreferrer">@dohongdayi</a></li><li><a href="https://github.com/e0c9" target="_blank" rel="noopener noreferrer">@e0c9</a></li><li><a href="https://github.com/EmmyMiao87" target="_blank" rel="noopener noreferrer">@EmmyMiao87</a></li><li><a href="https://github.com/eyesmoons" target="_blank" rel="noopener noreferrer">@eyesmoons</a></li><li><a href="https://github.com/francisoliverlee" target="_blank" rel="noopener noreferrer">@francisoliverlee</a></li><li><a href="https://github.com/Gabriel39" target="_blank" rel="noopener noreferrer">@Gabriel39</a></li><li><a href="https://github.com/gaodayue" target="_blank" rel="noopener noreferrer">@gaodayue</a></li><li><a href="https://github.com/GoGoWen" target="_blank" rel="noopener noreferrer">@GoGoWen</a></li><li><a href="https://github.com/HappenLee" target="_blank" rel="noopener noreferrer">@HappenLee</a></li><li><a href="https://github.com/harveyyue" target="_blank" rel="noopener noreferrer">@harveyyue</a></li><li><a href="https://github.com/Henry2SS" target="_blank" rel="noopener noreferrer">@Henry2SS</a></li><li><a href="https://github.com/hf200012" target="_blank" rel="noopener noreferrer">@hf200012</a></li><li><a href="https://github.com/huangmengbin" target="_blank" rel="noopener noreferrer">@huangmengbin</a></li><li><a href="https://github.com/huozhanfeng" target="_blank" rel="noopener noreferrer">@huozhanfeng</a></li><li><a href="https://github.com/huzk8" target="_blank" rel="noopener noreferrer">@huzk8</a></li><li><a href="https://github.com/hxianshun" target="_blank" rel="noopener noreferrer">@hxianshun</a></li><li><a href="https://github.com/ikaruga4600" target="_blank" rel="noopener noreferrer">@ikaruga4600</a></li><li><a href="https://github.com/JameyWoo" target="_blank" rel="noopener noreferrer">@JameyWoo</a></li><li><a href="https://github.com/Jennifer88huang" target="_blank" rel="noopener noreferrer">@Jennifer88huang</a></li><li><a href="https://github.com/JinLiOnline" target="_blank" rel="noopener noreferrer">@JinLiOnline</a></li><li><a href="https://github.com/jinyuanlu" target="_blank" rel="noopener noreferrer">@jinyuanlu</a></li><li><a href="https://github.com/JNSimba" target="_blank" rel="noopener noreferrer">@JNSimba</a></li><li><a href="https://github.com/killxdcj" target="_blank" rel="noopener noreferrer">@killxdcj</a></li><li><a href="https://github.com/kuncle" target="_blank" rel="noopener noreferrer">@kuncle</a></li><li><a href="https://github.com/liutang123" target="_blank" rel="noopener noreferrer">@liutang123</a></li><li><a href="https://github.com/luozenglin" target="_blank" rel="noopener noreferrer">@luozenglin</a></li><li><a href="https://github.com/luzhijing" target="_blank" rel="noopener noreferrer">@luzhijing</a></li><li><a href="https://github.com/MarsXDM" target="_blank" rel="noopener noreferrer">@MarsXDM</a></li><li><a href="https://github.com/mh-boy" target="_blank" rel="noopener noreferrer">@mh-boy</a></li><li><a href="https://github.com/mk8310" target="_blank" rel="noopener noreferrer">@mk8310</a></li><li><a href="https://github.com/morningman" target="_blank" rel="noopener noreferrer">@morningman</a></li><li><a href="https://github.com/Myasuka" target="_blank" rel="noopener noreferrer">@Myasuka</a></li><li><a href="https://github.com/nimuyuhan" target="_blank" rel="noopener noreferrer">@nimuyuhan</a></li><li><a href="https://github.com/pan3793" target="_blank" rel="noopener noreferrer">@pan3793</a></li><li><a href="https://github.com/PatrickNicholas" target="_blank" rel="noopener noreferrer">@PatrickNicholas</a></li><li><a href="https://github.com/pengxiangyu" target="_blank" rel="noopener noreferrer">@pengxiangyu</a></li><li><a href="https://github.com/pierre94" target="_blank" rel="noopener noreferrer">@pierre94</a></li><li><a href="https://github.com/qidaye" target="_blank" rel="noopener noreferrer">@qidaye</a></li><li><a href="https://github.com/qzsee" target="_blank" rel="noopener noreferrer">@qzsee</a></li><li><a href="https://github.com/shiyi23" target="_blank" rel="noopener noreferrer">@shiyi23</a></li><li><a href="https://github.com/smallhibiscus" target="_blank" rel="noopener noreferrer">@smallhibiscus</a></li><li><a href="https://github.com/songenjie" target="_blank" rel="noopener noreferrer">@songenjie</a></li><li><a href="https://github.com/spaces-X" target="_blank" rel="noopener noreferrer">@spaces-X</a></li><li><a href="https://github.com/stalary" target="_blank" rel="noopener noreferrer">@stalary</a></li><li><a href="https://github.com/stdpain" target="_blank" rel="noopener noreferrer">@stdpain</a></li><li><a href="https://github.com/Stephen-Robin" target="_blank" rel="noopener noreferrer">@Stephen-Robin</a></li><li><a href="https://github.com/Sunt-ing" target="_blank" rel="noopener noreferrer">@Sunt-ing</a></li><li><a href="https://github.com/Taaang" target="_blank" rel="noopener noreferrer">@Taaang</a></li><li><a href="https://github.com/tarepanda1024" target="_blank" rel="noopener noreferrer">@tarepanda1024</a></li><li><a href="https://github.com/tianhui5" target="_blank" rel="noopener noreferrer">@tianhui5</a></li><li><a href="https://github.com/tinkerrrr" target="_blank" rel="noopener noreferrer">@tinkerrrr</a></li><li><a href="https://github.com/TobKed" target="_blank" rel="noopener noreferrer">@TobKed</a></li><li><a href="https://github.com/ucasfl" target="_blank" rel="noopener noreferrer">@ucasfl</a></li><li><a href="https://github.com/Userwhite" target="_blank" rel="noopener noreferrer">@Userwhite</a></li><li><a href="https://github.com/vinson0526" target="_blank" rel="noopener noreferrer">@vinson0526</a></li><li><a href="https://github.com/wangbo" target="_blank" rel="noopener noreferrer">@wangbo</a></li><li><a href="https://github.com/wangliansong" target="_blank" rel="noopener noreferrer">@wangliansong</a></li><li><a href="https://github.com/wangshuo128" target="_blank" rel="noopener noreferrer">@wangshuo128</a></li><li><a href="https://github.com/weajun" target="_blank" rel="noopener noreferrer">@weajun</a></li><li><a href="https://github.com/weihongkai2008" target="_blank" rel="noopener noreferrer">@weihongkai2008</a></li><li><a href="https://github.com/weizuo93" target="_blank" rel="noopener noreferrer">@weizuo93</a></li><li><a href="https://github.com/WindyGao" target="_blank" rel="noopener noreferrer">@WindyGao</a></li><li><a href="https://github.com/wunan1210" target="_blank" rel="noopener noreferrer">@wunan1210</a></li><li><a href="https://github.com/wuyunfeng" target="_blank" rel="noopener noreferrer">@wuyunfeng</a></li><li><a href="https://github.com/xhmz" target="_blank" rel="noopener noreferrer">@xhmz</a></li><li><a href="https://github.com/xiaokangguo" target="_blank" rel="noopener noreferrer">@xiaokangguo</a></li><li><a href="https://github.com/xiaoxiaopan118" target="_blank" rel="noopener noreferrer">@xiaoxiaopan118</a></li><li><a href="https://github.com/xinghuayu007" target="_blank" rel="noopener noreferrer">@xinghuayu007</a></li><li><a href="https://github.com/xinyiZzz" target="_blank" rel="noopener noreferrer">@xinyiZzz</a></li><li><a href="https://github.com/xuliuzhe" target="_blank" rel="noopener noreferrer">@xuliuzhe</a></li><li><a href="https://github.com/xxiao2018" target="_blank" rel="noopener noreferrer">@xxiao2018</a></li><li><a href="https://github.com/xy720" target="_blank" rel="noopener noreferrer">@xy720</a></li><li><a href="https://github.com/yangzhg" target="_blank" rel="noopener noreferrer">@yangzhg</a></li><li><a href="https://github.com/yx91490" target="_blank" rel="noopener noreferrer">@yx91490</a></li><li><a href="https://github.com/zbtzbtzbt" target="_blank" rel="noopener noreferrer">@zbtzbtzbt</a></li><li><a href="https://github.com/zenoyang" target="_blank" rel="noopener noreferrer">@zenoyang</a></li><li><a href="https://github.com/zh0122" target="_blank" rel="noopener noreferrer">@zh0122</a></li><li><a href="https://github.com/zhangboya1" target="_blank" rel="noopener noreferrer">@zhangboya1</a></li><li><a href="https://github.com/zhangstar333" target="_blank" rel="noopener noreferrer">@zhangstar333</a></li><li><a href="https://github.com/zuochunwei" target="_blank" rel="noopener noreferrer">@zuochunwei</a></li></ul>]]></content>
        <author>
            <name>Apache Doris</name>
        </author>
        <category label="版本发布" term="版本发布"/>
    </entry>
</feed>