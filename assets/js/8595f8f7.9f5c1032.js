"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[96987],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},83963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const o={title:"GROUPING",language:"en"},i=void 0,l={unversionedId:"sql-manual/sql-functions/aggregate-functions/grouping",id:"sql-manual/sql-functions/aggregate-functions/grouping",title:"GROUPING",description:"\x3c!--",source:"@site/docs/sql-manual/sql-functions/aggregate-functions/grouping.md",sourceDirName:"sql-manual/sql-functions/aggregate-functions",slug:"/sql-manual/sql-functions/aggregate-functions/grouping",permalink:"/docs/dev/sql-manual/sql-functions/aggregate-functions/grouping",draft:!1,tags:[],version:"current",frontMatter:{title:"GROUPING",language:"en"},sidebar:"docs",previous:{title:"SEQUENCE-COUNT",permalink:"/docs/dev/sql-manual/sql-functions/aggregate-functions/sequence-count"},next:{title:"GROUPING_ID",permalink:"/docs/dev/sql-manual/sql-functions/aggregate-functions/grouping-id"}},p={},s=[{value:"GROUPING",id:"grouping",level:2},{value:"Name",id:"name",level:3},{value:"Description",id:"description",level:3},{value:"Example",id:"example",level:3},{value:"Keywords",id:"keywords",level:3},{value:"Best Practice",id:"best-practice",level:3}],c={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"grouping"},"GROUPING"),(0,r.kt)("h3",{id:"name"},"Name"),(0,r.kt)("p",null,"GROUPING"),(0,r.kt)("h3",{id:"description"},"Description"),(0,r.kt)("p",null,"Indicates whether a specified column expression in a ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUP BY")," list is aggregated or not. ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUPING")," returns 1 for aggregated or 0 for not aggregated in the result set. ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUPING")," can be used only in the ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT <select> list"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"HAVING"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clauses when ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUP BY")," is specified."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GROUPING")," is used to distinguish the null values that are returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"ROLLUP"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CUBE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUPING SETS")," from standard null values. The ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," returned as the result of a ",(0,r.kt)("inlineCode",{parentName:"p"},"ROLLUP"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CUBE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUPING SETS")," operation is a special use of ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". This acts as a column placeholder in the result set and means all."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"GROUPING( <column_expression> )\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<column_expression>"),"\nIs a column or an expression that contains a column in a ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUP BY")," clause."),(0,r.kt)("p",null,"Return Types: BIGINT"),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The following example groups ",(0,r.kt)("inlineCode",{parentName:"p"},"camp")," and aggregates ",(0,r.kt)("inlineCode",{parentName:"p"},"occupation")," amounts in the database. The ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUPING")," function is applied to the ",(0,r.kt)("inlineCode",{parentName:"p"},"camp")," column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE `roles` (\n  role_id       INT,\n  occupation    VARCHAR(32),\n  camp          VARCHAR(32),\n  register_time DATE\n)\nUNIQUE KEY(role_id)\nDISTRIBUTED BY HASH(role_id) BUCKETS 1\nPROPERTIES (\n  \"replication_allocation\" = \"tag.location.default: 1\"\n);\n\nINSERT INTO `roles` VALUES\n(0, 'who am I', NULL, NULL),\n(1, 'mage', 'alliance', '2018-12-03 16:11:28'),\n(2, 'paladin', 'alliance', '2018-11-30 16:11:28'),\n(3, 'rogue', 'horde', '2018-12-01 16:11:28'),\n(4, 'priest', 'alliance', '2018-12-02 16:11:28'),\n(5, 'shaman', 'horde', NULL),\n(6, 'warrior', 'alliance', NULL),\n(7, 'warlock', 'horde', '2018-12-04 16:11:28'),\n(8, 'hunter', 'horde', NULL);\n\nSELECT \n  camp, \n  COUNT(occupation) AS 'occ_cnt',\n  GROUPING(camp)    AS 'grouping'\nFROM\n   `roles`\nGROUP BY\n  ROLLUP(camp); -- CUBE(camp) and GROUPING SETS((camp)) also can work;\n")),(0,r.kt)("p",null,"The result set shows two null value under ",(0,r.kt)("inlineCode",{parentName:"p"},"camp"),". The first NULL is in the summary row added by the ",(0,r.kt)("inlineCode",{parentName:"p"},"ROLLUP")," operation. The summary row shows the occupation counts for all ",(0,r.kt)("inlineCode",{parentName:"p"},"camp")," groups and is indicated by 1 in the Grouping column. The second NULL represents the group of null values from this column in the table."),(0,r.kt)("p",null,"Here is the result set."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"+----------+---------+----------+\n| camp     | occ_cnt | grouping |\n+----------+---------+----------+\n| NULL     |       9 |        1 |\n| NULL     |       1 |        0 |\n| alliance |       4 |        0 |\n| horde    |       4 |        0 |\n+----------+---------+----------+\n4 rows in set (0.01 sec)\n")),(0,r.kt)("h3",{id:"keywords"},"Keywords"),(0,r.kt)("p",null,"GROUPING"),(0,r.kt)("h3",{id:"best-practice"},"Best Practice"),(0,r.kt)("p",null,"See also ",(0,r.kt)("a",{parentName:"p",href:"./grouping_id.md"},"GROUPING_ID")))}d.isMDXComponent=!0}}]);